name: build-and-test
on:
  push:
    branches: [feat/registry]

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract version from package.json
        id: extract
        run: |
          # Extract the version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "Extracted version: $VERSION"
          echo "::set-output name=version::[\"$VERSION\"]"
  build:
    needs: extract-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.extract-version.outputs.version) }}
        folder:
          - "packages/node"
      fail-fast: false
    steps:
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare Docker build
        id: prepare
        run: |
          function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

          BCN_VERSION=${{matrix.version}}
          PLATFORMS="linux/amd64"
          PUSH=false
          DOCKER_REPO=bcdb/bcn
          TAGS=("$DOCKER_REPO:${BCN_VERSION} $DOCKER_REPO:latest")
          echo "Building BCN_VERSION $BCN_VERSION for PLATFORMS ${PLATFORMS}"
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_platforms::${PLATFORMS}
          echo ::set-output name=push::${PUSH}
          echo ::set-output name=tags::${TAGS[@]}

      - name: List files in root directory
        run: ls -la

      - name: Build Docker image
        working-directory: ./
        run: |
          TAGS=(${{ steps.prepare.outputs.tags }})
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=${{steps.prepare.outputs.push}}" \
            --progress=plain \
            --build-arg "BUILD_DATE=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf "%s" "${TAGS[@]/#/ --tag }" ) \
            -f Dockerfile .
  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy .env.example to .env
        run: |
          # Copy the .env.example file to .env
          cp packages/node/chain-setup/LTC/regtest/.env.example packages/node/.env
          echo "Copied .env.example to .env"
          cp packages/node/chain-setup/LTC/regtest/litecoin.conf.example packages/node/litecoin.conf
          echo "Copied litecoin.conf.example to litecoin.conf"

      - name: Set up Docker Compose
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Start services in regtest mode
        run: |
          npm run up
          echo "Waiting for services to start..."
          sleep 120

      - name: Run integration tests
        run: |
          # Replace this with your actual test command
          ./run-integration-tests.sh
      - name: Clear DockerHub credentials
        run: |
          rm -f ${HOME}/.docker/config.json
      - name: Stop services
        run: |
          docker-compose -f docker-compose.regtest.yml down
  push-to-registry:
    needs: [build, integration-tests]
    runs-on: ubuntu-latest
    if: always() && needs.integration-tests.result == 'success' # Push only if tests pass
    steps:
      - name: Login into Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login --username "${DOCKER_HUB_USERNAME}" --password-stdin

      - name: Push Docker image
        run: |
          TAGS=(${{ needs.build.outputs.image_tag }})
          docker push ${{ needs.build.outputs.image_tag }}
