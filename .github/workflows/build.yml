name: build-and-test

on:
  push:
    branches: [feat/registry]

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract version from package.json
        id: extract
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Extracted version: $VERSION"
          echo "version=[\"$VERSION\"]" >> $GITHUB_OUTPUT

  build:
    needs: extract-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.extract-version.outputs.version) }}
        folder:
          - "packages/node"
      fail-fast: false
    outputs:
      temp_tag: ${{ steps.prepare.outputs.temp_tag }}
      final_tags: ${{ steps.prepare.outputs.final_tags }}

    steps:
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1

      - name: Checkout
        uses: actions/checkout@v2

      - name: Login into Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login --username "${DOCKER_HUB_USERNAME}" --password-stdin

      - name: Prepare Docker build
        id: prepare
        run: |
          BCN_VERSION=${{matrix.version}}
          PLATFORMS="linux/amd64"
          PUSH=true
          DOCKER_REPO=bcdb/bcn
          TEMP_TAG="${DOCKER_REPO}:${BCN_VERSION}-pre-release"
          FINAL_TAGS=("${DOCKER_REPO}:${BCN_VERSION} ${DOCKER_REPO}:latest")
          echo "Building BCN_VERSION $BCN_VERSION for PLATFORMS ${PLATFORMS}"
          echo "temp_tag=${TEMP_TAG}" >> $GITHUB_OUTPUT
          echo "final_tags=${FINAL_TAGS[@]}" >> $GITHUB_OUTPUT

      - name: Build and push temporary image
        run: |
          docker buildx create --use
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=${{steps.prepare.outputs.push}}" \
            --progress=plain \
            --tag ${{ steps.prepare.outputs.temp_tag }} \
            -f Dockerfile .

      - name: Debug temp_tag
        run: |
          echo "Temporary tag: ${{ steps.prepare.outputs.temp_tag }}"

      - name: Clear DockerHub credentials
        run: |
          rm -f ${HOME}/.docker/config.json

  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Debug temp_tag
        run: |
          echo "Temporary tag from build job: ${{ needs.build.outputs.temp_tag }}"

      - name: Pull temporary image
        run: |
          docker pull ${{ needs.build.outputs.temp_tag }}

      - name: Re-tag image for docker-compose
        run: |
          docker tag ${{ needs.build.outputs.temp_tag }} bitcoin-computer-node
          echo "Re-tagged image as bitcoin-computer-node"

      - name: Copy configuration files
        run: |
          cp chain-setup/LTC/regtest/.env.example .env
          echo "Copied .env.example to .env"

          cp chain-setup/LTC/regtest/litecoin.conf.example litecoin.conf
          echo "Copied litecoin.conf.example to litecoin.conf"

      - name: Set up Docker Compose
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Start services in regtest mode
        run: |
          npm run up &
          echo "Waiting for services to start..."
          sleep 20

      - name: Run integration tests
        working-directory: packages/node
        run: |
          npm run test

      - name: Clear DockerHub credentials
        run: |
          rm -f ${HOME}/.docker/config.json

      - name: Stop services
        working-directory: packages/node
        run: |
          npm run down

  re-tag-and-push:
    needs: [build, integration-tests]
    runs-on: ubuntu-latest
    if: always() && needs.integration-tests.result == 'success'

    steps:
      - name: Login into Docker Hub
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
        run: |
          echo "${DOCKER_HUB_PASSWORD}" | docker login --username "${DOCKER_HUB_USERNAME}" --password-stdin

      - name: Pull temporary image
        run: |
          docker pull ${{ needs.build.outputs.temp_tag }}

      - name: Re-tag image
        run: |
          TEMP_TAG="${{ needs.build.outputs.temp_tag }}"
          FINAL_TAGS=(${{ needs.build.outputs.final_tags }})
          for TAG in "${FINAL_TAGS[@]}"; do
            docker tag "$TEMP_TAG" "$TAG"
          done

      - name: Push final tags
        run: |
          FINAL_TAGS=(${{ needs.build.outputs.final_tags }})
          for TAG in "${FINAL_TAGS[@]}"; do
            docker push "$TAG"
          done

      - name: Clear DockerHub credentials
        run: |
          rm -f ${HOME}/.docker/config.json
