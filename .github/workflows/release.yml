name: release-or-pre-release

on:
  push:
    tags:
      - "v*"
env:
  REGISTRY: bcdb/bcn
jobs:
  decide:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.extract.outputs.release_type }}
      version: ${{ steps.extract.outputs.version }}
    steps:
      - name: Extract version and type
        id: extract
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          echo "Detected tag: $TAG"

          if [[ "$TAG" == *-pre-release ]]; then
            VERSION="${TAG#v}"
            VERSION="${VERSION%-pre-release}"
            echo "release_type=pre"   >> "$GITHUB_OUTPUT"
          else
            VERSION="${TAG#v}"
            echo "release_type=final" >> "$GITHUB_OUTPUT"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  build:
    needs: decide
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.tag_it.outputs.image_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Compute image tag
        id: tag_it
        run: |
          RELEASE="${{ needs.decide.outputs.release_type }}"
          VERSION="${{ needs.decide.outputs.version }}"

          if [ "$RELEASE" = "pre" ]; then
            TAG="${REGISTRY}:${VERSION}-pre-release"
          else
            TAG="${REGISTRY}:${VERSION}"
          fi

          echo "Built image tag is: $TAG"
          echo "image_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Build and Push Docker Image
        run: |
          TAG="${{ steps.tag_it.outputs.image_tag }}"
          echo "Pushing Docker image $TAG"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            --tag "$TAG" \
            -f Dockerfile .

          if [ "${{ needs.decide.outputs.release_type }}" = "final" ]; then
            echo "Also tagging as latest"
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              --push \
              --tag "${REGISTRY}:latest" \
              --tag "${REGISTRY}:${{ needs.decide.outputs.version }}" \
              -f Dockerfile .
          fi

  integration-tests:
    needs: [decide, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Compute image tag
        id: tag_it
        run: |
          RELEASE="${{ needs.decide.outputs.release_type }}"
          VERSION="${{ needs.decide.outputs.version }}"

          if [ "$RELEASE" = "pre" ]; then
            TAG="${REGISTRY}:${VERSION}-pre-release"
          else
            TAG="${REGISTRY}:${VERSION}"
          fi

          echo "Built image tag is: $TAG"
          echo "image_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Debug
        run: |
          TAG="${{ steps.tag_it.outputs.image_tag }}"
          echo "decide.version      = '${{ needs.decide.outputs.version }}'"
          echo "decide.release_type = '${{ needs.decide.outputs.release_type }}'"
          echo "build.image_tag     = '${{ needs.build.outputs.image_tag }}'"

      - name: Pull temporary image
        run: |
          TAG="${{ steps.tag_it.outputs.image_tag }}"
          echo "$TAG"
          docker pull "$TAG"

      - name: Re-tag image for docker-compose
        run: |
          docker tag "$TAG" bcdb:bcn

      - name: Copy configuration files
        working-directory: packages/node
        run: |
          cp chain-setup/LTC/regtest/.env.example .env
          cp chain-setup/LTC/regtest/litecoin.conf.example litecoin.conf

      - name: Set up Docker Compose
        run: |
          sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Install dependencies (npm install)
        working-directory: packages/node
        continue-on-error: true
        run: |
          npm install || echo "npm install failed, continuing..."

      - name: Start services in regtest mode
        working-directory: packages/node
        run: |
          npm run up &
          sleep 20

      - name: Run integration tests
        working-directory: packages/node
        run: |
          sleep 30; npm run test

      - name: Stop services
        working-directory: packages/node
        run: |
          npm run down
