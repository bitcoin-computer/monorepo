import t from"bitcoind-rpc";import e from"chai";import s from"sinon";import a from"sinon-chai";import{Computer as n}from"@bitcoin-computer/lib";import r from"fs";import{backOff as o}from"exponential-backoff";import{createLogger as c,format as i,transports as d}from"winston";import f from"dotenv";import l from"is-primitive";import b from"is-plain-object";import u from"os";import{dirname as p}from"path";import{fileURLToPath as y}from"url";import m from"util";import h from"@bitcoin-computer/bitcore-lib-ltc";import g from"pg-promise";import w from"pg-monitor";const{deleteProperty:v}=Reflect;const S=l;const T=b;const E=t=>"object"==typeof t&&null!==t||"function"==typeof t;const R=t=>{if(!S(t))throw new TypeError("Object keys must be strings or symbols");if((t=>"__proto__"===t||"constructor"===t||"prototype"===t)(t))throw new Error(`Cannot set unsafe key: "${t}"`)};const N=(t,e)=>e&&"function"==typeof e.split?e.split(t):"symbol"==typeof t?[t]:Array.isArray(t)?t:((t,e,s)=>{const a=(t=>Array.isArray(t)?t.flat().map(String).join(","):t)(e?((t,e)=>{if("string"!=typeof t||!e)return t;let s=t+";";return void 0!==e.arrays&&(s+=`arrays=${e.arrays};`),void 0!==e.separator&&(s+=`separator=${e.separator};`),void 0!==e.split&&(s+=`split=${e.split};`),void 0!==e.merge&&(s+=`merge=${e.merge};`),void 0!==e.preservePaths&&(s+=`preservePaths=${e.preservePaths};`),s})(t,e):t);R(a);const n=O.cache.get(a)||s();return O.cache.set(a,n),n})(t,e,(()=>((t,e={})=>{const s=e.separator||".";const a="/"!==s&&e.preservePaths;if("string"==typeof t&&!1!==a&&/\//.test(t))return[t];const n=[];let r="";const o=t=>{let e;""!==t.trim()&&Number.isInteger(e=Number(t))?n.push(e):n.push(t)};for(let e=0;e<t.length;e++){const a=t[e];"\\"!==a?a!==s?r+=a:(o(r),r=""):r+=t[++e]}return r&&o(r),n})(t,e)));const $=(t,e,s,a)=>{if(R(e),void 0===s)v(t,e);else if(a&&a.merge){const n="function"===a.merge?a.merge:Object.assign;n&&T(t[e])&&T(s)?t[e]=n(t[e],s):t[e]=s}else t[e]=s;return t};const O=(t,e,s,a)=>{if(!e||!E(t))return t;const n=N(e,a);let r=t;for(let t=0;t<n.length;t++){const e=n[t];const o=n[t+1];if(R(e),void 0===o){$(r,e,s,a);break}"number"!=typeof o||Array.isArray(r[e])?(E(r[e])||(r[e]={}),r=r[e]):r=r[e]=[]}return t};O.split=N,O.cache=new Map,O.clear=()=>{O.cache=new Map};var x=O;var _=r;var A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var I="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};var C=function(){function t(t,e){for(var s=0;s<e.length;s++){var a=e[s];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,s,a){return s&&t(e.prototype,s),a&&t(e,a),e}}();var H=function t(e,s){var a=s.indexOf(".");if(!~a){if(null==e)return;return e[s]}var n=s.substring(0,a),r=s.substring(a+1);if(null!=e)return e=e[n],r?t(e,r):e},M=x,k=function(t,e){if("function"!=typeof e)return JSON.parse(_.readFileSync(t));_.readFile(t,"utf-8",(function(t,s){try{s=JSON.parse(s)}catch(e){t=t||e}e(t,s)}))},P=r,F=u;var L=function(){function t(e,s){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=s=s||{},s.stringify_width=s.stringify_width||2,s.stringify_fn=s.stringify_fn||null,s.stringify_eol=s.stringify_eol||!1,s.ignore_dots=s.ignore_dots||!1,this.path=e,this.data=this.read()}return C(t,[{key:"set",value:function(t,e,s){var a=this;return"object"===(void 0===t?"undefined":I(t))?function(t,e){var s=0,a=[];if(Array.isArray(t))for(;s<t.length&&!1!==e(t[s],s);++s);else if("object"===(void 0===t?"undefined":A(t))&&null!==t)for(a=Object.keys(t);s<a.length&&!1!==e(t[a[s]],a[s]);++s);}(t,(function(t,e){M(a.data,e,t,s)})):this.options.ignore_dots?this.data[t]=e:M(this.data,t,e,s),this.options.autosave&&this.save(),this}},{key:"get",value:function(t){return t?this.options.ignore_dots?this.data[t]:H(this.data,t):this.toObject()}},{key:"unset",value:function(t){return this.set(t,void 0)}},{key:"append",value:function(t,e){var s=this.get(t);if(s=void 0===s?[]:s,!Array.isArray(s))throw new Error("The data is not an array!");return s.push(e),this.set(t,s),this}},{key:"pop",value:function(t){var e=this.get(t);if(!Array.isArray(e))throw new Error("The data is not an array!");return e.pop(),this.set(t,e),this}},{key:"read",value:function(t){if(!t)try{return k(this.path)}catch(t){return{}}k(this.path,(function(e,s){t(null,s=e?{}:s)}))}},{key:"write",value:function(t,e){return e?P.writeFile(this.path,t,e):P.writeFileSync(this.path,t),this}},{key:"empty",value:function(t){return this.write("{}",t)}},{key:"save",value:function(t){var e=JSON.stringify(this.data,this.options.stringify_fn,this.options.stringify_width,this.options.stringify_eol);return this.write(this.options.stringify_eol?e+F.EOL:e,t),this}},{key:"toObject",value:function(){return this.data}}]),t}();f.config();const B=new L(`${p(y(import.meta.url))}/../../package.json`,{stringify_eol:!0});const{PORT:W,ZMQ_URL:D,CHAIN:K,NETWORK:j,BCN_ENV:G,BCN_URL:q,DEBUG_MODE:U,POSTGRES_USER:Y,POSTGRES_PASSWORD:z,POSTGRES_DB:V,POSTGRES_HOST:Z,POSTGRES_PORT:X,RPC_PROTOCOL:J,RPC_USER:Q,RPC_PASSWORD:tt,RPC_HOST:et,RPC_PORT:st,SERVER_VERSION:at,DEFAULT_WALLET:nt,SYNC_INTERVAL_CHECK:rt,POSTGRES_MAX_PARAM_NUM:ot,DB_CONNECTION_RETRY_TIME:ct,SIGNATURE_FRESHNESS_MINUTES:dt,ALLOWED_RPC_METHODS:ft,NODE_MAX_PROGRESS:lt,SYNC_MAX_PROGRESS:bt,MAX_BLOCKCHAIN_HEIGHT:ut,MWEB_HEIGHT:pt,BC_START_HEIGHT:yt,WORKER_ID:mt,NUM_WORKERS:ht,SYNC_NON_STANDARD:gt,ZMQ_WAIT_PERCENTAGE:wt}=process.env;const vt=K||"LTC";const St=j||"regtest";const Tt=G||"dev";const Et=q||"http://127.0.0.1:3000";const Rt=parseInt(U,10)||1;const Nt=Y||"bcn";const $t=z||"bcn";const Ot=V||"bcn";const xt=Z||"127.0.0.1";const _t=parseInt(X,10)||"5432";const At=J||"http";const It=Q||"bcn-admin";const Ct=tt||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const Ht=et||"node";const Mt=parseInt(st,10)||19332;const kt=at||B.get("version");const Pt=nt||"defaultwallet";const Ft=parseInt(ot,10)||1e4;!ft||ft.split(",").map((t=>new RegExp(t)));const Lt=parseInt(ut||"",10)||2538171;const Bt=parseInt(pt||"",10)||432;const Wt=parseInt(wt||"",10)||.7;const Dt=c({level:["error","warn","info","http","verbose","debug","silly"][Rt],format:i.json(),transports:[new d.Console({format:i.combine(i.colorize(),i.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),i.printf((t=>`[2m${t.timestamp}[0m ${t.level} ${t.message}`)))})],exceptionHandlers:[new d.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new d.File({filename:"logs/rejections.log"})]});const Kt={maxFiles:1,maxSize:1e5};Rt>=0&&Dt.add(new d.File({filename:"error.log",level:"error"})),Rt>=1&&Dt.add(new d.File({filename:"logs/warn.log",level:"warn",...Kt})),Rt>=2&&Dt.add(new d.File({filename:"logs/info.log",level:"info",...Kt})),Rt>=3&&Dt.add(new d.File({filename:"logs/http.log",level:"http",...Kt})),Rt>=4&&Dt.add(new d.File({filename:"logs/verbose.log",level:"verbose",...Kt})),Rt>=5&&Dt.add(new d.File({filename:"logs/debug.log",level:"debug",...Kt}));const jt=new t({protocol:At,user:It,pass:Ct,host:Ht,port:Mt});const Gt=m.promisify(t.prototype.createwallet.bind(jt));const qt=m.promisify(t.prototype.generateToAddress.bind(jt));const Ut=m.promisify(t.prototype.getaddressinfo.bind(jt));const Yt=m.promisify(t.prototype.getBlock.bind(jt));const zt=m.promisify(t.prototype.getBlockchainInfo.bind(jt));const Vt=m.promisify(t.prototype.getBlockHash.bind(jt));const Zt=m.promisify(t.prototype.getRawTransaction.bind(jt));const Xt=m.promisify(t.prototype.getTransaction.bind(jt));const Jt=m.promisify(t.prototype.getNewAddress.bind(jt));const Qt={createwallet:Gt,generateToAddress:qt,getaddressinfo:Ut,getBlock:Yt,getBlockchainInfo:zt,getBlockHash:Vt,getRawTransaction:Zt,getTransaction:Xt,importaddress:m.promisify(t.prototype.importaddress.bind(jt)),listunspent:m.promisify(t.prototype.listunspent.bind(jt)),sendRawTransaction:m.promisify(t.prototype.sendRawTransaction.bind(jt)),getNewAddress:Jt,sendToAddress:m.promisify(t.prototype.sendToAddress.bind(jt))};const te=(t,e)=>Object.assign(new Array(e).fill(null),t);const ee={error:(t,e)=>{if(e.cn){const{host:s,port:a,database:n,user:r,password:o}=e.cn;Dt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${a}, database:${n}, user:${r}, password: ${o}`)}},noWarnings:!0};"dev"===Tt&&Rt>0&&(w.isAttached()?w.detach():(w.attach(ee),w.setTheme("matrix")));const se=g(ee)({host:xt,port:_t,database:Ot,user:Nt,password:$t,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:ae}=g;class ne{static async select(t){const e=new ae({name:`Input.select.${Math.random()}`,text:'SELECT "rev" FROM "Input" WHERE "rev" = $1',values:[t]});return se.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev]));for(;e.length;){const t=e.splice(0,Ft);const s=[];for(let e=1;e<=t.length;e+=1)s.push(`($${e})`);const a=s.join(",");const n=new ae({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("rev") VALUES ${a}  ON CONFLICT DO NOTHING`,values:t});await se.none(n)}}static async count(t){const e=t.map((t=>t.rev));const s=new ae({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "rev" LIKE ANY ($1)',values:[[e]]});const a=await se.oneOrNone(s);return parseInt(a?.count,10)||0}}const{Transaction:re}=h;const{Input:oe}=re;class ce{static getNonCoinbaseRevs=t=>t.map((t=>oe.fromObject({...t,script:t._scriptBuffer}))).filter((t=>!t.isNull())).map((({prevTxId:t,outputIndex:e})=>({rev:`${t.toString("hex")}/${e}`})));static insert=async t=>class{static async select(t){return ne.select(t)}static async insert(t){return ne.insert(t)}}.insert(this.getNonCoinbaseRevs(t))}const{PreparedStatement:ie}=g;class de{static async select(t){const e=new ie({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Output" WHERE "address" = $1',values:[t]});return se.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey]));for(;e.length;){const t=e.splice(0,Ft);const s=[];for(let e=1;e<=t.length;e+=4)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3})`);const a=s.join(",");const n=new ie({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey") VALUES ${a}  ON CONFLICT DO NOTHING`,values:t});await se.none(n)}}}class fe{static insert=async t=>{const e=t.flatMap((t=>t.tx.outputs.map(((e,s)=>{const{script:a}=e;let n=a.toAddress(St).toString("legacy");"false"===n&&(n=null);const r=a.toHex();const o=Math.round(e.satoshis);return{address:n,rev:`${t.txId}/${s}`,scriptPubKey:r,satoshis:o}}))));return class{static async select(t){return de.select(t)}static async insert(t){return de.insert(t)}}.insert(e)}}const{PreparedStatement:le}=g;class be{static async query(t){const{publicKey:e,classHash:s,limit:a,offset:n,order:r}=t;if(void 0===e&&void 0===s)return[];let o='SELECT "rev"\n      FROM "NonStandard"\n      WHERE true ';const c=[];e&&(c.push(e),o+=' AND $1 = ANY ("publicKeys")'),s&&(c.push(s),o+=` AND "classHash" = $${c.length}`),r&&(o+=` order by "lastUpdated" ${r}`),a&&(o+=` limit ${a}`),n&&(o+=` offset ${n}`);const i=new le({name:`NonStandard.query.${Math.random()}`,text:o,values:c});return(await se.any(i)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,classHash:a}){const n=new le({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "classHash") VALUES ($1, $2, $3, $4) ON CONFLICT DO NOTHING',values:[t,e,s,a]});await se.none(n)}static async update({id:t,rev:e,publicKeys:s}){const a=new le({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "rev"=$2, "publicKeys"=$3 WHERE "id" = $1',values:[t,e,s]});return se.none(a)}static async getRevsByIds(t){const e=new le({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1)',values:[[t]]});return se.any(e)}static async select(t){const e=new le({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "classHash" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return se.oneOrNone(e)}}class ue{static async select(t){return be.select(t)}static async query(t){return be.query(t)}static async getRevsByIds(t){return be.getRevsByIds(t)}static async insert(t){return be.insert(t)}static async update(t){return be.update(t)}}const{crypto:pe}=h;class ye{static add=async(t,e,s)=>{const a=Math.max(t.length,e.length);const n=te(t,a);const r=te(e,a);const o=(c=r,n.map(((t,e)=>[t,c[e]])));var c;await Promise.all(o.map((async([t,e],a)=>{const{__cls:n="",_owners:r=[]}=s[a]||{};if(null===t&&e)return/^[0-9A-Fa-f]{64}\/\d+$/.test(e),void await ue.insert({id:e,rev:e,publicKeys:r,classHash:pe.Hash.sha256(Buffer.from(n)).toString("hex")});if(e&&t){const{id:s,classHash:a}=await ue.select(t)||{};await ue.update({id:s,rev:e,publicKeys:r,classHash:a})}})))};static query=async t=>ue.query(t);static getRevsByIds=async t=>(await ue.getRevsByIds(t)).map((t=>t.rev))}const me=new n({chain:vt,network:St,url:Et});class he{static syncTx=async t=>{if(await fe.insert([t]),await ce.insert(t.tx.inputs),t.isBcdbTx()){const{inRevs:e=[],outRevs:s=[],outData:a=[]}=t;await ye.add(e,s,a)}};static rawTxSubscriber=async t=>{try{const e=t.toString("hex");Dt.info(`ZMQ message { rawTx:${e} }`),"dev"===Tt&&r.appendFileSync("zmqlog.log",`${e} \r\n`);const s=await me.db.fromTxHex(e);try{await this.syncTx(s)}catch(t){Dt.error(`Error parsing transaction ${t.message} ${t.stack}`)}}catch(t){Dt.error(`RawTxSubscriber failed with error '${t.message} ${t.stack}'`)}};static checkSyncStatus=async()=>{const t=await o((async()=>{const t=await Qt.getBlockchainInfo();const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const{blocks:s}=t.result;if(Dt.info(`Zmq. Bitcoind { percentage:${e}%, blocks:${s} }`),parseFloat(t.result.verificationprogress)<=Wt)throw new Error("Node not ready yet");return t}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const s=t.result.blocks;Dt.info(`BCN reaches sync end...at { bitcoind.progress:${e}%, bitcoindSyncedHeight:${s} }`)};static createWallet=async()=>{try{await Qt.createwallet(Pt)}catch(t){Dt.debug(`Wallet creation failed with error '${t.message}'`)}};static sub=async t=>{try{await this.createWallet(),"regtest"!==St&&await this.checkSyncStatus(),await(async()=>{if("LTC"===vt&&"regtest"===St){Dt.info(`Node is starting for chain ${vt} and network ${St}, Starting MWEB setup.`);const{result:t}=await Qt.getBlockchainInfo();const e=t.blocks;if(e<Bt){const{result:t}=await Qt.getNewAddress("","legacy");const s=Bt-e-1;s&&await Qt.generateToAddress(s,t);const{result:a}=await Qt.getNewAddress("mweb","mweb");await Qt.sendToAddress(a,1),await Qt.generateToAddress(1,t)}Dt.info("MWEB setup is complete")}})(),Dt.info(`Bitcoin Computer Node is ready on version: ${kt} MAX_BLOCKCHAIN_HEIGHT: ${Lt}`);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){Dt.error(`ZMQ subscription failed with error '${t.message}'`)}}}e.use(a);const{expect:ge}=e;afterEach((()=>{s.restore()})),describe("zmqsub",(()=>{describe("rawTxSubscriber",(()=>{it("Should ignore a standard rawtx",(async()=>{const e="01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000";const a="0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098";const n={txid:a,hash:"906c7434c759c8baf9bea2429a849942143cbed7bae22d34086bbfbafff2c582",version:1,vin:[],vout:[{value:50,n:0,scriptPubKey:{hex:"410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac",addresses:["12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX"]},txId:a}],nLockTime:0};const r={};r[e]=n;const o=s.stub(fe,"insert").resolves();const c=s.stub(ye,"add");const i=s.stub(t.prototype,"decodeRawTransaction").callsFake(((t,e)=>{e(null,{result:r[t]})}));await he.rawTxSubscriber(e),ge(c.notCalled).to.be.true,c.restore(),i.restore(),o.restore()})),it("Should sync a coinbase testnet rawtx",(async()=>{const e="01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0b03c58c01062f503253482fffffffff0386600f27010000001976a914dde4906f870df11cf316b15adb628a3c3cc9883988ac8ab8f60200000000434104ffd03de44a6e11b9917f3a29f9443283d9871c9d743ef30d5eddcd37094b64d1b3d8090496b53256786bf5c82932ec23c3b74d9f05a6f95a8b5529352656664bac00000000000000002a6a28e73cd21eb4ac1eb1ba3767f4bf12be98935656451df3d6dee34c125662bcd599000000000000010000000000";const a=new n;const r=await a.db.fromTxHex(e);const o={};o[e]=r;const c=s.stub(fe,"insert").resolves();const i=s.stub(ce,"insert").resolves();const d=s.stub(ye,"add").resolves();const f=s.stub(t.prototype,"decodeRawTransaction").callsFake(((t,e)=>{e(null,{result:o[t]})}));await he.rawTxSubscriber(e),ge(c.args[0][0][0].tx.outputs.length).to.eq(r.tx.outputs.length),ge(i.calledWith(r.tx.inputs)).to.be.true,ge(d.notCalled).to.be.true,f.restore(),c.restore(),i.restore(),d.restore()})),it("Should sync another coinbase testnet rawtx",(async()=>{const e="01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0b03c58c01062f503253482fffffffff0386600f27010000001976a914dde4906f870df11cf316b15adb628a3c3cc9883988ac8ab8f60200000000434104ffd03de44a6e11b9917f3a29f9443283d9871c9d743ef30d5eddcd37094b64d1b3d8090496b53256786bf5c82932ec23c3b74d9f05a6f95a8b5529352656664bac00000000000000002a6a28e73cd21eb4ac1eb1ba3767f4bf12be98935656451df3d6dee34c125662bcd599000000000000010000000000";const a=new n;const r=await a.db.fromTxHex(e);const o={};o[e]=r;const c=s.stub(fe,"insert").resolves();const i=s.stub(ce,"insert").resolves();const d=s.stub(ye,"add").resolves();const f=s.stub(t.prototype,"decodeRawTransaction").callsFake(((t,e)=>{e(null,{result:o[t]})}));await he.rawTxSubscriber(e),ge(c.args[0][0][0].tx.outputs.length).to.eq(r.tx.outputs.length),ge(i.calledWith(r.tx.inputs)).to.be.true,ge(d.notCalled).to.be.true,f.restore(),c.restore(),i.restore(),d.restore()})),it("Should sync bcdb testnet rawtx",(async()=>{const e="0200000002ed71bf8538dce5cde4fa704091349280c9b8ed734abba0e5ea577293e2affadc020000006b483045022100d6f97b6c4404b12d59c9b98ce44669f99dca440904432573bf7e7bde5b465ce5022040e5c3c27c924e27e213ae09130d2d81fc33b33b6ee5aade076abd3caaacdb980121028440227b67c9c930faaac1f23d78967ac3cf129d734c76bdbd25027cdf4042d0ffffffff869d3597c68a643d804e34a245478f959aeb19b4e82fd516e93d990ca3d8000b000000006b483045022100f07f8a54586b66ddcde86f544538dd64997e011885216880c20808e38a15cbb502202a663b78a1a0f696ec9386824c64d777d0d90e306cfd3922bc921c6bf0b04b600121028440227b67c9c930faaac1f23d78967ac3cf129d734c76bdbd25027cdf4042d0ffffffff0a643c000000000000255121028440227b67c9c930faaac1f23d78967ac3cf129d734c76bdbd25027cdf4042d051ae643c0000000000006951210201e8d2e6e85840eae4d85240f6b8dc40404040e8d0d2e65ce8d2e8d8ca407a40210202d1a5d1b194ed71b880808081d1a1a5ccb985c9d1a5cdd080f48185c9d1a5cd2103d92bbbd61e057a68d266ba234842393c03455e8eda5df591ab1d344b1d30d02953ae643c0000000000006951210203a1dae37101010103a3434b9973ab936101e903ab9361dae3710103eae372e32102006e20207365744f776e6572286f776e657229207b5c6e20202020746869732e2103d92bbbd61e057a68d266ba234842393c03455e8eda5df591ab1d344b1d30d02953ae643c00000000000069512102027dbdddb995c9cc80f4816dbdddb995c974ed71b88081f571b971b9f488b089210201bebec2e4cee64474b64482d8d84458449ad2d8de445844d0e8e8e0e6745e5e2103d92bbbd61e057a68d266ba234842393c03455e8eda5df591ab1d344b1d30d02953ae643c0000000000006951210202dddddcb985c9d194b5bdb9b1a5b994b9b995d0bdd985c8bd85c9d1957dbdb92102006c696e655f6e65742f73746f726167652f696d616765732f617274652d6f6e2103d92bbbd61e057a68d266ba234842393c03455e8eda5df591ab1d344b1d30d02953ae643c00000000000069512102006c696e652f6e6f7461732f6c6c6567615f626164615f323031372f6d696c6f2102005f6c6f636b6574742f3732343037332d312d65736c2d41522f4d696c6f5f4c2103d92bbbd61e057a68d266ba234842393c03455e8eda5df591ab1d344b1d30d02953ae643c0000000000004751210201000000000000000000000000dec6d6cae8e8bedec4e4c25cd4e0ce44bafaba2103d92bbbd61e057a68d266ba234842393c03455e8eda5df591ab1d344b1d30d02952ae0000000000000000536a4c503030303030313030375b7b225f5f696e646578223a7b226f626a223a307d2c225f5f636c73223a22636c61737320417274776f726b207b5c6e2020636f6e7374727563746f72287469746c652c206172d08e0000000000001976a91477fd2a76764dfdc6ef085bdc307cdc3ffe17a83388acfc630400000000001976a914a1a4ae9783d4ee736df6b62f6a9cc0ed06e1f12f88ac00000000";const a=new n({chain:"LTC",network:"testnet"});const r=await a.db.fromTxHex(e);const o={};o[e]=r;const c=s.stub(fe,"insert").resolves();const i=s.stub(ce,"insert").resolves();const d=s.stub(ye,"add").resolves();const f=s.stub(t.prototype,"decodeRawTransaction").callsFake(((t,e)=>{e(null,{result:o[t]})}));await he.rawTxSubscriber(e),ge(c.args[0][0][0].tx.outputs.length).to.eq(r.tx.outputs.length),ge(i.calledWith(r.tx.inputs)).to.be.true,ge(d.getCall(0).args[0].length).to.eq(0),ge(d.getCall(0).args[1].length).to.eq(1),ge(d.getCall(0).args[2].length).to.eq(1),f.restore(),c.restore(),i.restore(),d.restore()}))}))}));
