import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as a from"zeromq";import n from"express-rate-limit";import*as o from"@bitcoin-computer/secp256k1";import{crypto as i,networks as c,bufferUtils as u,script as l,address as d,initEccLib as p}from"@bitcoin-computer/nakamotojs";import m from"dotenv";import h from"winston";import g from"winston-daily-rotate-file";import y from"pg-promise";import v from"pg-monitor";import{backOff as E}from"exponential-backoff";import w from"fs";import{Computer as f,Transaction as O}from"@bitcoin-computer/lib";import S from"bitcoind-rpc";import T from"util";import $ from"elliptic";import R from"hash.js";import I,{dirname as b}from"path";import{fileURLToPath as x}from"url";m.config();const C=process.env.BCN_CHAIN;const N=process.env.BCN_NETWORK;const{BCN_PORT:M}=process.env;const{BCN_ZMQ_URL:A}=process.env;const{BCN_ALLOWED_RPC_METHODS:B}=process.env;const{BCN_LOG_LEVEL:L}=process.env;const{BCN_LOG_MAX_FILES:P}=process.env;const{BCN_LOG_MAX_SIZE:H}=process.env;const{BCN_LOG_ZIP:k}=process.env;const{BCN_SHOW_DB_LOGS:U}=process.env;const{BCN_RATE_LIMIT_ENABLED:j}=process.env;const{BCN_RATE_LIMIT_WINDOW:_}=process.env;const{BCN_RATE_LIMIT_MAX:F}=process.env;const{BCN_RATE_LIMIT_STANDARD_HEADERS:W}=process.env;const{BCN_RATE_LIMIT_LEGACY_HEADERS:D}=process.env;process.env,process.env,process.env;const{BCN_OFFCHAIN_PROTOCOL:G}=process.env;const K=process.env.BCN_QUERY_LIMIT||"1000";const Y=process.env.BCN_URL||`http://127.0.0.1:${M}`;const J=process.env.BCN_ENV||"dev";const q=process.env.BCN_ZMQ_ACTIVATION_HEIGHT||"1";const{BITCOIN_RPC_USER:V}=process.env;const{BITCOIN_RPC_PASSWORD:z}=process.env;const{BITCOIN_RPC_HOST:Z}=process.env;const{BITCOIN_RPC_PORT:X}=process.env;const{BITCOIN_RPC_PROTOCOL:Q}=process.env;const{BITCOIN_DEFAULT_WALLET:tt}=process.env;const{POSTGRES_USER:et}=process.env;const{POSTGRES_PASSWORD:st}=process.env;const{POSTGRES_DB:rt}=process.env;const{POSTGRES_HOST:at}=process.env;const{POSTGRES_PORT:nt}=process.env;const{POSTGRES_MAX_CONNECTIONS:ot}=process.env;const{POSTGRES_IDLE_TIMEOUT_MILLIS:it}=process.env;h.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"blue"});const ct=h.format.combine(h.format.colorize(),h.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),h.format.json(),h.format.printf(t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`));const ut=h.format.combine(h.format.colorize(),h.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),h.format.printf(t=>`${t.timestamp} ${t.level} ${t.message}`));const lt={zippedArchive:"true"===k,maxSize:H,maxFiles:P,dirname:"logs"};const dt=[];const pt={0:"error",1:"warn",2:"info",3:"http",4:"debug"}[L];"dev"===J&&dt.push(new h.transports.Console({format:ut,level:pt})),dt.push(new g({filename:"logs/application-%DATE%.log",datePattern:"YYYY-MM-DD",level:pt,...lt})),dt.push(new g({filename:"logs/error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...lt}));const mt=h.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:ct,transports:dt,exceptionHandlers:[new h.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new h.transports.File({filename:"logs/rejections.log"})]});m.config();const{version:ht}=JSON.parse(w.readFileSync("package.json","utf8"));const gt=ht||process.env.BCN_SERVER_VERSION;const yt=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const vt=[{txId:"e3bf3d07d4b0375638d5f1db5255fe07ba2c4cb067cd81b84ee974b6585fb468",height:91722},{txId:"d5d27987d2a3dfc724e359870c6644b40e497bdc0589a033220fe15429d88599",height:91812}];const Et={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:a,user:n,password:o}=e.cn;mt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${a}, user:${n}, password: ${o}`)}},noWarnings:!0};"true"===U&&(v.isAttached()?v.detach():(v.attach(Et),v.setTheme("matrix")));const wt=y(Et)({host:at,port:parseInt(nt,10),database:rt,user:et,password:st,max:parseInt(ot,10),allowExitOnIdle:!0,idleTimeoutMillis:parseInt(it,10)});const{PreparedStatement:ft}=y;class Ot{static async select(t){const e=new ft({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return wt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new ft({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return wt.none(s)}static async delete(t){const e=new ft({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await wt.any(e))[0].count>0}}class St{static async select(t){const e=await Ot.select(t);return e?.data||null}static async insert(t){return Ot.insert(t)}static async delete(t){return Ot.delete(t)}}const Tt=s.Router();Tt.get("/:id",async({params:{id:t},url:e},s)=>{try{const e=await St.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),Tt.post("/",async(t,e)=>{const{body:{data:s},url:r}=t;try{const r=i.sha256(Buffer.from(s)).toString("hex");await St.insert({id:r,data:s});const a=`${G||t.protocol}://${t.get("host")}/store/${r}`;e.status(201).json({_url:a})}catch(t){mt.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}}),Tt.delete("/:id",async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})});const{PreparedStatement:$t}=y;class Rt{static async getBalance(t){const e=new $t({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT COALESCE(sum("satoshis"),0) as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is not null',values:[t]});const s=new $t({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT COALESCE(sum("satoshis"),0) as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is null',values:[t]});const r=(await wt.oneOrNone(e)).satoshis;const a=(await wt.oneOrNone(s)).satoshis;return{confirmed:r,unconfirmed:a,balance:(BigInt(r)+BigInt(a)).toString()}}static async select(t){const e=new $t({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", COALESCE("satoshis",0) as "satoshis", "asm", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return wt.any(e)}static async selectByScriptASM(t){const e=new $t({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", COALESCE("satoshis",0) as "satoshis", "asm", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "asm" = $1',values:[t]});return wt.any(e)}static async selectByPk(t){const e=new $t({name:`Utxos.selectByPk.${Math.random()}`,text:`SELECT "address", COALESCE("satoshis",0) as "satoshis", "asm", "rev", split_part(rev, ':', 1) AS "txId", cast(split_part(rev, ':', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "asm" LIKE '%${t}%'`});return wt.any(e)}}class It{static async getBalance(t){return Rt.getBalance(t)}static async select(t){return Rt.select(t)}static async selectByPk(t){return Rt.selectByPk(t)}static async selectByScriptASM(t){return Rt.selectByScriptASM(t)}}class bt{static getBalance=async t=>It.getBalance(t);static selectByAddress=async t=>It.select(t);static selectByPk=async t=>It.selectByPk(t);static selectByScriptASM=async t=>It.selectByScriptASM(t)}const xt={protocol:Q,user:V,pass:z,host:Z,port:parseInt(X,10)};const Ct=new S(xt);const Nt=T.promisify(S.prototype.createwallet.bind(Ct));const Mt=T.promisify(S.prototype.generateToAddress.bind(Ct));const At=T.promisify(S.prototype.getaddressinfo.bind(Ct));const Bt=T.promisify(S.prototype.getBlock.bind(Ct));const Lt=T.promisify(S.prototype.getBlockchainInfo.bind(Ct));const Pt=T.promisify(S.prototype.getBlockHash.bind(Ct));const Ht=T.promisify(S.prototype.getRawTransaction.bind(Ct));const kt=T.promisify(S.prototype.getRawTransaction.bind(Ct));const Ut=T.promisify(S.prototype.getTransaction.bind(Ct));const jt=T.promisify(S.prototype.getNewAddress.bind(Ct));const _t={createwallet:Nt,generateToAddress:Mt,getaddressinfo:At,getBlock:Bt,getBlockchainInfo:Lt,getBlockHash:Pt,getRawTransaction:Ht,getTransaction:Ut,importaddress:T.promisify(S.prototype.importaddress.bind(Ct)),invalidateBlock:T.promisify(S.prototype.invalidateBlock.bind(Ct)),listunspent:T.promisify(S.prototype.listunspent.bind(Ct)),sendRawTransaction:T.promisify(S.prototype.sendRawTransaction.bind(Ct)),getNewAddress:jt,sendToAddress:T.promisify(S.prototype.sendToAddress.bind(Ct)),getRawTransactionJSON:kt,validateaddress:T.promisify(S.prototype.validateaddress.bind(Ct))};const Ft=(t,e)=>{const s=[];for(let r=0;r<t.length;r+=e){const a=Math.min(r+e,t.length);const n=t.slice(r,a);s.push(n)}return s};const Wt=t=>{const e=[];for(let s=1;s<=t;s+=3){const t=`($${s},$${s+1},$${s+2})`;e.push(t)}return e.join(",")};const Dt=t=>{const e=[];for(let s=1;s<=t;s+=9){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8})`;e.push(t)}return e.join(",")};const Gt=t=>{try{return t()}catch{return null}};class Kt{static async getBulkTransactions(t){return(await Promise.all(t.map(t=>_t.getRawTransaction(t,0)))).map(t=>t.result)}static async getRawTransaction(t,e){const{result:s}=await _t.getRawTransaction(t,e);return"object"==typeof s&&s.vout.forEach(t=>{t.value=BigInt(Math.round(1e8*t.value))}),s}static async getRawTransactionsJSON(t){return{txId:(e=(await _t.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map(t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence}),outs:e.vout.map(t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:BigInt(Math.round(1e8*t.value)).toString()}})};var e}static async sendRawTransaction(t){const{result:e,error:s}=await _t.sendRawTransaction(t);if(s)throw mt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>{let e;e="DOGE"===C||"PEPE"===C?await _t.validateaddress(t):await _t.getaddressinfo(t),void 0===e.result.timestamp&&(mt.info(`Importing address: ${t}`),await _t.importaddress(t,!1));const s=await _t.listunspent(0,999999,[t]);return s.result.forEach(t=>{t.amount=BigInt(t.amount)}),s.result};static walletSetup=async()=>{if("regtest"===N){if(mt.info(`Node is starting for chain ${C} and network ${N} \n\nStarting Wallet setup`),"LTC"===C){const{result:t}=await _t.getBlockchainInfo();const e=t.blocks;if(e<yt){const{result:t}=await _t.getNewAddress("","legacy");const s=yt-e-1;s&&await _t.generateToAddress(s,t);const{result:r}=await _t.getNewAddress("mweb","mweb");await _t.sendToAddress(r,1),await _t.generateToAddress(1,t),mt.info("MWEB setup is complete")}}if("BTC"===C){const{result:t}=await _t.getNewAddress("","legacy");await _t.generateToAddress(200,t),mt.info("Wallet setup is complete")}if("PEPE"===C||"DOGE"===C){const{result:t}=await _t.getNewAddress("");await _t.generateToAddress(200,t),mt.info("Wallet setup is complete")}}};static createWallet=async()=>{try{await _t.createwallet(tt,!1,!1,"",!1,!1)}catch(t){if(t.message.includes("already exists"))return void mt.info(`Wallet ${tt} already exists`);mt.warn(`Wallet creation failed with error '${t.message}'`)}};static checkBlockchainProgress=async t=>{const e=await E(async()=>{const e=await _t.getBlockchainInfo();const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const{blocks:r}=e.result;if(mt.info(`Zmq. Bitcoind { percentage:${s}%, blocks:${r} }`),parseFloat(e.result.verificationprogress)<=t)throw new Error("Node not ready yet");return e},{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const r=e.result.blocks;mt.info(`BCN reaches sync end...at { bitcoind.progress:${s}%, bitcoindSyncedHeight:${r} }`)}}class Yt{static getRaw=async t=>Kt.getBulkTransactions(t);static getRawJSON=async t=>Kt.getRawTransactionsJSON(t);static sendRaw=async t=>Kt.sendRawTransaction(t);static getUtxos=async t=>Kt.getUtxos(t);static parseTransactions=async(t,e,s,r,a)=>{let n=t;"LTC"===e&&(n=t.filter(t=>"08"!==t.hex.slice(10,12)));const o=[];for(const t of n)try{let{hex:n}=t;n||(n=(await Kt.getRawTransaction(t.txid,1)).hex);const i=f.txFromHex({hex:n});i&&("BTC"===e&&"mainnet"===s&&vt.some(t=>t.height===a&&t.txId===i.txId)?mt.warn(`wid ${r} pid: ${process.pid}: skipping conflicting transaction ${i.txId} in block ${a}`):o.push(i))}catch(e){mt.error(`[wid ${r} pid: ${process.pid}: failed to parse transaction in block ${a}\n          error message: ${e.message}\n          transaction: ${JSON.stringify(t)}`)}return o};static walletSetup=async()=>Kt.walletSetup()}const Jt={protocol:Q,user:V,pass:z,host:Z,port:parseInt(X,10)};const qt=new S(Jt);const Vt={};const zt=JSON.parse(JSON.stringify(S.callspec));Object.keys(zt).forEach(t=>{zt[t.toLowerCase()]=zt[t]});const Zt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(S.prototype).forEach(t=>{if(t&&"function"==typeof S.prototype[t]){const e=t.toLowerCase();Vt[t]=T.promisify(S.prototype[t].bind(qt)),Vt[e]=T.promisify(S.prototype[e].bind(qt))}})}catch(t){mt.error(`Error occurred while binding RPC methods: ${t.message}`)}function Xt(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function Qt(t){if(!Xt(t))throw new Error("Invalid rev")}const{PreparedStatement:te}=y;class ee{static async listSentOutputs(t){const e=new te({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", COALESCE("Output"."satoshis", 0) AS "satoshis"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return wt.any(e)}static async listReceivedOutputs(t){const e=new te({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", COALESCE("Output"."satoshis", 0) as "satoshis" FROM "Output" WHERE "address" = $1',values:[t]});return wt.any(e)}static async listTxs(t){const e=new te({name:`Output.listTxs.${Math.random()}`,text:'\n        WITH \n          -- Outputs received by the address\n          received AS (\n            SELECT SPLIT_PART("rev", \':\', 1) AS "txId", SUM("satoshis") AS "satoshis"\n            FROM "Output"\n            WHERE "address" = $1\n            GROUP BY 1\n          ),\n          -- Total satoshis sent from the address\n          sent AS (\n            SELECT SPLIT_PART("Input"."spendingInput", \':\', 1) AS "txId", SUM("Output"."satoshis") AS "satoshis"\n            FROM "Input"\n            JOIN "Output" ON "Input"."outputSpent" = "Output"."rev"\n            WHERE "Output"."address" = $1\n            GROUP BY 1\n          ),\n          txs AS (\n            SELECT \n              COALESCE(r."txId", s."txId") AS "txId",\n              COALESCE(s."satoshis", 0) AS "inputsSatoshis",\n              COALESCE(r."satoshis", 0) AS "outputsSatoshis",\n              COALESCE(r."satoshis", 0) - COALESCE(s."satoshis", 0) AS "satoshis"\n            FROM received r\n            FULL OUTER JOIN sent s ON r."txId" = s."txId"\n          )\n        SELECT * FROM txs;\n      ',values:[t]});const s=await wt.any(e);return{sentTxs:s.filter(t=>BigInt(t.satoshis)<0n).map(t=>({...t,satoshis:(-1n*BigInt(t.satoshis)).toString()})),receivedTxs:s.filter(t=>BigInt(t.satoshis)>=0n).map(t=>({...t,satoshis:BigInt(t.satoshis).toString()}))}}static async select(t){const e=new te({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", "hash", "mod", "isTbcOutput", "previous", "blockHash" FROM "Output" WHERE "address" = $1',values:[t]});return wt.any(e)}static async insert(t){await Promise.all(Ft(t,1111).map(t=>{const e=t.flatMap(({rev:t,address:e,satoshis:s,asm:r,isTbcOutput:a,mod:n,previous:o,hash:i,blockHash:c})=>[t,e,s,r,a,n,o,i,c]);return wt.none(new te({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "asm", "isTbcOutput",\n              "mod", "previous", "hash", "blockHash") VALUES ${Dt(e.length)} ON CONFLICT  ("rev") \n              DO UPDATE SET "blockHash" = COALESCE("Output"."blockHash", EXCLUDED."blockHash")`,values:e}))}))}static async eraseBlockHash(t){await Promise.all(Ft(t,1e4).map(t=>{const e=t.join("','");return wt.none(new te({name:`Output.eraseBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))}))}static async getIdByRev(t){const e=new te({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await wt.any(e)).filter(t=>null===t.previous);return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map(t=>this.getIdByRev(t)))}static async getLatestRev(t){const e=new te({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await wt.any(e);const r=Object.fromEntries(s.map(t=>[t.previous,t.rev]));let a=t;for(;r[a];)a=r[a];return a}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new te({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await wt.any(e)).map(t=>t.rev)}static sqlSuffix(t,e,s){let r="";return s&&(r+=` order by "timestamp" ${s}`),r+=` limit ${t||K}`,e&&(r+=` offset ${e}`),r}static async getUnspentRevsByMod(t,e,s,r){const a=await this.getIdsByMod(t);const n=await this.getLatestRevs(a);const o=new te({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,r)}`,values:[n]});return(await wt.any(o)).map(t=>t.rev)}static async getUnspentRevsByPublicKey(t,e,s,r){const a=new te({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE asm LIKE '%' || $1 || '%' AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,r)}`,values:[t]});return(await wt.any(a)).map(t=>t.rev)}static async getUnspentRevsByModAndPublicKey(t,e,s,r,a){const n=await this.getUnspentRevsByPublicKey(e,s,r,a);const o=await this.getIdsByRevs(n);const i=new te({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await wt.any(i)).map(t=>t.rev);const u=await this.getLatestRevs(c);const l=new te({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,r,a)}`,values:[u]});return(await wt.any(l)).map(t=>t.rev)}static async getUnspentTbcOutputs(t,e,s){const r=new te({name:`Output.getUnspentTbcOutputs.${Math.random()}`,text:`SELECT "rev", "address", "satoshis", "asm", "timestamp"\n        FROM "Output" WHERE "isTbcOutput" = true AND NOT EXISTS\n        (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") ${this.sqlSuffix(t,e,s)}`});return(await wt.any(r)).map(t=>t.rev)}static async getAncestorTxs(t){const e=new te({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:' WITH RECURSIVE RecursiveCTE AS (\n        SELECT SUBSTRING("rev" FROM 1 FOR 64) AS "rev", SUBSTRING(o."previous" FROM 1 FOR 64) as "previous"\n        FROM "Output" o\n        where o."isTbcOutput" = true and SUBSTRING(o."rev" FROM 1 FOR 64) = $1\n        UNION ALL\n        SELECT SUBSTRING(o."rev" FROM 1 FOR 64),  SUBSTRING(o.previous FROM 1 FOR 64)\n        FROM "Output" o\n        INNER JOIN RecursiveCTE r ON SUBSTRING(r."previous" FROM 1 FOR 64) = SUBSTRING(o."rev" FROM 1 FOR 64)\n      )\n      select distinct rev as "txId"\n      FROM RecursiveCTE;\n      ',values:[t]});return(await wt.any(e)).map(t=>t.txId)}static async query(t){const{publicKey:e,limit:s,offset:r,ids:a,mod:n,order:o}=t;const i=parseInt(K||"",10);if(s&&parseInt(s||"",10)>i||a&&a.length>i)throw new Error(`Can't fetch more than ${K} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return a?(a.map(Qt),this.getLatestRevs(a)):n&&!e?this.getUnspentRevsByMod(n,s,r,o):!n&&e?this.getUnspentRevsByPublicKey(e,s,r,o):n&&e?this.getUnspentRevsByModAndPublicKey(n,e,s,r,o):this.getUnspentTbcOutputs(s,r,o)}static async selectNext(t){const e=new te({name:`Output.selectNext.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "previous" = $1',values:[t]});return wt.any(e)}static async selectPrev(t){const e=new te({name:`Output.selectPrev.${Math.random()}`,text:'SELECT "previous" FROM "Output" WHERE "rev" = $1',values:[t]});return wt.any(e)}}class se{static async select(t){return ee.select(t)}static async insert(t){return ee.insert(t)}static async eraseBlockHash(t){return ee.eraseBlockHash(t)}static async listSentOutputs(t){return ee.listSentOutputs(t)}static async listReceivedOutputs(t){return ee.listReceivedOutputs(t)}static async listTxs(t){return ee.listTxs(t)}static async getLatestRev(t){return ee.getLatestRev(t)}static async getLatestRevs(t){return ee.getLatestRevs(t)}static async getIdByRev(t){return ee.getIdByRev(t)}static async getAncestorTxs(t){return ee.getAncestorTxs(t)}static async query(t){return ee.query(t)}static async selectNext(t){return ee.selectNext(t)}static async selectPrev(t){return ee.selectPrev(t)}}const re=function(t=C,e=N){switch(t){case"BTC":switch(e){case"mainnet":return c.bitcoin;case"testnet":return c.testnet;case"regtest":return c.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return c.litecoin;case"testnet":return c.litecointestnet;case"regtest":return c.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}case"PEPE":switch(e){case"mainnet":return c.pepecoin;case"testnet":return c.pepecointestnet;case"regtest":return c.pepecoinregtest;default:throw new Error(`Invalid network ${e}`)}case"DOGE":switch(e){case"mainnet":return c.dogecoin;case"testnet":return c.dogecointestnet;case"regtest":return c.dogecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${t}`)}}(C,N);class ae{static insert(t){return se.insert(t)}static getOutputs=(t,e=null)=>t.flatMap(({outs:t,txId:s,zip:r,onChainMetaData:a})=>{const{exp:n="",mod:o=""}=a;return t.map(({script:t,value:a},c)=>{const u=c<r.length;let p;try{p=l.toASM(t)}catch(t){p="[error]"}return{rev:`${s}:${c}`,address:Gt(()=>d.fromOutputScript(t,re)),satoshis:a,asm:p,isTbcOutput:u,mod:u?o:"",previous:u?r[c][0]:null,hash:u?i.sha256(Buffer.from(n)).toString("hex"):null,blockHash:e}})});static getAncestorTxs=async t=>se.getAncestorTxs(t);static select=async t=>se.select(t);static eraseBlockHash=async t=>{await se.eraseBlockHash(t)};static listSentOutputs=async t=>se.listSentOutputs(t);static listReceivedOutputs=async t=>se.listReceivedOutputs(t);static listTxs=async t=>se.listTxs(t);static getLatestRev=async t=>se.getLatestRev(t);static getLatestRevs=async t=>se.getLatestRevs(t);static getIdByRev=async t=>se.getIdByRev(t);static query=async t=>se.query(t)}const ne=new Map;class oe{static has(t){return ne.has(t)}static set(t,e){ne.has(t)||ne.set(t,new Set),ne.get(t).add(e)}static get(t){return ne.get(t)}static delete(t){return ne.delete(t)}static close(t,e){const s=ne.get(t);s&&(s.delete(e),0===s.size&&ne.delete(t))}static closeAll(){ne.forEach(t=>{t.forEach(t=>{t.end()}),t.clear()}),ne.clear()}}const{PreparedStatement:ie}=y;class ce{static async select(t){const e=new ie({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent", "spendingInput", "blockHash" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return wt.any(e)}static async insert(t){await Promise.all(Ft(t,3333).map(t=>{const e=t.flatMap(({outputSpent:t,spendingInput:e,blockHash:s})=>[t,e,s]);return wt.none(new ie({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput", "blockHash") VALUES ${Wt(e.length)} \n              ON CONFLICT ("spendingInput") \n              DO UPDATE SET "blockHash" = COALESCE("Input"."blockHash", EXCLUDED."blockHash")`,values:e}))}))}static async eraseBlockHash(t){await Promise.all(Ft(t,1e4).map(t=>{const e=t.join("','");return wt.none(new ie({name:`Input.eraseBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))}))}static async count(t){const e=t.map(t=>t.outputSpent);const s=new ie({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const r=await wt.oneOrNone(s);return parseInt(r?.count,10)||0}}class ue{static async select(t){return ce.select(t)}static async insert(t){return ce.insert(t)}static async eraseBlockHash(t){return ce.eraseBlockHash(t)}}class le{static insert=async t=>{await ue.insert(t)};static getInputs=(t,e=null)=>t.flatMap(({ins:t,txId:e})=>t.map((t,s)=>({input:t,index:s,txId:e}))).filter(({input:t})=>!O.isCoinbaseHash(t.hash)).map(({input:t,index:s,txId:r})=>{return{outputSpent:`${a=t.hash,u.reverseBuffer(Buffer.from(a)).toString("hex")}:${t.index}`,spendingInput:`${r}:${s}`,blockHash:e};var a});static select=async t=>ue.select(t);static eraseBlockHash=async t=>{await ue.eraseBlockHash(t)}}class de{static emit=async(t,e)=>{await Promise.all(t.outs.map(async(s,r)=>{const a=`${t.getId()}:${r}`;const n=await ae.getIdByRev(a);const o=oe.get(n)||new Set;for(const t of o)t.write(`data: ${JSON.stringify({rev:a,hex:e})}\n\n`)}))}}class pe{static rawTxSubscriber=async t=>{const e=t.toString("hex");mt.info(`ZMQ message { hex:${e} }`);const s=e.slice(10,12);if("08"!==s&&"09"!==s)try{const t=f.txFromHex({hex:e});await ae.insert(ae.getOutputs([t])),await le.insert(le.getInputs([t])),await de.emit(t,e)}catch(t){mt.error(`[zmq] Error parsing transaction ${e}\n${t.stack}`)}};static sub=async t=>{try{mt.info(`Bitcoin Computer Node ${gt} is starting on ${N} ${C}.`),await Kt.createWallet(),"regtest"!==N&&await Kt.checkBlockchainProgress(.7),await Kt.walletSetup(),mt.info(`Bitcoin Computer Node ${gt} is ready. ZQM activation height: ${q}`),await Kt.checkBlockchainProgress(.9);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){mt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:me}=y;class he{static async select(t){const e=new me({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await wt.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new me({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await wt.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new me({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await wt.none(s)}}class ge{static async select(t){return he.select(t)}static async insert(t){return he.insert(t)}static async update(t){return he.update(t)}}const{ec:ye}=$;const ve=new ye("secp256k1");const Ee=s();const we=new class{configFile;loaded=!1;load=()=>{try{const t="dev"===J?"bcn.test.config.json":"bcn.config.json";const e=b(x(import.meta.url));this.configFile=w.readFileSync(I.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw mt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(mt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:r}=JSON.parse(this.configFile.toString());if(t&&r)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:a}=e.locals.authToken;if(r&&!r.includes(a)||t&&t.includes(a))return void e.status(403).json({error:`Public key ${a} is not allowed.`});s()}catch(s){mt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let fe;p(o);try{fe=r.createServer(Ee)}catch(t){throw mt.error(`Starting server failed with error '${t.stack}'`),t}mt.info(`Server listening on port ${M}`),Ee.use(e()),"true"===j&&Ee.use(n({windowMs:parseInt(_,10)||9e5,max:parseInt(F,10)||100,standardHeaders:"true"===W,legacyHeaders:"true"===D})),Ee.use(t.json({limit:"100mb"})),Ee.use(t.urlencoded({limit:"100mb",extended:!0})),we.loaded&&(Ee.use(async(t,e,s)=>{try{const r=t.get("Authentication");if(!r){const{method:s,url:r}=t;const a=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${r}`;return mt.error(a),void e.status(401).json({error:a})}const a=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:n,publicKey:o,timestamp:i}=a;if(Date.now()-i>18e4)return void e.status(401).json({error:"Signature is too old."});const c=R.sha256().update(Y+i).digest("hex");if(!ve.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await ge.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await ge.update({publicKey:o,clientTimestamp:i})}else await ge.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=a,s()}catch(t){mt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}}),Ee.use(we.middleware)),Ee.use(async function(t,e,s){const r=Date.now();mt.http(`${t.method} ${t.originalUrl}`),e.on("finish",()=>{const{method:s,originalUrl:a}=t;const{statusCode:n}=e;const o=Date.now()-r;mt.http(`${s} ${a} ${n} - ${o}ms`)}),s()});const Oe=`\n  <h2>Bitcoin Computer Node</h2>\n  <b>Status</b>: Healthy <br />\n  <b>Version</b>: ${gt} <br />\n  <b>Chain</b>: ${C} <br />\n  <b>Network</b>: ${N}\n`;Ee.get("/",(t,e)=>e.status(200).send(Oe)),Ee.use(`/v1/${C}/${N}`,(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await bt.selectByAddress(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/wallet/:address/sent-outputs",async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.listSentOutputs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/wallet/:address/received-outputs",async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.listReceivedOutputs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/wallet/:address/list-txs",async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.listTxs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/non-standard-utxos",async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const r={mod:s.get("mod"),publicKey:s.get("publicKey"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const a=await ae.query(r);e.status(200).json(a)}catch(s){mt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(500).json({error:s.message})}}),t.get("/address/:address/balance",async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await bt.getBalance(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message||t}'`),s.status(500).json({error:t.message})}}),t.post("/tx/bulk",async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input txIds."});const e=await Yt.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.post("/tx/post",async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input hex."});const e=await Yt.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(r){mt.error(`POST ${e} failed with error '${r.message}\ntxHex: ${t}`),s.status(500).json({error:r.message})}}),t.get("/tx/:txId/ancestors",async({params:t,url:e},s)=>{try{const{txId:e}=t;if(e.includes(":"))return void s.status(400).json({error:"Invalid txId, did you provide a revision instead?"});if(!e)return void s.status(400).json({error:"Missing input txIds."});const r=await ae.getAncestorTxs(e);r?s.status(200).json(r):s.status(404).json({error:"Not found"})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/tx/:txId/json",async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input txId."});const e=await Yt.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.post("/revs",async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input object ids."});const e=await ae.getLatestRevs(t);s.status(200).json(e)}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.post("/revToId",async({body:{rev:t},url:e},s)=>{try{if(!Xt(t))return void s.status(400).json({error:"Invalid rev id"});const e=await ae.getIdByRev(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.post("/rpc",async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!new RegExp(B).test(t.method))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===zt[t]||null===zt[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=zt[t].trim().split(" ");if(0===e.trim().length&&0!==zt[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===zt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map((t,e)=>Zt[r[e]](t))}(t.method,t.params);const r=e.length?await Vt[t.method](...e):await Vt[t.method]();s.status(200).json({result:r})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/next/:rev",async({params:{rev:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing rev."});const e=await se.selectNext(t);e?s.status(200).json({rev:e&&e.length?e[0].rev:void 0}):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/prev/:rev",async({params:{rev:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing rev."});const e=await se.selectPrev(t);e?s.status(200).json({rev:e&&e.length?e[0].previous:void 0}):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}}),t.get("/subscribe/:id",(t,e)=>{try{const{id:s}=t.params;e.writeHead(200,{"Content-Type":"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive"}),oe.set(s,e);const r=setInterval(()=>{e.write("data: \n\n")},3e4);t.on("close",()=>{clearInterval(r),oe.close(s,e),e.end()})}catch(t){mt.error("Error in /subscribe/:id:",t.message),e.status(500).json({error:t.message})}}),t.post("/non-standard-utxo",async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})}),t})()),Ee.use("/v1/store",Tt);const Se=`\n\n----------------------------------\n  [1mStarting Bitcoin Computer Node[0m\n\n  Chain [2m${C}[0m\n  Network [2m${N}[0m\n  Version [2m${gt}[0m\n  URL [2m${Y}[0m\n----------------------------------\n`;fe.listen(M,()=>{mt.info(Se)}).on("error",t=>{mt.error(t.message),process.exit(1)});const Te=new a.Subscriber;Te.connect(A),Te.subscribe("rawtx"),mt.info(`ZMQ Subscriber connected to ${A}`),(async()=>{try{await(async()=>{await E(()=>wt.connect(),{startingDelay:500})})(),await pe.sub(Te)}catch(t){mt.error(`Error in connectAndSub: ${t.stack}`),process.exit(1)}})(),process.on("SIGINT",async()=>{try{mt.info("Shutting down server..."),oe.closeAll(),fe.close(()=>{mt.info("Server closed."),process.exit(0)}),await Te.close()}catch(t){mt.error(`Error shutting down: ${t.stack}`)}});
