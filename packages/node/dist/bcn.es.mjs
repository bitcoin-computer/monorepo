import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as a from"zeromq";import n from"express-rate-limit";import o from"dotenv";import i from"fs";import c,{Transaction as l}from"@bitcoin-computer/nakamotojs-lib";import d from"winston";import u from"winston-daily-rotate-file";import p from"pg-promise";import m from"pg-monitor";import{backOff as h}from"exponential-backoff";import{ECPairFactory as y}from"ecpair";import*as w from"@bitcoin-computer/tiny-secp256k1";import g from"bitcoind-rpc";import f from"util";import{Computer as E}from"@bitcoin-computer/lib";import $ from"elliptic";import T from"hash.js";import v,{dirname as b}from"path";import{fileURLToPath as S}from"url";o.config();const R=JSON.parse(i.readFileSync("package.json","utf8"));function x(t,e){switch(t){case"BTC":return"mainnet"===e?c.networks.bitcoin:c.networks.testnet;case"LTC":return"mainnet"===e?c.networks.litecoin:c.networks.litecoinregtest;default:throw new Error("We currently only support BTC and LTC, support for other currencies will be added soon.")}}const{PORT:I,ZMQ_URL:N,CHAIN:O,NETWORK:M,BCN_ENV:A,BCN_URL:P,DEBUG_MODE:C,POSTGRES_USER:_,POSTGRES_PASSWORD:B,POSTGRES_DB:j,POSTGRES_HOST:k,POSTGRES_PORT:H,RPC_PROTOCOL:D,RPC_USER:L,RPC_PASSWORD:K,RPC_HOST:U,RPC_PORT:Y,SERVER_VERSION:F,DEFAULT_WALLET:W,SYNC_INTERVAL_CHECK:G,POSTGRES_MAX_PARAM_NUM:q,DB_CONNECTION_RETRY_TIME:J,SIGNATURE_FRESHNESS_MINUTES:z,ALLOWED_RPC_METHODS:V,NODE_MAX_PROGRESS:Z,SYNC_MAX_PROGRESS:X,MAX_BLOCKCHAIN_HEIGHT:Q,MWEB_HEIGHT:tt,BC_START_HEIGHT:et,WORKER_ID:st,NUM_WORKERS:rt,SYNC_NON_STANDARD:at,ZMQ_WAIT_PERCENTAGE:nt,QUERY_LIMIT:ot,LOG_MAX_FILE_SIZE:it,LOG_MAX_FILE_NUM:ct,LOG_ZIP:lt,RPC_URL:dt,RPC_BATCHSIZE:ut,RPC_CONCURRENT:pt,INDEXDB:mt,KEYDB:ht}=process.env;const yt=parseInt(I,10)||"3000";const wt=N||"tcp://node:28332";const gt=O||"LTC";const ft=M||"regtest";const Et=A||"dev";const $t=P||"http://127.0.0.1:3000";const Tt=parseInt(C,10)||1;const vt=_||"bcn";const bt=B||"bcn";const St=j||"bcn";const Rt=k||"127.0.0.1";const xt=parseInt(H,10)||"5432";const It=D||"http";const Nt=L||"bcn-admin";const Ot=K||"kH4nU5Okm6-uyC0_mA5ztVNacJqZbYd_KGLl6mx722A=";const Mt=U||"node";const At=parseInt(Y,10)||19332;const Pt=R.version||F;const Ct=W||"defaultwallet";const _t=parseInt(q,10)||1e4;const Bt=parseInt(J,10)||500;const jt=parseInt(z,10)||3;const kt=V?V.split(",").map((t=>new RegExp(t))):[];const Ht=parseInt(Q||"",10)||2538171;const Dt=parseInt(tt||"",10)||432;const Lt=parseInt(et||"",10)||25e5;const Kt=parseInt(nt||"",10)||.7;const Ut=parseInt(ot||"",10)||100;const Yt=it||"20m";const Ft=ct||"14d";const Wt=!!lt;d.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const Gt=d.format.combine(d.format.colorize(),d.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),d.format.json(),d.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const qt={zippedArchive:Wt,maxSize:Yt,maxFiles:Ft,dirname:"logs"};const Jt=[];"dev"===Et&&Jt.push(new d.transports.Console({format:d.format.combine(d.format.colorize(),d.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),d.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))})),Tt>=0&&Jt.push(new u({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...qt})),Tt>=1&&Jt.push(new u({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...qt})),Tt>=2&&Jt.push(new u({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...qt})),Tt>=3&&Jt.push(new u({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...qt})),Tt>=4&&Jt.push(new u({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...qt})),Jt.push(new u({filename:"logs-%DATE%.log",datePattern:"YYYY-MM-DD"}));const zt=d.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:Gt,transports:Jt,exceptionHandlers:[new d.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new d.transports.File({filename:"logs/rejections.log"})]});const Vt=()=>"dev"===Et;const Zt={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:a,user:n,password:o}=e.cn;zt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${a}, user:${n}, password: ${o}`)}},noWarnings:!0};Vt()&&Tt>0&&(m.isAttached()?m.detach():(m.attach(Zt),m.setTheme("matrix")));const Xt=p(Zt)({host:Rt,port:xt,database:St,user:vt,password:bt,allowExitOnIdle:!0,idleTimeoutMillis:100});const{PreparedStatement:Qt}=p;class te{static async select(t){const e=new Qt({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return Xt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new Qt({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return Xt.none(s)}static async delete(t){const e=new Qt({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await Xt.any(e))[0].count>0}}class ee{static async select(t){const e=await te.select(t);return e?.data||null}static async insert(t){return te.insert(t)}static async delete(t){return te.delete(t)}}const{crypto:se}=c;const re=s.Router();re.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await ee.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){zt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),re.post("/",(async(t,e)=>{const{body:{data:s},url:r}=t;try{const a=se.sha256(Buffer.from(s)).toString("hex");await ee.insert({id:a,data:s});const n=`${["localhost","127.0.0.1"].includes(t.host)?"http":"https"}://${t.get("host")}/store/${a}`;zt.info(`Off-chain POST ${r} succeeded with url '${n}'`),e.status(201).json({_url:n})}catch(t){zt.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),re.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:ae}=p;class ne{static async getBalance(t){const e=new ae({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1',values:[t]});const s=await Xt.oneOrNone(e);return parseInt(s?.satoshis,10)||0}static async select(t){const e=new ae({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await Xt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0,value:parseInt(t.satoshis,10)||0})))}static async selectByScriptHex(t){const e=new ae({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "scriptPubKey" = $1',values:[t]});return(await Xt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0,value:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new ae({name:`Utxos.selectByPk.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout", "publicKeys" FROM "Utxos" WHERE $1 = ANY ("publicKeys")',values:[t]});return(await Xt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10),value:parseInt(t.satoshis,10)})))}}class oe{static async getBalance(t){return ne.getBalance(t)}static async select(t){return ne.select(t)}static async selectByScriptHex(t){return ne.selectByScriptHex(t)}static async selectByPk(t){return ne.selectByPk(t)}}class ie{static getBalance=async t=>oe.getBalance(t);static select=async t=>oe.select(t);static selectByScriptHex=async t=>oe.selectByScriptHex(t);static selectByPk=async t=>oe.selectByPk(t)}function ce(t){if(!/^[0-9A-Fa-f]{64}:\d+$/.test(t))throw new Error("Invalid rev")}const{PreparedStatement:le}=p;class de{static async query(t){const{publicKey:e,hash:s,limit:r,offset:a,order:n,ids:o,mod:i}=t;if(r&&parseInt(r||"",10)>Ut||o&&o.length>Ut)throw new Error(`Can't fetch more than ${Ut} revs.`);if(n&&"ASC"!==n&&"DESC"!==n)throw new Error("Invalid order");let c='SELECT "rev"\n      FROM "NonStandard"\n      WHERE true ';const l=[];e&&(l.push(e),c+=` AND $${l.length} = ANY ("publicKeys")`),s&&(l.push(s),c+=` AND "hash" = $${l.length}`),i&&(l.push(i),c+=` AND "mod" = $${l.length}`),o&&o.length&&(o.map(ce),l.push(o),c+=` AND "id" = ANY ($${l.length})`),n&&(c+=` order by "lastUpdated" ${n}`),l.push(r||Ut),c+=` limit $${l.length}`,a&&(l.push(a),c+=` offset $${l.length}`);const d=new le({name:`NonStandard.query.${Math.random()}`,text:c,values:l});return(await Xt.any(d)).map((t=>t.rev))}static async insert({id:t,rev:e,publicKeys:s,hash:r,mod:a}){const n=new le({name:`NonStandard.insert.${Math.random()}`,text:'INSERT INTO "NonStandard"("id", "rev", "publicKeys", "hash", "mod") VALUES ($1, $2, $3, $4, $5) ON CONFLICT DO NOTHING',values:[t,e,s,r,a]});await Xt.none(n)}static async update({id:t,rev:e,publicKeys:s}){const r=new le({name:`NonStandard.update.${Math.random()}`,text:'UPDATE "NonStandard" SET "rev"=$2, "publicKeys"=$3 WHERE "id" = $1',values:[t,e,s]});return Xt.none(r)}static async delete({rev:t}){const e=new le({name:`NonStandard.delete.${Math.random()}`,text:'DELETE FROM "NonStandard" WHERE "rev" = $1',values:[t]});await Xt.none(e)}static async getRevsByIds(t){if(t&&t.length>Ut)throw new Error(`Can't fetch more than ${Ut} revs.`);const e=new le({name:`NonStandard.getRevsByIds.${Math.random()}`,text:'SELECT "rev" FROM "NonStandard" WHERE "id" LIKE ANY($1)',values:[[t]]});return Xt.any(e)}static async select(t){const e=new le({name:`NonStandard.select.${Math.random()}`,text:'SELECT "id", "hash", "mod" FROM "NonStandard" WHERE "rev" = $1',values:[t]});return Xt.oneOrNone(e)}}class ue{static async select(t){return de.select(t)}static async query(t){return de.query(t)}static async getRevsByIds(t){return de.getRevsByIds(t)}static async insert(t){return de.insert(t)}static async update(t){return de.update(t)}static async delete(t){return de.delete({rev:t})}}class pe{static add=async t=>{const{zip:e,outData:s}=t;for(let t=0;t<e.length;t+=1){const[r,a]=e[t];const{exp:n="",_owners:o=[],mod:i=""}=s[t]||{};if(!r&&a)ce(a),await ue.insert({id:a,rev:a,publicKeys:o,hash:c.crypto.sha256(Buffer.from(n)).toString("hex"),mod:i});else if(r&&a){const{id:t,hash:e,mod:s}=await ue.select(r)||{};await ue.update({id:t,rev:a,publicKeys:o,hash:e,mod:s})}else r&&!a&&await ue.delete(r)}};static query=async t=>ue.query(t);static getRevsByIds=async t=>(await ue.getRevsByIds(t)).map((t=>t.rev))}const me=new g({protocol:It,user:Nt,pass:Ot,host:Mt,port:At});const he=f.promisify(g.prototype.createwallet.bind(me));const ye=f.promisify(g.prototype.generateToAddress.bind(me));const we=f.promisify(g.prototype.getaddressinfo.bind(me));const ge=f.promisify(g.prototype.getBlock.bind(me));const fe=f.promisify(g.prototype.getBlockchainInfo.bind(me));const Ee=f.promisify(g.prototype.getBlockHash.bind(me));const $e=f.promisify(g.prototype.getRawTransaction.bind(me));const Te=f.promisify(g.prototype.getRawTransaction.bind(me));const ve=f.promisify(g.prototype.getTransaction.bind(me));const be=f.promisify(g.prototype.getNewAddress.bind(me));const Se={createwallet:he,generateToAddress:ye,getaddressinfo:we,getBlock:ge,getBlockchainInfo:fe,getBlockHash:Ee,getRawTransaction:$e,getTransaction:ve,importaddress:f.promisify(g.prototype.importaddress.bind(me)),listunspent:f.promisify(g.prototype.listunspent.bind(me)),sendRawTransaction:f.promisify(g.prototype.sendRawTransaction.bind(me)),getNewAddress:be,sendToAddress:f.promisify(g.prototype.sendToAddress.bind(me)),getRawTransactionJSON:Te};class Re{static async getTransaction(t){const{result:e}=await Se.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Se.getRawTransaction(t))))).map((t=>t.result))}static async getRawTransactionsJSON(t){return{txId:(e=(await Se.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Se.sendRawTransaction(t);if(s)throw zt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await Se.getaddressinfo(t)).result.timestamp&&(zt.info(`Importing address: ${t}`),await Se.importaddress(t,!1)),(await Se.listunspent(0,999999,[t])).result)}class xe{static get=async t=>Re.getTransaction(t);static getRaw=async t=>Re.getBulkTransactions(t);static getRawJSON=async t=>Re.getRawTransactionsJSON(t);static sendRaw=async t=>Re.sendRawTransaction(t);static getUtxos=async t=>Re.getUtxos(t)}const Ie=new g({protocol:It,user:Nt,pass:Ot,host:Mt,port:At});const Ne={};const Oe=JSON.parse(JSON.stringify(g.callspec));Object.keys(Oe).forEach((t=>{Oe[t.toLowerCase()]=Oe[t]}));const Me={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(g.prototype).forEach((t=>{if(t&&"function"==typeof g.prototype[t]){const e=t.toLowerCase();Ne[t]=f.promisify(g.prototype[t].bind(Ie)),Ne[e]=f.promisify(g.prototype[e].bind(Ie))}}))}catch(t){zt.error(`Error occurred while binding RPC methods: ${t.message}`)}const Ae=t=>new Promise((e=>setTimeout(e,t)));const Pe=y(w);const Ce=c.networks.regtest;const{PreparedStatement:_e}=p;class Be{static async select(t){const e=new _e({name:`Input.select.${Math.random()}`,text:'SELECT "rev" FROM "Input" WHERE "rev" = $1',values:[t]});return Xt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev]));for(;e.length;){const t=e.splice(0,_t);const s=[];for(let e=1;e<=t.length;e+=1)s.push(`($${e})`);const r=s.join(",");const a=new _e({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("rev") VALUES ${r} ON CONFLICT DO NOTHING`,values:t});await Xt.none(a)}}static async count(t){const e=t.map((t=>t.rev));const s=new _e({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "rev" LIKE ANY ($1)',values:[[e]]});const r=await Xt.oneOrNone(s);return parseInt(r?.count,10)||0}}class je{static async select(t){return Be.select(t)}static async insert(t){return Be.insert(t)}}class ke{static getNonCoinbaseRevs=t=>{const e=t.filter((t=>!l.isCoinbaseHash(t.hash))).map((({hash:t,index:e})=>({rev:`${c.bufferUtils.reverseBuffer(Buffer.from(t)).toString("hex")}:${e}`})));return e};static insert=async t=>je.insert(this.getNonCoinbaseRevs(t))}const{PreparedStatement:He}=p;class De{static async select(t){const e=new He({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev" FROM "Output" WHERE "address" = $1',values:[t]});return Xt.any(e)}static async insert(t){const e=t.flatMap((t=>[t.rev,t.address,t.satoshis,t.scriptPubKey,t.publicKeys]));for(;e.length;){const t=e.splice(0,_t);const s=[];for(let e=1;e<=t.length;e+=5)s.push(`($${e}, $${e+1}, $${e+2}, $${e+3}, $${e+4})`);const r=s.join(",");const a=new He({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "publicKeys") VALUES ${r}  ON CONFLICT DO NOTHING`,values:t});await Xt.none(a)}}}class Le{static async select(t){return De.select(t)}static async insert(t){return De.insert(t)}}class Ke{static insert=async t=>{const e=t.flatMap((t=>t.tx.outs.map(((e,s)=>{const{script:r}=e;let a;let n;try{a=c.address.fromOutputScript(r,x(gt,ft))}catch(t){a=null}try{n=c.payments.p2ms({output:r,network:x(gt,ft)}).pubkeys.map((t=>t.toString("hex")))}catch(t){n=null}const o=r.toString("hex");const i=Math.round(e.value);return{address:a,rev:`${t.txId}:${s}`,scriptPubKey:o,satoshis:i,publicKeys:n}}))));return Le.insert(e)}}let Ue;try{Ue=new E({chain:gt,network:ft,url:$t})}catch(t){zt.error(`Error creating computer, ${t.message}`),process.exit(1)}class Ye{static syncTx=async t=>{await Ke.insert([t]),await ke.insert(t.tx.ins),t.isBcTx(gt,ft)&&await pe.add(t)};static rawTxSubscriber=async t=>{const e=t.toString("hex");if(zt.info(`ZMQ message { rawTx:${e} }`),"08"!==e.slice(10,12)){let t;try{t=await Ue.txFromHex({hex:e})}catch(t){zt.error(`RawTxSubscriber failed with error '${t.message} ${t.stack}'`)}try{await this.syncTx(t)}catch(t){zt.error(`Error parsing transaction ${t.message} ${t.stack}`)}}};static checkSyncStatus=async()=>{const t=await h((async()=>{const t=await Se.getBlockchainInfo();const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const{blocks:s}=t.result;if(zt.info(`Zmq. Bitcoind { percentage:${e}%, blocks:${s} }`),parseFloat(t.result.verificationprogress)<=Kt)throw new Error("Node not ready yet");return t}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const e=(100*parseFloat(t.result.verificationprogress)).toFixed(4);const s=t.result.blocks;zt.info(`BCN reaches sync end...at { bitcoind.progress:${e}%, bitcoindSyncedHeight:${s} }`)};static createWallet=async()=>{try{await Se.createwallet(Ct,!1,!1,"",!1,!1)}catch(t){zt.debug(`Wallet creation failed with error '${t.message}'`)}};static sub=async t=>{try{await this.createWallet(),"regtest"!==ft&&await this.checkSyncStatus(),await(async()=>{if("regtest"===ft){if(zt.info(`Node is starting for chain ${gt} and network ${ft}, \n\n. Starting Wallet setup.`),"LTC"===gt){const{result:t}=await Se.getBlockchainInfo();const e=t.blocks;if(e<Dt){const{result:t}=await Se.getNewAddress("","legacy");const s=Dt-e-1;s&&await Se.generateToAddress(s,t);const{result:r}=await Se.getNewAddress("mweb","mweb");await Se.sendToAddress(r,1),await Se.generateToAddress(1,t),zt.info("MWEB setup is complete")}}if("BTC"===gt){const{result:t}=await Se.getNewAddress("","legacy");await Se.generateToAddress(200,t),zt.info("Wallet setup is complete")}}})(),zt.info(`Bitcoin Computer Node ${Pt} is ready. MAX_BLOCKCHAIN_HEIGHT: ${Ht}`);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){zt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:Fe}=p;class We{static async select(t){const e=new Fe({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await Xt.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new Fe({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await Xt.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new Fe({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await Xt.none(s)}}class Ge{static async select(t){return We.select(t)}static async insert(t){return We.insert(t)}static async update(t){return We.update(t)}}const{ec:qe}=$;const Je=new qe("secp256k1");const ze=s();const Ve=new class{configFile;loaded=!1;load=()=>{try{const t=Vt()?"bcn.test.config.json":"bcn.config.json";const e=b(S(import.meta.url));this.configFile=i.readFileSync(v.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw zt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(zt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:r}=JSON.parse(this.configFile.toString());if(t&&r)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:a}=e.locals.authToken;if(r&&!r.includes(a)||t&&t.includes(a))return void e.status(403).json({error:`Public key ${a} is not allowed.`});s()}catch(s){zt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let Ze;try{Ze=r.createServer(ze)}catch(t){throw zt.error(`Starting server failed with error '${t.message}'`),t}if(zt.info(`Server listening on port ${yt}`),ze.use(e()),"dev"!==Et){const t=n({windowMs:9e5,max:300,standardHeaders:!0,legacyHeaders:!1});ze.use(t)}ze.use(t.json({limit:"100mb"})),ze.use(t.urlencoded({limit:"100mb",extended:!0})),ze.get("/",((t,e)=>e.status(200).send(`<h2>Bitcoin Computer Node</h2> <b>Status</b> healthy <br /><b>Version</b> ${Pt}`))),Ve.loaded&&(ze.use((async(t,e,s)=>{try{const r=t.get("Authentication");if(!r){const{method:s,url:r}=t;const a=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${r}`;return zt.error(a),void e.status(401).json({error:a})}const a=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:n,publicKey:o,timestamp:i}=a;if(Date.now()-i>1e3*jt*60)return void e.status(401).json({error:"Signature is too old."});const c=T.sha256().update($t+i).digest("hex");if(!Je.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const l=await Ge.select(o);if(l){if(l.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await Ge.update({publicKey:o,clientTimestamp:i})}else await Ge.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=a,s()}catch(t){zt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),ze.use(Ve.middleware));const Xe=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ie.select(e))}catch(t){zt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const r={mod:s.get("mod"),publicKey:s.get("publicKey"),hash:s.get("hash"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids")?.toString()||"[]")};const a=await pe.query(r);e.status(200).json(a)}catch(s){zt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(404).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ie.getBalance(e))}catch(t){zt.error(`GET ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(500).json({error:"Missing input txIds."});const e=await xe.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){zt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input hex."});const e=await xe.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(t){zt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/mine",(async({query:{count:t},url:e},s)=>{try{const{result:e}=await Ne.getnewaddress();if("string"!=typeof t)throw new Error("Please provide appropriate count");return await Ne.generatetoaddress(parseInt(t,10)||1,e),s.status(200).json({success:!0})}catch(t){return zt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/:id/height",(async({params:{id:t},url:e},s)=>{try{let e=t;if("best"===t){const{result:t}=await Ne.getbestblockhash();e=t}const{result:r}=await Ne.getblockheader(e,!0);return s.status(200).json({height:r.height})}catch(t){return zt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/faucet",(async({body:{address:t,value:e},url:s},r)=>{try{const s=(await Ne.sendtoaddress(t,parseInt(e,10)/1e8,"","")).result;const a=(await Ne.getrawtransaction(s,1)).result.vout.findIndex((t=>1e8*t.value===parseInt(e,10)));return r.status(200).json({txId:s,vout:a,height:-1,value:e})}catch(t){return zt.error(`POST ${s} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.post("/faucetScript",(async({body:{script:t,value:e},url:s},r)=>{try{const s=Pe.makeRandom({network:Ce});const a=c.payments.p2pkh({pubkey:s.publicKey,network:Ce});const{address:n}=a;const o=(await Ne.sendtoaddress(n,2*parseInt(e,10)/1e8,"","")).result;let i;let l=10;for(;!i;)if(i=(await ie.select(n)).filter((t=>t.txId===o))[0],!i){if(l-=1,l<=0)throw new Error("No outputs");await Ae(10)}const d=(await Ne.getrawtransaction(i.txId,1)).result;const u=new c.Psbt({network:Ce});u.addInput({hash:i.txId,index:i.vout,nonWitnessUtxo:Buffer.from(d.hex,"hex")}),u.addOutput({script:Buffer.from(t,"hex"),value:parseInt(e,10)}),u.signInput(0,s),u.finalizeAllInputs();const p=u.extractTransaction();let m;for(await Ne.sendrawtransaction(p.toHex()),l=5;!m;)if(m=(await ie.selectByScriptHex(t)).filter((t=>t.txId===p.getId()))[0],!m){if(l-=1,l<=0)throw new Error("No outputs");await Ae(10)}return r.status(200).json({txId:p.getId(),vout:m.vout,height:-1,value:m.value})}catch(t){return zt.error(`POST ${s} failed with error '${t.message}'`),r.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(500).json({error:"Missing input txId."});const e=await xe.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){zt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(404).json({error:"Missing input object ids."});const e=await pe.getRevsByIds(t);s.status(200).json(e)}catch(t){zt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!kt.some((e=>e.test(t.method))))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Oe[t]||null===Oe[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=Oe[t].trim().split(" ");if(0===e.trim().length&&0!==Oe[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===Oe[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>Me[r[e]](t)))}(t.method,t.params);const r=e.length?await Ne[t.method](...e):await Ne[t.method]();s.status(200).json({result:r})}catch(t){zt.error(`POST ${e} failed with error '${t.message}'`),s.status(404).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})();ze.use(`/v1/${gt}/${ft}`,Xe),ze.use("/v1/store",re),Ze.listen(yt,(()=>{zt.info(`Rev ${Pt} Started web server on port ${yt} BC_START_HEIGHT ${Lt}`)})).on("error",(t=>{zt.error(t.message),process.exit(1)}));const Qe=new a.Subscriber;Qe.connect(wt),Qe.subscribe("rawtx"),zt.info(`ZMQ Subscriber connected to ${wt}`),(async()=>{await(async()=>{await h((()=>Xt.connect()),{startingDelay:Bt})})(),await Ye.sub(Qe)})();
