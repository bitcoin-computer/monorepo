import t from"body-parser";import e from"cors";import s from"express";import a from"http";import*as r from"zeromq";import n from"express-rate-limit";import*as o from"@bitcoin-computer/secp256k1";import{crypto as i,networks as c,bufferUtils as u,script as l,address as p,payments as d,Psbt as m,initEccLib as h}from"@bitcoin-computer/nakamotojs";import g from"dotenv";import y from"winston";import w from"winston-daily-rotate-file";import f from"pg-promise";import v from"pg-monitor";import{backOff as E}from"exponential-backoff";import T from"fs";import{ECPairFactory as O}from"ecpair";import{Computer as $,Transaction as S}from"@bitcoin-computer/lib";import I from"bitcoind-rpc";import R from"util";import b from"elliptic";import x from"hash.js";import N,{dirname as B}from"path";import{fileURLToPath as M}from"url";g.config();const C=process.env.BCN_CHAIN;const H=process.env.BCN_NETWORK;const{BCN_PORT:k}=process.env;const{BCN_ZMQ_URL:A}=process.env;const{BCN_ALLOWED_RPC_METHODS:L}=process.env;const{BCN_DEBUG_MODE:P}=process.env;const{BCN_LOG_MAX_FILES:j}=process.env;const{BCN_LOG_MAX_SIZE:_}=process.env;const{BCN_LOG_ZIP:U}=process.env;const{BCN_SHOW_CONSOLE_LOGS:D}=process.env;const{BCN_SHOW_DB_LOGS:F}=process.env;const{BCN_RATE_LIMIT_ENABLED:W}=process.env;const{BCN_RATE_LIMIT_WINDOW:Y}=process.env;const{BCN_RATE_LIMIT_MAX:G}=process.env;const{BCN_RATE_LIMIT_STANDARD_HEADERS:K}=process.env;const{BCN_RATE_LIMIT_LEGACY_HEADERS:q}=process.env;process.env,process.env,process.env;const{BCN_OFFCHAIN_PROTOCOL:J}=process.env;const V=process.env.BCN_QUERY_LIMIT||"1000";const z=process.env.BCN_URL||`http://127.0.0.1:${k}`;const Z=process.env.BCN_ENV||"dev";const Q=process.env.BCN_ZMQ_ACTIVATION_HEIGHT||"100000";const{BITCOIN_RPC_USER:X}=process.env;const{BITCOIN_RPC_PASSWORD:tt}=process.env;const{BITCOIN_RPC_HOST:et}=process.env;const{BITCOIN_RPC_PORT:st}=process.env;const{BITCOIN_RPC_PROTOCOL:at}=process.env;const{BITCOIN_DEFAULT_WALLET:rt}=process.env;const{POSTGRES_USER:nt}=process.env;const{POSTGRES_PASSWORD:ot}=process.env;const{POSTGRES_DB:it}=process.env;const{POSTGRES_HOST:ct}=process.env;const{POSTGRES_PORT:ut}=process.env;const{POSTGRES_MAX_CONNECTIONS:lt}=process.env;const{POSTGRES_IDLE_TIMEOUT_MILLIS:pt}=process.env;y.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const dt=y.format.combine(y.format.colorize(),y.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),y.format.json(),y.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const mt={zippedArchive:"true"===U,maxSize:_,maxFiles:j,dirname:"logs"};const ht=[];"true"===D&&ht.push(new y.transports.Console({format:y.format.combine(y.format.colorize(),y.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),y.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const gt=parseInt(P,10);gt>=0&&ht.push(new w({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...mt})),gt>=1&&ht.push(new w({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...mt})),gt>=2&&ht.push(new w({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...mt})),gt>=3&&ht.push(new w({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...mt})),gt>=4&&ht.push(new w({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...mt}));const yt=y.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:dt,transports:ht,exceptionHandlers:[new y.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new y.transports.File({filename:"logs/rejections.log"})]});g.config();const{version:wt}=JSON.parse(T.readFileSync("package.json","utf8"));const ft=wt||process.env.BCN_SERVER_VERSION;const vt=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const Et={error:(t,e)=>{if(e.cn){const{host:s,port:a,database:r,user:n,password:o}=e.cn;yt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${a}, database:${r}, user:${n}, password: ${o}`)}},noWarnings:!0};"true"===F&&(v.isAttached()?v.detach():(v.attach(Et),v.setTheme("matrix")));const Tt=f(Et)({host:ct,port:parseInt(ut,10),database:it,user:nt,password:ot,max:parseInt(lt,10),allowExitOnIdle:!0,idleTimeoutMillis:parseInt(pt,10)});const{PreparedStatement:Ot}=f;class $t{static async select(t){const e=new Ot({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return Tt.oneOrNone(e)}static async insert({id:t,data:e}){const s=new Ot({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return Tt.none(s)}static async delete(t){const e=new Ot({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await Tt.any(e))[0].count>0}}class St{static async select(t){const e=await $t.select(t);return e?.data||null}static async insert(t){return $t.insert(t)}static async delete(t){return $t.delete(t)}}const It=s.Router();It.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await St.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),It.post("/",(async(t,e)=>{const{body:{data:s},url:a}=t;try{const a=i.sha256(Buffer.from(s)).toString("hex");await St.insert({id:a,data:s});const r=`${J||t.protocol}://${t.get("host")}/store/${a}`;e.status(201).json({_url:r})}catch(t){yt.error(`POST ${a} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),It.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:Rt}=f;class bt{static async getBalance(t){const e=new Rt({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is not null',values:[t]});const s=await Tt.oneOrNone(e);const a=new Rt({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is null',values:[t]});const r=await Tt.oneOrNone(a);return{confirmed:parseInt(s.satoshis,10)||0,unconfirmed:parseInt(r.satoshis,10)||0,balance:(parseInt(s.satoshis,10)||0)+(parseInt(r.satoshis,10)||0)}}static async select(t){const e=new Rt({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await Tt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByScriptASM(t){const e=new Rt({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "asm" = $1',values:[t]});return(await Tt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new Rt({name:`Utxos.selectByPk.${Math.random()}`,text:`SELECT "address", "satoshis", "asm", "rev", split_part(rev, ':', 1) AS "txId", cast(split_part(rev, ':', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "asm" LIKE '%${t}%'`});return(await Tt.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}}class xt{static async getBalance(t){return bt.getBalance(t)}static async select(t){return bt.select(t)}static async selectByPk(t){return bt.selectByPk(t)}static async selectByScriptASM(t){return bt.selectByScriptASM(t)}}class Nt{static getBalance=async t=>xt.getBalance(t);static selectByAddress=async t=>xt.select(t);static selectByPk=async t=>xt.selectByPk(t);static selectByScriptASM=async t=>xt.selectByScriptASM(t)}const Bt={protocol:at,user:X,pass:tt,host:et,port:parseInt(st,10)};const Mt=new I(Bt);const Ct=R.promisify(I.prototype.createwallet.bind(Mt));const Ht=R.promisify(I.prototype.generateToAddress.bind(Mt));const kt=R.promisify(I.prototype.getaddressinfo.bind(Mt));const At=R.promisify(I.prototype.getBlock.bind(Mt));const Lt=R.promisify(I.prototype.getBlockchainInfo.bind(Mt));const Pt=R.promisify(I.prototype.getBlockHash.bind(Mt));const jt=R.promisify(I.prototype.getRawTransaction.bind(Mt));const _t=R.promisify(I.prototype.getRawTransaction.bind(Mt));const Ut=R.promisify(I.prototype.getTransaction.bind(Mt));const Dt=R.promisify(I.prototype.getNewAddress.bind(Mt));const Ft={createwallet:Ct,generateToAddress:Ht,getaddressinfo:kt,getBlock:At,getBlockchainInfo:Lt,getBlockHash:Pt,getRawTransaction:jt,getTransaction:Ut,importaddress:R.promisify(I.prototype.importaddress.bind(Mt)),invalidateBlock:R.promisify(I.prototype.invalidateBlock.bind(Mt)),listunspent:R.promisify(I.prototype.listunspent.bind(Mt)),sendRawTransaction:R.promisify(I.prototype.sendRawTransaction.bind(Mt)),getNewAddress:Dt,sendToAddress:R.promisify(I.prototype.sendToAddress.bind(Mt)),getRawTransactionJSON:_t};const Wt=t=>new Promise((e=>{setTimeout(e,t)}));const Yt=(t,e)=>{const s=[];for(let a=0;a<t.length;a+=e){const r=Math.min(a+e,t.length);const n=t.slice(a,r);s.push(n)}return s};const Gt=t=>{const e=[];for(let s=1;s<=t;s+=3){const t=`($${s},$${s+1},$${s+2})`;e.push(t)}return e.join(",")};const Kt=t=>{const e=[];for(let s=1;s<=t;s+=9){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8})`;e.push(t)}return e.join(",")};const qt=t=>{try{return t()}catch{return null}};class Jt{static async getTransaction(t){const{result:e}=await Ft.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Ft.getRawTransaction(t,0))))).map((t=>t.result))}static async getRawTransaction(t,e){const{result:s}=await Ft.getRawTransaction(t,e);return s}static async getRawTransactionsJSON(t){return{txId:(e=(await Ft.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Ft.sendRawTransaction(t);if(s)throw yt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await Ft.getaddressinfo(t)).result.timestamp&&(yt.info(`Importing address: ${t}`),await Ft.importaddress(t,!1)),(await Ft.listunspent(0,999999,[t])).result);static getBlockHash=async(t,e)=>{const s={hash:null,error:!1};try{const{result:e}=await Ft.getBlockHash(t);s.hash=e}catch(a){yt.info(`[wid ${e} pid: ${process.pid}]: waiting for RPC to get blockHash of height ${t} ...`),s.error=!0,await Wt(5e3)}return s};static getBlock=async(t,e,s,a)=>{const r={block:null,error:!1};try{const{result:e}=await Ft.getBlock(t,s);r.block=e}catch(t){yt.info(`[wid ${a} pid: ${process.pid}]: waiting for RPC to get block ${e} ...`),r.error=!0,await Wt(5e3)}return r};static walletSetup=async()=>{if("regtest"===H){if(yt.info(`Node is starting for chain ${C} and network ${H}, \n\n. Starting Wallet setup.`),"LTC"===C){const{result:t}=await Ft.getBlockchainInfo();const e=t.blocks;if(e<vt){const{result:t}=await Ft.getNewAddress("","legacy");const s=vt-e-1;s&&await Ft.generateToAddress(s,t);const{result:a}=await Ft.getNewAddress("mweb","mweb");await Ft.sendToAddress(a,1),await Ft.generateToAddress(1,t),yt.info("MWEB setup is complete")}}if("BTC"===C){const{result:t}=await Ft.getNewAddress("","legacy");await Ft.generateToAddress(200,t),yt.info("Wallet setup is complete")}if("PEPE"===C){const{result:t}=await Ft.getNewAddress("");await Ft.generateToAddress(200,t),yt.info("Wallet setup is complete")}}};static createWallet=async()=>{try{await Ft.createwallet(rt,!1,!1,"",!1,!1)}catch(t){if(t.message.includes("already exists"))return void yt.info(`Wallet ${rt} already exists`);yt.error(`Wallet creation failed with error '${t.message}'`)}};static checkBlockchainProgress=async t=>{const e=await E((async()=>{const e=await Ft.getBlockchainInfo();const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const{blocks:a}=e.result;if(yt.info(`Zmq. Bitcoind { percentage:${s}%, blocks:${a} }`),parseFloat(e.result.verificationprogress)<=t)throw new Error("Node not ready yet");return e}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const a=e.result.blocks;yt.info(`BCN reaches sync end...at { bitcoind.progress:${s}%, bitcoindSyncedHeight:${a} }`)}}class Vt{static get=async t=>Jt.getTransaction(t);static getRaw=async t=>Jt.getBulkTransactions(t);static getRawJSON=async t=>Jt.getRawTransactionsJSON(t);static sendRaw=async t=>Jt.sendRawTransaction(t);static getUtxos=async t=>Jt.getUtxos(t);static parseTransactions=async(t,e,s,a)=>{let r=t;"LTC"===e&&(r=t.filter((t=>"08"!==t.hex.slice(10,12))));const n=[];for(const t of r)try{let{hex:e}=t;e||(e=(await Jt.getRawTransaction(t.txid,1)).hex);const s=$.txFromHex({hex:e});s&&n.push(s)}catch(e){yt.error(`[wid ${s} pid: ${process.pid}: failed to parse transaction in block ${a}\n          error message: ${e.message}\n          transaction: ${JSON.stringify(t)}`)}return n};static walletSetup=async()=>Jt.walletSetup()}const zt={protocol:at,user:X,pass:tt,host:et,port:parseInt(st,10)};const Zt=new I(zt);const Qt={};const Xt=JSON.parse(JSON.stringify(I.callspec));Object.keys(Xt).forEach((t=>{Xt[t.toLowerCase()]=Xt[t]}));const te={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(I.prototype).forEach((t=>{if(t&&"function"==typeof I.prototype[t]){const e=t.toLowerCase();Qt[t]=R.promisify(I.prototype[t].bind(Zt)),Qt[e]=R.promisify(I.prototype[e].bind(Zt))}}))}catch(t){yt.error(`Error occurred while binding RPC methods: ${t.message}`)}function ee(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function se(t){if(!ee(t))throw new Error("Invalid rev")}const{PreparedStatement:ae}=f;class re{static async listSentOutputs(t){const e=new ae({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await Tt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new ae({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await Tt.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new ae({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await Tt.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new ae({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", "hash", "mod", "isTbcOutput", "previous", "blockHash" FROM "Output" WHERE "address" = $1',values:[t]});return Tt.any(e)}static async insert(t){await Promise.all(Yt(t,1111).map((t=>{const e=t.flatMap((({rev:t,address:e,satoshis:s,asm:a,isTbcOutput:r,mod:n,previous:o,hash:i,blockHash:c})=>[t,e,s,a,r,n,o,i,c]));return Tt.none(new ae({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "asm", "isTbcOutput",\n              "mod", "previous", "hash", "blockHash") VALUES ${Kt(e.length)} ON CONFLICT DO NOTHING`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(Yt(t,1e4).map((t=>{const e=t.join("','");return Tt.none(new ae({name:`Output.eraseBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async updateBlockHash(t,e){await Promise.all(Yt(t,1e4).map((t=>{const s=t.join("','");return Tt.none(new ae({name:`Output.updateBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = $1 WHERE "rev" IN ('${s}')`,values:[e]}))})))}static async getIdByRev(t){const e=new ae({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await Tt.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new ae({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await Tt.any(e);const a=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let r=t;for(;a[r];)r=a[r];return r}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new ae({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await Tt.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let a="";return s&&(a+=` order by "timestamp" ${s}`),a+=` limit ${t||V}`,e&&(a+=` offset ${e}`),a}static async getUnspentRevsByMod(t,e,s,a){const r=await this.getIdsByMod(t);const n=await this.getLatestRevs(r);const o=new ae({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,a)}`,values:[n]});return(await Tt.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,a){const r=new ae({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE asm LIKE '%${t}%' AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,a)}`});return(await Tt.any(r)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,a,r){const n=await this.getUnspentRevsByPublicKey(e,s,a,r);const o=await this.getIdsByRevs(n);const i=new ae({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await Tt.any(i)).map((t=>t.rev));const u=await this.getLatestRevs(c);const l=new ae({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,a,r)}`,values:[u]});return(await Tt.any(l)).map((t=>t.rev))}static async getUnspentTbcOutputs(t,e,s){const a=new ae({name:`Output.getUnspentTbcOutputs.${Math.random()}`,text:`SELECT "rev", "address", "satoshis", "asm", "timestamp"\n        FROM "Output" WHERE "isTbcOutput" = true AND NOT EXISTS\n        (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") ${this.sqlSuffix(t,e,s)}`});return(await Tt.any(a)).map((t=>t.rev))}static async query(t){const{publicKey:e,limit:s,offset:a,ids:r,mod:n,order:o}=t;const i=parseInt(V||"",10);if(s&&parseInt(s||"",10)>i||r&&r.length>i)throw new Error(`Can't fetch more than ${V} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return r?(r.map(se),this.getLatestRevs(r)):n&&!e?this.getUnspentRevsByMod(n,s,a,o):!n&&e?this.getUnspentRevsByPublicKey(e,s,a,o):n&&e?this.getUnspentRevsByModAndPublicKey(n,e,s,a,o):this.getUnspentTbcOutputs(s,a,o)}static async selectNext(t){const e=new ae({name:`Output.selectNext.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "previous" = $1',values:[t]});return Tt.any(e)}static async selectPrev(t){const e=new ae({name:`Output.selectPrev.${Math.random()}`,text:'SELECT "previous" FROM "Output" WHERE "rev" = $1',values:[t]});return Tt.any(e)}}class ne{static async select(t){return re.select(t)}static async insert(t){return re.insert(t)}static async eraseBlockHash(t){return re.eraseBlockHash(t)}static async updateBlockHash(t,e){return re.updateBlockHash(t,e)}static async listSentOutputs(t){return re.listSentOutputs(t)}static async listReceivedOutputs(t){return re.listReceivedOutputs(t)}static async listTxs(t){return re.listTxs(t)}static async getLatestRev(t){return re.getLatestRev(t)}static async getLatestRevs(t){return re.getLatestRevs(t)}static async getIdByRev(t){return re.getIdByRev(t)}static async query(t){return re.query(t)}static async selectNext(t){return re.selectNext(t)}static async selectPrev(t){return re.selectPrev(t)}}const oe=function(t=C,e=H){switch(t){case"BTC":switch(e){case"mainnet":return c.bitcoin;case"testnet":return c.testnet;case"regtest":return c.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return c.litecoin;case"testnet":return c.litecointestnet;case"regtest":return c.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}case"PEPE":switch(e){case"mainnet":return c.pepecoin;case"testnet":return c.pepecointestnet;case"regtest":return c.pepecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${t}`)}}(C,H);class ie{static insert(t){return ne.insert(t)}static getOutputs=(t,e=null)=>t.flatMap((({outs:t,txId:s,zip:a,onChainMetaData:r})=>{const{exp:n="",mod:o=""}=r;return t.map((({script:t,value:r},c)=>{const u=c<a.length;return{rev:`${s}:${c}`,address:qt((()=>p.fromOutputScript(t,oe))),satoshis:Math.round(r),asm:l.toASM(t),isTbcOutput:u,mod:u?o:"",previous:u?a[c][0]:null,hash:u?i.sha256(Buffer.from(n)).toString("hex"):null,blockHash:e}}))}));static select=async t=>ne.select(t);static eraseBlockHash=async t=>{await ne.eraseBlockHash(t)};static updateBlockHash=async(t,e)=>{await ne.updateBlockHash(t,e)};static listSentOutputs=async t=>ne.listSentOutputs(t);static listReceivedOutputs=async t=>ne.listReceivedOutputs(t);static listTxs=async t=>ne.listTxs(t);static getLatestRev=async t=>ne.getLatestRev(t);static getLatestRevs=async t=>ne.getLatestRevs(t);static getIdByRev=async t=>ne.getIdByRev(t);static query=async t=>ne.query(t)}const ce=t=>new Promise((e=>{setTimeout(e,t)}));const ue=O(o);const le=c.regtest;const{PreparedStatement:pe}=f;class de{static async select(t){const e=new pe({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent", "spendingInput", "blockHash" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return Tt.any(e)}static async insert(t){await Promise.all(Yt(t,3333).map((t=>{const e=t.flatMap((({outputSpent:t,spendingInput:e,blockHash:s})=>[t,e,s]));return Tt.none(new pe({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput", "blockHash") VALUES ${Gt(e.length)} \n              ON CONFLICT ("spendingInput") \n              DO UPDATE SET "blockHash" = COALESCE("Input"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async updateBlockHash(t,e){await Promise.all(Yt(t,1e4).map((t=>{const s=t.join("','");return Tt.none(new pe({name:`Input.updateBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = $1 WHERE "spendingInput" IN ('${s}')`,values:[e]}))})))}static async eraseBlockHash(t){await Promise.all(Yt(t,1e4).map((t=>{const e=t.join("','");return Tt.none(new pe({name:`Input.eraseBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async count(t){const e=t.map((t=>t.outputSpent));const s=new pe({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const a=await Tt.oneOrNone(s);return parseInt(a?.count,10)||0}}class me{static async select(t){return de.select(t)}static async insert(t){return de.insert(t)}static async updateBlockHash(t,e){return de.updateBlockHash(t,e)}static async eraseBlockHash(t){return de.eraseBlockHash(t)}}class he{static insert=async t=>{await me.insert(t)};static getInputs=(t,e=null)=>t.flatMap((({ins:t,txId:e})=>t.map(((t,s)=>({input:t,index:s,txId:e}))))).filter((({input:t})=>!S.isCoinbaseHash(t.hash))).map((({input:t,index:s,txId:a})=>{return{outputSpent:`${r=t.hash,u.reverseBuffer(Buffer.from(r)).toString("hex")}:${t.index}`,spendingInput:`${a}:${s}`,blockHash:e};var r}));static select=async t=>me.select(t);static updateBlockHash=async(t,e)=>{await me.updateBlockHash(t,e)};static eraseBlockHash=async t=>{await me.eraseBlockHash(t)}}class ge{static rawTxSubscriber=async t=>{const e=t.toString("hex");if(yt.info(`ZMQ message { hex:${e} }`),"08"!==e.slice(10,12))try{const t=$.txFromHex({hex:e});await ie.insert(ie.getOutputs([t])),await he.insert(he.getInputs([t]))}catch(t){yt.error(`[zmq] Error parsing transaction ${e}\n${t.stack}`)}};static sub=async t=>{try{yt.info(`Bitcoin Computer Node ${ft} is starting on ${H} ${C}.`),await Jt.createWallet(),"regtest"!==H&&await Jt.checkBlockchainProgress(.7),await Jt.walletSetup(),yt.info(`Bitcoin Computer Node ${ft} is ready. ZQM activation height: ${Q}`),await Jt.checkBlockchainProgress(.9);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){yt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:ye}=f;class we{static async select(t){const e=new ye({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await Tt.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new ye({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await Tt.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new ye({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await Tt.none(s)}}class fe{static async select(t){return we.select(t)}static async insert(t){return we.insert(t)}static async update(t){return we.update(t)}}const{ec:ve}=b;const Ee=new ve("secp256k1");const Te=s();const Oe=new class{configFile;loaded=!1;load=()=>{try{const t="dev"===Z?"bcn.test.config.json":"bcn.config.json";const e=B(M(import.meta.url));this.configFile=T.readFileSync(N.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw yt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(yt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:a}=JSON.parse(this.configFile.toString());if(t&&a)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:r}=e.locals.authToken;if(a&&!a.includes(r)||t&&t.includes(r))return void e.status(403).json({error:`Public key ${r} is not allowed.`});s()}catch(s){yt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let $e;h(o);try{$e=a.createServer(Te)}catch(t){throw yt.error(`Starting server failed with error '${t.message}'`),t}if(yt.info(`Server listening on port ${k}`),Te.use(e()),"true"===W){const t=n({windowMs:parseInt(Y,10),max:parseInt(G,10),standardHeaders:"true"===K,legacyHeaders:"true"===q});Te.use(t)}Te.use(t.json({limit:"100mb"})),Te.use(t.urlencoded({limit:"100mb",extended:!0})),Te.get("/",((t,e)=>e.status(200).send(`\n        <h2>Bitcoin Computer Node</h2>\n        <b>Status</b>: Healthy <br />\n        <b>Version</b>: ${ft} <br />\n        <b>Chain</b>: ${C} <br />\n        <b>Network</b>: ${H}\n    `))),Oe.loaded&&(Te.use((async(t,e,s)=>{try{const a=t.get("Authentication");if(!a){const{method:s,url:a}=t;const r=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${a}`;return yt.error(r),void e.status(401).json({error:r})}const r=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(a);const{signature:n,publicKey:o,timestamp:i}=r;if(Date.now()-i>18e4)return void e.status(401).json({error:"Signature is too old."});const c=x.sha256().update(z+i).digest("hex");if(!Ee.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await fe.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await fe.update({publicKey:o,clientTimestamp:i})}else await fe.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=r,s()}catch(t){yt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),Te.use(Oe.middleware));const Se=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Nt.selectByAddress(e))}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/sent-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ie.listSentOutputs(e))}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/received-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ie.listReceivedOutputs(e))}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/list-txs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ie.listTxs(e))}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const a={mod:s.get("mod"),publicKey:s.get("publicKey"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const r=await ie.query(a);e.status(200).json(r)}catch(s){yt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(500).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await Nt.getBalance(e))}catch(t){yt.error(`GET ${e} failed with error '${t.message||t}'`),s.status(500).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input txIds."});const e=await Vt.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){yt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input hex."});const e=await Vt.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(a){yt.error(`POST ${e} failed with error '${a.message}\ntxHex: ${t}`),s.status(500).json({error:a.message})}})),t.get("/mine",(async({query:{count:t},url:e},s)=>{try{const{result:e}=await Qt.getnewaddress();if("string"!=typeof t)throw new Error("Please provide appropriate count");return await Qt.generatetoaddress(parseInt(t,10)||1,e),s.status(200).json({success:!0})}catch(t){return yt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/:id/height",(async({params:{id:t},url:e},s)=>{try{let e=t;if("best"===t){const{result:t}=await Qt.getbestblockhash();e=t}const{result:a}=await Qt.getblockheader(e,!0);return s.status(200).json({height:a.height})}catch(t){return yt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/faucet",(async({body:{address:t,value:e},url:s},a)=>{try{const s=parseInt(e,10)/1e8;const{result:r}=await Qt.sendtoaddress(t,s);await Qt.generateToAddress(1,"mvFeNF9DAR7WMuCpBPbKuTtheihLyxzj8i");const{result:n}=await Qt.getrawtransaction(r,1);const o=n.vout.findIndex((t=>1e8*t.value===parseInt(e,10)));return a.status(200).json({txId:r,vout:o,height:-1,satoshis:e})}catch(t){return yt.error(`POST ${s} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),t.post("/faucetScript",(async({body:{script:t,value:e},url:s},a)=>{try{const s=ue.makeRandom({network:le});const r=d.p2pkh({pubkey:s.publicKey,network:le});const{address:n}=r;const o=(await Qt.sendtoaddress(n,2*parseInt(e,10)/1e8,"","")).result;let i;let c=10;for(;!i;)if(i=(await Nt.selectByAddress(n)).filter((t=>t.txId===o))[0],!i){if(c-=1,c<=0)throw new Error("No outputs");await ce(10)}const u=(await Qt.getrawtransaction(i.txId,1)).result;const p=new m({network:le});p.addInput({hash:i.txId,index:i.vout,nonWitnessUtxo:Buffer.from(u.hex,"hex")}),p.addOutput({script:Buffer.from(t,"hex"),value:parseInt(e,10)}),p.signInput(0,s),p.finalizeAllInputs();const h=p.extractTransaction();let g;for(await Qt.sendrawtransaction(h.toHex()),c=5;!g;){const e=l.toASM(Buffer.from(t,"hex"));if(g=(await Nt.selectByScriptASM(e)).filter((t=>t.txId===h.getId()))[0],!g){if(c-=1,c<=0)throw new Error("No outputs");await ce(10)}}return a.status(200).json({txId:h.getId(),vout:g.vout,height:-1,satoshis:g.satoshis})}catch(t){return yt.error(`POST ${s} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input txId."});const e=await Vt.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input object ids."});const e=await ie.getLatestRevs(t);s.status(200).json(e)}catch(t){yt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revToId",(async({body:{rev:t},url:e},s)=>{try{if(!ee(t))return void s.status(400).json({error:"Invalid rev id"});const e=await ie.getIdByRev(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){yt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!new RegExp(L).test(t.method))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Xt[t]||null===Xt[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const a=Xt[t].trim().split(" ");if(0===e.trim().length&&0!==Xt[t].trim().length)throw new Error(`Too few params provided. Expected ${a.length} Provided 0`);if(0!==e.trim().length&&0===Xt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<a.length)throw new Error(`Too few params provided. Expected ${a.length} Provided ${s.length}`);if(s.length>a.length)throw new Error(`Too many params provided. Expected ${a.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>te[a[e]](t)))}(t.method,t.params);const a=e.length?await Qt[t.method](...e):await Qt[t.method]();s.status(200).json({result:a})}catch(t){yt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/next/:rev",(async({params:{rev:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing rev."});const e=await ne.selectNext(t);e?s.status(200).json({rev:e&&e.length?e[0].rev:void 0}):s.status(404).json({error:"Not found"})}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/prev/:rev",(async({params:{rev:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing rev."});const e=await ne.selectPrev(t);e?s.status(200).json({rev:e&&e.length?e[0].previous:void 0}):s.status(404).json({error:"Not found"})}catch(t){yt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})();Te.use(`/v1/${C}/${H}`,Se),Te.use("/v1/store",It),$e.listen(k,(()=>{yt.info(`\nStarted Bitcoin Computer Node Version ${ft}\nPORT ${k} \n`)})).on("error",(t=>{yt.error(t.message),process.exit(1)}));const Ie=new r.Subscriber;Ie.connect(A),Ie.subscribe("rawtx"),yt.info(`ZMQ Subscriber connected to ${A}`),(async()=>{await(async()=>{await E((()=>Tt.connect()),{startingDelay:500})})(),await ge.sub(Ie)})();
