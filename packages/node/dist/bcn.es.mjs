import t from"body-parser";import e from"cors";import s from"express";import a from"http";import*as r from"zeromq";import n from"express-rate-limit";import*as o from"@bitcoin-computer/secp256k1";import{crypto as i,networks as c,bufferUtils as u,address as l,payments as p,Psbt as d,initEccLib as m}from"@bitcoin-computer/nakamotojs";import h from"dotenv";import y from"winston";import g from"winston-daily-rotate-file";import w from"pg-promise";import E from"pg-monitor";import{backOff as f}from"exponential-backoff";import v from"fs";import{ECPairFactory as T}from"ecpair";import{Computer as O,Transaction as $}from"@bitcoin-computer/lib";import S from"bitcoind-rpc";import R from"util";import I from"elliptic";import b from"hash.js";import x,{dirname as N}from"path";import{fileURLToPath as B}from"url";h.config();const C=process.env.BCN_CHAIN;const M=process.env.BCN_NETWORK;const{BCN_PORT:H}=process.env;const{BCN_ZMQ_URL:P}=process.env;const{BCN_ALLOWED_RPC_METHODS:k}=process.env;const{BCN_DEBUG_MODE:A}=process.env;const{BCN_LOG_MAX_FILES:L}=process.env;const{BCN_LOG_MAX_SIZE:_}=process.env;const{BCN_LOG_ZIP:j}=process.env;const{BCN_SHOW_CONSOLE_LOGS:U}=process.env;const{BCN_SHOW_DB_LOGS:D}=process.env;const{BCN_RATE_LIMIT_ENABLED:F}=process.env;const{BCN_RATE_LIMIT_WINDOW:W}=process.env;const{BCN_RATE_LIMIT_MAX:K}=process.env;const{BCN_RATE_LIMIT_STANDARD_HEADERS:Y}=process.env;const{BCN_RATE_LIMIT_LEGACY_HEADERS:G}=process.env;process.env,process.env,process.env;const{BCN_OFFCHAIN_PROTOCOL:q}=process.env;const J=process.env.BCN_QUERY_LIMIT||"1000";const V=process.env.BCN_URL||`http://127.0.0.1:${H}`;const z=process.env.BCN_ENV||"dev";const Z=process.env.BCN_ZMQ_ACTIVATION_HEIGHT||"100000";const{BITCOIN_RPC_USER:Q}=process.env;const{BITCOIN_RPC_PASSWORD:X}=process.env;const{BITCOIN_RPC_HOST:tt}=process.env;const{BITCOIN_RPC_PORT:et}=process.env;const{BITCOIN_RPC_PROTOCOL:st}=process.env;const{BITCOIN_DEFAULT_WALLET:at}=process.env;const{POSTGRES_USER:rt}=process.env;const{POSTGRES_PASSWORD:nt}=process.env;const{POSTGRES_DB:ot}=process.env;const{POSTGRES_HOST:it}=process.env;const{POSTGRES_PORT:ct}=process.env;y.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const ut=y.format.combine(y.format.colorize(),y.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),y.format.json(),y.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const lt={zippedArchive:"true"===j,maxSize:_,maxFiles:L,dirname:"logs"};const pt=[];"true"===U&&pt.push(new y.transports.Console({format:y.format.combine(y.format.colorize(),y.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),y.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const dt=parseInt(A,10);dt>=0&&pt.push(new g({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...lt})),dt>=1&&pt.push(new g({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...lt})),dt>=2&&pt.push(new g({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...lt})),dt>=3&&pt.push(new g({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...lt})),dt>=4&&pt.push(new g({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...lt}));const mt=y.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:ut,transports:pt,exceptionHandlers:[new y.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new y.transports.File({filename:"logs/rejections.log"})]});h.config();const{version:ht}=JSON.parse(v.readFileSync("package.json","utf8"));const yt=ht||process.env.BCN_SERVER_VERSION;const gt=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const wt={error:(t,e)=>{if(e.cn){const{host:s,port:a,database:r,user:n,password:o}=e.cn;mt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${a}, database:${r}, user:${n}, password: ${o}`)}},noWarnings:!0};"true"===D&&(E.isAttached()?E.detach():(E.attach(wt),E.setTheme("matrix")));const Et=w(wt)({host:it,port:parseInt(ct,10),database:ot,user:rt,password:nt,max:20,allowExitOnIdle:!0,idleTimeoutMillis:3e3});const{PreparedStatement:ft}=w;class vt{static async select(t){const e=new ft({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return Et.oneOrNone(e)}static async insert({id:t,data:e}){const s=new ft({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return Et.none(s)}static async delete(t){const e=new ft({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await Et.any(e))[0].count>0}}class Tt{static async select(t){const e=await vt.select(t);return e?.data||null}static async insert(t){return vt.insert(t)}static async delete(t){return vt.delete(t)}}const Ot=s.Router();Ot.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await Tt.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),Ot.post("/",(async(t,e)=>{const{body:{data:s},url:a}=t;try{const a=i.sha256(Buffer.from(s)).toString("hex");await Tt.insert({id:a,data:s});const r=`${q||t.protocol}://${t.get("host")}/store/${a}`;e.status(201).json({_url:r})}catch(t){mt.error(`POST ${a} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),Ot.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:$t}=w;class St{static async getBalance(t){const e=new $t({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is not null',values:[t]});const s=await Et.oneOrNone(e);const a=new $t({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is null',values:[t]});const r=await Et.oneOrNone(a);return{confirmed:parseInt(s.satoshis,10)||0,unconfirmed:parseInt(r.satoshis,10)||0,balance:(parseInt(s.satoshis,10)||0)+(parseInt(r.satoshis,10)||0)}}static async select(t){const e=new $t({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByScriptHex(t){const e=new $t({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "scriptPubKey" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new $t({name:`Utxos.selectByPk.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout", "publicKeys" FROM "Utxos" WHERE $1 = ANY ("publicKeys")',values:[t]});return(await Et.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}}class Rt{static async getBalance(t){return St.getBalance(t)}static async select(t){return St.select(t)}static async selectByScriptHex(t){return St.selectByScriptHex(t)}static async selectByPk(t){return St.selectByPk(t)}}class It{static getBalance=async t=>Rt.getBalance(t);static selectByAddress=async t=>Rt.select(t);static selectByScriptHex=async t=>Rt.selectByScriptHex(t);static selectByPk=async t=>Rt.selectByPk(t)}const bt={protocol:st,user:Q,pass:X,host:tt,port:parseInt(et,10)};const xt=new S(bt);const Nt=R.promisify(S.prototype.createwallet.bind(xt));const Bt=R.promisify(S.prototype.generateToAddress.bind(xt));const Ct=R.promisify(S.prototype.getaddressinfo.bind(xt));const Mt=R.promisify(S.prototype.getBlock.bind(xt));const Ht=R.promisify(S.prototype.getBlockchainInfo.bind(xt));const Pt=R.promisify(S.prototype.getBlockHash.bind(xt));const kt=R.promisify(S.prototype.getRawTransaction.bind(xt));const At=R.promisify(S.prototype.getRawTransaction.bind(xt));const Lt=R.promisify(S.prototype.getTransaction.bind(xt));const _t=R.promisify(S.prototype.getNewAddress.bind(xt));const jt={createwallet:Nt,generateToAddress:Bt,getaddressinfo:Ct,getBlock:Mt,getBlockchainInfo:Ht,getBlockHash:Pt,getRawTransaction:kt,getTransaction:Lt,importaddress:R.promisify(S.prototype.importaddress.bind(xt)),invalidateBlock:R.promisify(S.prototype.invalidateBlock.bind(xt)),listunspent:R.promisify(S.prototype.listunspent.bind(xt)),sendRawTransaction:R.promisify(S.prototype.sendRawTransaction.bind(xt)),getNewAddress:_t,sendToAddress:R.promisify(S.prototype.sendToAddress.bind(xt)),getRawTransactionJSON:At};const Ut=(t,e)=>{const s=[];for(let a=0;a<t.length;a+=e){const r=Math.min(a+e,t.length);const n=t.slice(a,r);s.push(n)}return s};const Dt=t=>{const e=[];for(let s=1;s<=t;s+=3){const t=`($${s},$${s+1},$${s+2})`;e.push(t)}return e.join(",")};const Ft=t=>{const e=[];for(let s=1;s<=t;s+=10){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8},$${s+9})`;e.push(t)}return e.join(",")};const Wt=t=>{try{return t()}catch{return null}};class Kt{static async getTransaction(t){const{result:e}=await jt.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>jt.getRawTransaction(t,0))))).map((t=>t.result))}static async getRawTransaction(t,e){const{result:s}=await jt.getRawTransaction(t,e);return s}static async getRawTransactionsJSON(t){return{txId:(e=(await jt.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await jt.sendRawTransaction(t);if(s)throw mt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await jt.getaddressinfo(t)).result.timestamp&&(mt.info(`Importing address: ${t}`),await jt.importaddress(t,!1)),(await jt.listunspent(0,999999,[t])).result);static getBlockHash=async(t,e)=>{const s={hash:null,error:!1};try{const{result:e}=await jt.getBlockHash(t);s.hash=e}catch(a){mt.info(`[wid ${e} pid: ${process.pid}]: waiting for RPC to get block ${t} ...`),s.error=!0,await new Promise((t=>{setTimeout(t,5e3)}))}return s};static getBlock=async(t,e)=>jt.getBlock(t,e);static walletSetup=async()=>{if("regtest"===M){if(mt.info(`Node is starting for chain ${C} and network ${M}, \n\n. Starting Wallet setup.`),"LTC"===C){const{result:t}=await jt.getBlockchainInfo();const e=t.blocks;if(e<gt){const{result:t}=await jt.getNewAddress("","legacy");const s=gt-e-1;s&&await jt.generateToAddress(s,t);const{result:a}=await jt.getNewAddress("mweb","mweb");await jt.sendToAddress(a,1),await jt.generateToAddress(1,t),mt.info("MWEB setup is complete")}}if("BTC"===C){const{result:t}=await jt.getNewAddress("","legacy");await jt.generateToAddress(200,t),mt.info("Wallet setup is complete")}if("PEPE"===C){const{result:t}=await jt.getNewAddress("");await jt.generateToAddress(200,t),mt.info("Wallet setup is complete")}}};static createWallet=async()=>{try{await jt.createwallet(at,!1,!1,"",!1,!1)}catch(t){if(t.message.includes("already exists"))return void mt.info(`Wallet ${at} already exists`);mt.error(`Wallet creation failed with error '${t.message}'`)}};static checkBlockchainProgress=async t=>{const e=await f((async()=>{const e=await jt.getBlockchainInfo();const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const{blocks:a}=e.result;if(mt.info(`Zmq. Bitcoind { percentage:${s}%, blocks:${a} }`),parseFloat(e.result.verificationprogress)<=t)throw new Error("Node not ready yet");return e}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const a=e.result.blocks;mt.info(`BCN reaches sync end...at { bitcoind.progress:${s}%, bitcoindSyncedHeight:${a} }`)}}class Yt{static get=async t=>Kt.getTransaction(t);static getRaw=async t=>Kt.getBulkTransactions(t);static getRawJSON=async t=>Kt.getRawTransactionsJSON(t);static sendRaw=async t=>Kt.sendRawTransaction(t);static getUtxos=async t=>Kt.getUtxos(t);static parseTransactions=async(t,e,s,a)=>{let r=t;"LTC"===e&&(r=t.filter((t=>"08"!==t.hex.slice(10,12))));const n=[];for(const t of r)try{let{hex:e}=t;e||(e=(await Kt.getRawTransaction(t.txid,1)).hex);const s=O.txFromHex({hex:e});s&&n.push(s)}catch(e){mt.error(`[wid ${s} pid: ${process.pid}: failed to parse transaction in block ${a}\n          error message: ${e.message}\n          transaction: ${JSON.stringify(t)}`)}return n};static walletSetup=async()=>Kt.walletSetup()}const Gt={protocol:st,user:Q,pass:X,host:tt,port:parseInt(et,10)};const qt=new S(Gt);const Jt={};const Vt=JSON.parse(JSON.stringify(S.callspec));Object.keys(Vt).forEach((t=>{Vt[t.toLowerCase()]=Vt[t]}));const zt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(S.prototype).forEach((t=>{if(t&&"function"==typeof S.prototype[t]){const e=t.toLowerCase();Jt[t]=R.promisify(S.prototype[t].bind(qt)),Jt[e]=R.promisify(S.prototype[e].bind(qt))}}))}catch(t){mt.error(`Error occurred while binding RPC methods: ${t.message}`)}function Zt(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function Qt(t){if(!Zt(t))throw new Error("Invalid rev")}const{PreparedStatement:Xt}=w;class te{static async listSentOutputs(t){const e=new Xt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new Xt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new Xt({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await Et.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new Xt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", "publicKeys", "hash", "mod", "isTbcOutput", "previous", "blockHash" FROM "Output" WHERE "address" = $1',values:[t]});return Et.any(e)}static async insert(t){await Promise.all(Ut(t,1e3).map((t=>{const e=t.flatMap((({rev:t,address:e,satoshis:s,scriptPubKey:a,isTbcOutput:r,publicKeys:n,mod:o,previous:i,hash:c,blockHash:u})=>[t,e,s,a,r,n,o,i,c,u]));return Et.none(new Xt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "isTbcOutput",\n              "publicKeys", "mod", "previous", "hash", "blockHash") VALUES ${Ft(e.length)} \n              ON CONFLICT  ("rev") \n              DO UPDATE SET "blockHash" = COALESCE("Output"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(Ut(t,1e4).map((t=>{const e=t.join("','");return Et.none(new Xt({name:`Output.eraseBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async updateBlockHash(t,e){await Promise.all(Ut(t,1e4).map((t=>{const s=t.join("','");return Et.none(new Xt({name:`Output.updateBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = $1 WHERE "rev" IN ('${s}')`,values:[e]}))})))}static async getIdByRev(t){const e=new Xt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await Et.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new Xt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await Et.any(e);const a=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let r=t;for(;a[r];)r=a[r];return r}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new Xt({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await Et.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let a="";return s&&(a+=` order by "timestamp" ${s}`),a+=` limit ${t||J}`,e&&(a+=` offset ${e}`),a}static async getRevsByPublicKey(t){const e=new Xt({name:`Output.getRevsByPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys")',values:[t]});return(await Et.any(e)).map((t=>t.rev))}static async getUnspentRevsByMod(t,e,s,a){const r=await this.getIdsByMod(t);const n=await this.getLatestRevs(r);const o=new Xt({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,a)}`,values:[n]});return(await Et.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,a){const r=new Xt({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys") AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,a)}`,values:[t]});return(await Et.any(r)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,a,r){const n=await this.getUnspentRevsByPublicKey(e,s,a,r);const o=await this.getIdsByRevs(n);const i=new Xt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await Et.any(i)).map((t=>t.rev));const u=await this.getLatestRevs(c);const l=new Xt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,a,r)}`,values:[u]});return(await Et.any(l)).map((t=>t.rev))}static async getUnspentTbcOutputs(t,e,s){const a=new Xt({name:`Output.getUnspentTbcOutputs.${Math.random()}`,text:`SELECT "rev", "address", "satoshis", "scriptPubKey", "publicKeys", "timestamp"\n        FROM "Output" WHERE "isTbcOutput" = true AND NOT EXISTS\n        (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") ${this.sqlSuffix(t,e,s)}`});return(await Et.any(a)).map((t=>t.rev))}static async query(t){const{publicKey:e,limit:s,offset:a,ids:r,mod:n,order:o}=t;const i=parseInt(J||"",10);if(s&&parseInt(s||"",10)>i||r&&r.length>i)throw new Error(`Can't fetch more than ${J} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return r?(r.map(Qt),this.getLatestRevs(r)):n&&!e?this.getUnspentRevsByMod(n,s,a,o):!n&&e?this.getUnspentRevsByPublicKey(e,s,a,o):n&&e?this.getUnspentRevsByModAndPublicKey(n,e,s,a,o):this.getUnspentTbcOutputs(s,a,o)}}class ee{static async select(t){return te.select(t)}static async insert(t){return te.insert(t)}static async eraseBlockHash(t){return te.eraseBlockHash(t)}static async updateBlockHash(t,e){return te.updateBlockHash(t,e)}static async listSentOutputs(t){return te.listSentOutputs(t)}static async listReceivedOutputs(t){return te.listReceivedOutputs(t)}static async listTxs(t){return te.listTxs(t)}static async getLatestRev(t){return te.getLatestRev(t)}static async getLatestRevs(t){return te.getLatestRevs(t)}static async getIdByRev(t){return te.getIdByRev(t)}static async query(t){return te.query(t)}}const se=function(t=C,e=M){switch(t){case"BTC":switch(e){case"mainnet":return c.bitcoin;case"testnet":return c.testnet;case"regtest":return c.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return c.litecoin;case"testnet":return c.litecointestnet;case"regtest":return c.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}case"PEPE":switch(e){case"mainnet":return c.pepecoin;case"testnet":return c.pepecointestnet;case"regtest":return c.pepecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${t}`)}}(C,M);class ae{static insert(t){return ee.insert(t)}static getOutputs=(t,e=null)=>t.flatMap((({outs:t,txId:s,zip:a,ownerData:r,onChainMetaData:n})=>{const{exp:o="",mod:c=""}=n;return t.map((({script:t,value:n},u)=>{const p=u<a.length;return{rev:`${s}:${u}`,address:Wt((()=>l.fromOutputScript(t,se))),satoshis:Math.round(n),scriptPubKey:t.toString("hex"),isTbcOutput:p,publicKeys:p?r[u]._owners:[],mod:p?c:"",previous:p?a[u][0]:null,hash:p?i.sha256(Buffer.from(o)).toString("hex"):null,blockHash:e}}))}));static select=async t=>ee.select(t);static eraseBlockHash=async t=>{await ee.eraseBlockHash(t)};static updateBlockHash=async(t,e)=>{await ee.updateBlockHash(t,e)};static listSentOutputs=async t=>ee.listSentOutputs(t);static listReceivedOutputs=async t=>ee.listReceivedOutputs(t);static listTxs=async t=>ee.listTxs(t);static getLatestRev=async t=>ee.getLatestRev(t);static getLatestRevs=async t=>ee.getLatestRevs(t);static getIdByRev=async t=>ee.getIdByRev(t);static query=async t=>ee.query(t)}const re=t=>new Promise((e=>{setTimeout(e,t)}));const ne=T(o);const oe=c.regtest;const{PreparedStatement:ie}=w;class ce{static async select(t){const e=new ie({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent", "spendingInput", "blockHash" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return Et.any(e)}static async insert(t){await Promise.all(Ut(t,3333).map((t=>{const e=t.flatMap((({outputSpent:t,spendingInput:e,blockHash:s})=>[t,e,s]));return Et.none(new ie({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput", "blockHash") VALUES ${Dt(e.length)} \n              ON CONFLICT ("spendingInput") \n              DO UPDATE SET "blockHash" = COALESCE("Input"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async updateBlockHash(t,e){await Promise.all(Ut(t,1e4).map((t=>{const s=t.join("','");return Et.none(new ie({name:`Input.updateBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = $1 WHERE "spendingInput" IN ('${s}')`,values:[e]}))})))}static async eraseBlockHash(t){await Promise.all(Ut(t,1e4).map((t=>{const e=t.join("','");return Et.none(new ie({name:`Input.eraseBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async count(t){const e=t.map((t=>t.outputSpent));const s=new ie({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const a=await Et.oneOrNone(s);return parseInt(a?.count,10)||0}}class ue{static async select(t){return ce.select(t)}static async insert(t){return ce.insert(t)}static async updateBlockHash(t,e){return ce.updateBlockHash(t,e)}static async eraseBlockHash(t){return ce.eraseBlockHash(t)}}class le{static insert=async t=>{await ue.insert(t)};static getInputs=(t,e=null)=>t.flatMap((({ins:t,txId:e})=>t.map(((t,s)=>({input:t,index:s,txId:e}))))).filter((({input:t})=>!$.isCoinbaseHash(t.hash))).map((({input:t,index:s,txId:a})=>{return{outputSpent:`${r=t.hash,u.reverseBuffer(Buffer.from(r)).toString("hex")}:${t.index}`,spendingInput:`${a}:${s}`,blockHash:e};var r}));static select=async t=>ue.select(t);static updateBlockHash=async(t,e)=>{await ue.updateBlockHash(t,e)};static eraseBlockHash=async t=>{await ue.eraseBlockHash(t)}}class pe{static rawTxSubscriber=async t=>{const e=t.toString("hex");if(mt.info(`ZMQ message { hex:${e} }`),"08"!==e.slice(10,12))try{const t=O.txFromHex({hex:e});await Promise.all([ae.insert(ae.getOutputs([t])),le.insert(le.getInputs([t]))])}catch(t){mt.error(`Error parsing transaction ${e}\n${t.stack}`)}};static sub=async t=>{try{mt.info(`Bitcoin Computer Node ${yt} is starting on ${M} ${C}.`),await Kt.createWallet(),"regtest"!==M&&await Kt.checkBlockchainProgress(.7),await Kt.walletSetup(),mt.info(`Bitcoin Computer Node ${yt} is ready. ZQM activation height: ${Z}`),await Kt.checkBlockchainProgress(.9);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){mt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:de}=w;class me{static async select(t){const e=new de({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await Et.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new de({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await Et.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new de({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await Et.none(s)}}class he{static async select(t){return me.select(t)}static async insert(t){return me.insert(t)}static async update(t){return me.update(t)}}const{ec:ye}=I;const ge=new ye("secp256k1");const we=s();const Ee=new class{configFile;loaded=!1;load=()=>{try{const t="dev"===z?"bcn.test.config.json":"bcn.config.json";const e=N(B(import.meta.url));this.configFile=v.readFileSync(x.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw mt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(mt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:a}=JSON.parse(this.configFile.toString());if(t&&a)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:r}=e.locals.authToken;if(a&&!a.includes(r)||t&&t.includes(r))return void e.status(403).json({error:`Public key ${r} is not allowed.`});s()}catch(s){mt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let fe;m(o);try{fe=a.createServer(we)}catch(t){throw mt.error(`Starting server failed with error '${t.message}'`),t}if(mt.info(`Server listening on port ${H}`),we.use(e()),"true"===F){const t=n({windowMs:parseInt(W,10),max:parseInt(K,10),standardHeaders:"true"===Y,legacyHeaders:"true"===G});we.use(t)}we.use(t.json({limit:"100mb"})),we.use(t.urlencoded({limit:"100mb",extended:!0})),we.get("/",((t,e)=>e.status(200).send(`\n        <h2>Bitcoin Computer Node</h2>\n        <b>Status</b>: Healthy <br />\n        <b>Version</b>: ${yt} <br />\n        <b>Chain</b>: ${C} <br />\n        <b>Network</b>: ${M}\n    `))),Ee.loaded&&(we.use((async(t,e,s)=>{try{const a=t.get("Authentication");if(!a){const{method:s,url:a}=t;const r=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${a}`;return mt.error(r),void e.status(401).json({error:r})}const r=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(a);const{signature:n,publicKey:o,timestamp:i}=r;if(Date.now()-i>18e4)return void e.status(401).json({error:"Signature is too old."});const c=b.sha256().update(V+i).digest("hex");if(!ge.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await he.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await he.update({publicKey:o,clientTimestamp:i})}else await he.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=r,s()}catch(t){mt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),we.use(Ee.middleware));const ve=(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await It.selectByAddress(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/sent-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.listSentOutputs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/received-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.listReceivedOutputs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/list-txs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await ae.listTxs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const a={mod:s.get("mod"),publicKey:s.get("publicKey"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const r=await ae.query(a);e.status(200).json(r)}catch(s){mt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(500).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await It.getBalance(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message||t}'`),s.status(500).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input txIds."});const e=await Yt.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input hex."});const e=await Yt.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(a){mt.error(`POST ${e} failed with error '${a.message}\ntxHex: ${t}`),s.status(500).json({error:a.message})}})),t.get("/mine",(async({query:{count:t},url:e},s)=>{try{const{result:e}=await Jt.getnewaddress();if("string"!=typeof t)throw new Error("Please provide appropriate count");return await Jt.generatetoaddress(parseInt(t,10)||1,e),s.status(200).json({success:!0})}catch(t){return mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/:id/height",(async({params:{id:t},url:e},s)=>{try{let e=t;if("best"===t){const{result:t}=await Jt.getbestblockhash();e=t}const{result:a}=await Jt.getblockheader(e,!0);return s.status(200).json({height:a.height})}catch(t){return mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/faucet",(async({body:{address:t,value:e},url:s},a)=>{try{const s=parseInt(e,10)/1e8;const{result:r}=await Jt.sendtoaddress(t,s);await Jt.generateToAddress(1,"mvFeNF9DAR7WMuCpBPbKuTtheihLyxzj8i");const{result:n}=await Jt.getrawtransaction(r,1);const o=n.vout.findIndex((t=>1e8*t.value===parseInt(e,10)));return a.status(200).json({txId:r,vout:o,height:-1,satoshis:e})}catch(t){return mt.error(`POST ${s} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),t.post("/faucetScript",(async({body:{script:t,value:e},url:s},a)=>{try{const s=ne.makeRandom({network:oe});const r=p.p2pkh({pubkey:s.publicKey,network:oe});const{address:n}=r;const o=(await Jt.sendtoaddress(n,2*parseInt(e,10)/1e8,"","")).result;let i;let c=10;for(;!i;)if(i=(await It.selectByAddress(n)).filter((t=>t.txId===o))[0],!i){if(c-=1,c<=0)throw new Error("No outputs");await re(10)}const u=(await Jt.getrawtransaction(i.txId,1)).result;const l=new d({network:oe});l.addInput({hash:i.txId,index:i.vout,nonWitnessUtxo:Buffer.from(u.hex,"hex")}),l.addOutput({script:Buffer.from(t,"hex"),value:parseInt(e,10)}),l.signInput(0,s),l.finalizeAllInputs();const m=l.extractTransaction();let h;for(await Jt.sendrawtransaction(m.toHex()),c=5;!h;)if(h=(await It.selectByScriptHex(t)).filter((t=>t.txId===m.getId()))[0],!h){if(c-=1,c<=0)throw new Error("No outputs");await re(10)}return a.status(200).json({txId:m.getId(),vout:h.vout,height:-1,satoshis:h.satoshis})}catch(t){return mt.error(`POST ${s} failed with error '${t.message}'`),a.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input txId."});const e=await Yt.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input object ids."});const e=await ae.getLatestRevs(t);s.status(200).json(e)}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revToId",(async({body:{rev:t},url:e},s)=>{try{if(!Zt(t))return void s.status(400).json({error:"Invalid rev id"});const e=await ae.getIdByRev(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!new RegExp(k).test(t.method))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===Vt[t]||null===Vt[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const a=Vt[t].trim().split(" ");if(0===e.trim().length&&0!==Vt[t].trim().length)throw new Error(`Too few params provided. Expected ${a.length} Provided 0`);if(0!==e.trim().length&&0===Vt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<a.length)throw new Error(`Too few params provided. Expected ${a.length} Provided ${s.length}`);if(s.length>a.length)throw new Error(`Too many params provided. Expected ${a.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>zt[a[e]](t)))}(t.method,t.params);const a=e.length?await Jt[t.method](...e):await Jt[t.method]();s.status(200).json({result:a})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})();we.use(`/v1/${C}/${M}`,ve),we.use("/v1/store",Ot),fe.listen(H,(()=>{mt.info(`\nStarted Bitcoin Computer Node Version ${yt}\nPORT ${H} \n`)})).on("error",(t=>{mt.error(t.message),process.exit(1)}));const Te=new r.Subscriber;Te.connect(P),Te.subscribe("rawtx"),mt.info(`ZMQ Subscriber connected to ${P}`),(async()=>{await(async()=>{await f((()=>Et.connect()),{startingDelay:500})})(),await pe.sub(Te)})();
