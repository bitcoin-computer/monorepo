import t from"body-parser";import e from"cors";import s from"express";import r from"http";import*as a from"zeromq";import n from"express-rate-limit";import*as o from"@bitcoin-computer/secp256k1";import{crypto as i,networks as c,bufferUtils as u,script as l,address as p,initEccLib as d}from"@bitcoin-computer/nakamotojs";import m from"dotenv";import h from"winston";import g from"winston-daily-rotate-file";import y from"pg-promise";import v from"pg-monitor";import{backOff as E}from"exponential-backoff";import w from"fs";import{Computer as f,Transaction as T}from"@bitcoin-computer/lib";import O from"bitcoind-rpc";import S from"util";import R from"elliptic";import $ from"hash.js";import I,{dirname as b}from"path";import{fileURLToPath as x}from"url";m.config();const N=process.env.BCN_CHAIN;const M=process.env.BCN_NETWORK;const{BCN_PORT:C}=process.env;const{BCN_ZMQ_URL:B}=process.env;const{BCN_ALLOWED_RPC_METHODS:L}=process.env;const{BCN_LOG_LEVEL:A}=process.env;const{BCN_LOG_MAX_FILES:H}=process.env;const{BCN_LOG_MAX_SIZE:P}=process.env;const{BCN_LOG_ZIP:k}=process.env;const{BCN_SHOW_DB_LOGS:j}=process.env;const{BCN_RATE_LIMIT_ENABLED:U}=process.env;const{BCN_RATE_LIMIT_WINDOW:_}=process.env;const{BCN_RATE_LIMIT_MAX:F}=process.env;const{BCN_RATE_LIMIT_STANDARD_HEADERS:D}=process.env;const{BCN_RATE_LIMIT_LEGACY_HEADERS:W}=process.env;process.env,process.env,process.env;const{BCN_OFFCHAIN_PROTOCOL:G}=process.env;const K=process.env.BCN_QUERY_LIMIT||"1000";const Y=process.env.BCN_URL||`http://127.0.0.1:${C}`;const J=process.env.BCN_ENV||"dev";const V=process.env.BCN_ZMQ_ACTIVATION_HEIGHT||"1";const{BITCOIN_RPC_USER:q}=process.env;const{BITCOIN_RPC_PASSWORD:z}=process.env;const{BITCOIN_RPC_HOST:Z}=process.env;const{BITCOIN_RPC_PORT:X}=process.env;const{BITCOIN_RPC_PROTOCOL:Q}=process.env;const{BITCOIN_DEFAULT_WALLET:tt}=process.env;const{POSTGRES_USER:et}=process.env;const{POSTGRES_PASSWORD:st}=process.env;const{POSTGRES_DB:rt}=process.env;const{POSTGRES_HOST:at}=process.env;const{POSTGRES_PORT:nt}=process.env;const{POSTGRES_MAX_CONNECTIONS:ot}=process.env;const{POSTGRES_IDLE_TIMEOUT_MILLIS:it}=process.env;h.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"blue"});const ct=h.format.combine(h.format.colorize(),h.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),h.format.json(),h.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const ut=h.format.combine(h.format.colorize(),h.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),h.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)));const lt={zippedArchive:"true"===k,maxSize:P,maxFiles:H,dirname:"logs"};const pt=[];const dt={0:"error",1:"warn",2:"info",3:"http",4:"debug"}[A];"dev"===J&&pt.push(new h.transports.Console({format:ut,level:dt})),pt.push(new g({filename:"logs/application-%DATE%.log",datePattern:"YYYY-MM-DD",level:dt,...lt})),pt.push(new g({filename:"logs/error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...lt}));const mt=h.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:ct,transports:pt,exceptionHandlers:[new h.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new h.transports.File({filename:"logs/rejections.log"})]});m.config();const{version:ht}=JSON.parse(w.readFileSync("package.json","utf8"));const gt=ht||process.env.BCN_SERVER_VERSION;const yt=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const vt={error:(t,e)=>{if(e.cn){const{host:s,port:r,database:a,user:n,password:o}=e.cn;mt.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${r}, database:${a}, user:${n}, password: ${o}`)}},noWarnings:!0};"true"===j&&(v.isAttached()?v.detach():(v.attach(vt),v.setTheme("matrix")));const Et=y(vt)({host:at,port:parseInt(nt,10),database:rt,user:et,password:st,max:parseInt(ot,10),allowExitOnIdle:!0,idleTimeoutMillis:parseInt(it,10)});const{PreparedStatement:wt}=y;class ft{static async select(t){const e=new wt({name:`OffChain.select.${Math.random()}`,text:'SELECT "data" FROM "OffChain" WHERE "id" = $1',values:[t]});return Et.oneOrNone(e)}static async insert({id:t,data:e}){const s=new wt({name:`OffChain.insert.${Math.random()}`,text:'INSERT INTO "OffChain" ("id", "data") VALUES ($1, $2) ON CONFLICT DO NOTHING',values:[t,e]});return Et.none(s)}static async delete(t){const e=new wt({name:`OffChain.delete.${Math.random()}`,text:'WITH deleted AS (DELETE FROM "OffChain" WHERE "id" = $1 RETURNING *) SELECT count(*) FROM deleted;',values:[t]});return(await Et.any(e))[0].count>0}}class Tt{static async select(t){const e=await ft.select(t);return e?.data||null}static async insert(t){return ft.insert(t)}static async delete(t){return ft.delete(t)}}const Ot=s.Router();Ot.get("/:id",(async({params:{id:t},url:e},s)=>{try{const e=await Tt.select(t);e?s.status(200).json(e):s.status(403).json({error:"No entry found."})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),Ot.post("/",(async(t,e)=>{const{body:{data:s},url:r}=t;try{const r=i.sha256(Buffer.from(s)).toString("hex");await Tt.insert({id:r,data:s});const a=`${G||t.protocol}://${t.get("host")}/store/${r}`;e.status(201).json({_url:a})}catch(t){mt.error(`POST ${r} failed with error '${t.message}'`),e.status(500).json({error:t.message})}})),Ot.delete("/:id",(async(t,e)=>{e.status(500).json({error:"Deletions are not supported yet."})}));const{PreparedStatement:St}=y;class Rt{static async getBalance(t){const e=new St({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is not null',values:[t]});const s=await Et.oneOrNone(e);const r=new St({name:`Utxos.getBalance.${Math.random()}`,text:'SELECT sum("satoshis") as "satoshis" FROM "Utxos" WHERE "address" = $1 and "blockHash" is null',values:[t]});const a=await Et.oneOrNone(r);return{confirmed:parseInt(s.satoshis,10)||0,unconfirmed:parseInt(a.satoshis,10)||0,balance:(parseInt(s.satoshis,10)||0)+(parseInt(a.satoshis,10)||0)}}static async select(t){const e=new St({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "address" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByScriptASM(t){const e=new St({name:`Utxos.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", split_part(rev, \':\', 1) AS "txId", cast(split_part(rev, \':\', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "asm" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)||0})))}static async selectByPk(t){const e=new St({name:`Utxos.selectByPk.${Math.random()}`,text:`SELECT "address", "satoshis", "asm", "rev", split_part(rev, ':', 1) AS "txId", cast(split_part(rev, ':', 2) as INTEGER) AS "vout" FROM "Utxos" WHERE "asm" LIKE '%${t}%'`});return(await Et.any(e)).map((t=>({...t,satoshis:parseInt(t.satoshis,10)})))}}class $t{static async getBalance(t){return Rt.getBalance(t)}static async select(t){return Rt.select(t)}static async selectByPk(t){return Rt.selectByPk(t)}static async selectByScriptASM(t){return Rt.selectByScriptASM(t)}}class It{static getBalance=async t=>$t.getBalance(t);static selectByAddress=async t=>$t.select(t);static selectByPk=async t=>$t.selectByPk(t);static selectByScriptASM=async t=>$t.selectByScriptASM(t)}const bt={protocol:Q,user:q,pass:z,host:Z,port:parseInt(X,10)};const xt=new O(bt);const Nt=S.promisify(O.prototype.createwallet.bind(xt));const Mt=S.promisify(O.prototype.generateToAddress.bind(xt));const Ct=S.promisify(O.prototype.getaddressinfo.bind(xt));const Bt=S.promisify(O.prototype.getBlock.bind(xt));const Lt=S.promisify(O.prototype.getBlockchainInfo.bind(xt));const At=S.promisify(O.prototype.getBlockHash.bind(xt));const Ht=S.promisify(O.prototype.getRawTransaction.bind(xt));const Pt=S.promisify(O.prototype.getRawTransaction.bind(xt));const kt=S.promisify(O.prototype.getTransaction.bind(xt));const jt=S.promisify(O.prototype.getNewAddress.bind(xt));const Ut={createwallet:Nt,generateToAddress:Mt,getaddressinfo:Ct,getBlock:Bt,getBlockchainInfo:Lt,getBlockHash:At,getRawTransaction:Ht,getTransaction:kt,importaddress:S.promisify(O.prototype.importaddress.bind(xt)),invalidateBlock:S.promisify(O.prototype.invalidateBlock.bind(xt)),listunspent:S.promisify(O.prototype.listunspent.bind(xt)),sendRawTransaction:S.promisify(O.prototype.sendRawTransaction.bind(xt)),getNewAddress:jt,sendToAddress:S.promisify(O.prototype.sendToAddress.bind(xt)),getRawTransactionJSON:Pt};const _t=(t,e)=>{const s=[];for(let r=0;r<t.length;r+=e){const a=Math.min(r+e,t.length);const n=t.slice(r,a);s.push(n)}return s};const Ft=t=>{const e=[];for(let s=1;s<=t;s+=3){const t=`($${s},$${s+1},$${s+2})`;e.push(t)}return e.join(",")};const Dt=t=>{const e=[];for(let s=1;s<=t;s+=9){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8})`;e.push(t)}return e.join(",")};const Wt=t=>{try{return t()}catch{return null}};class Gt{static async getTransaction(t){const{result:e}=await Ut.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Ut.getRawTransaction(t,0))))).map((t=>t.result))}static async getRawTransaction(t,e){const{result:s}=await Ut.getRawTransaction(t,e);return s}static async getRawTransactionsJSON(t){return{txId:(e=(await Ut.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Ut.sendRawTransaction(t);if(s)throw mt.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await Ut.getaddressinfo(t)).result.timestamp&&(mt.info(`Importing address: ${t}`),await Ut.importaddress(t,!1)),(await Ut.listunspent(0,999999,[t])).result);static walletSetup=async()=>{if("regtest"===M){if(mt.info(`Node is starting for chain ${N} and network ${M} \n\nStarting Wallet setup`),"LTC"===N){const{result:t}=await Ut.getBlockchainInfo();const e=t.blocks;if(e<yt){const{result:t}=await Ut.getNewAddress("","legacy");const s=yt-e-1;s&&await Ut.generateToAddress(s,t);const{result:r}=await Ut.getNewAddress("mweb","mweb");await Ut.sendToAddress(r,1),await Ut.generateToAddress(1,t),mt.info("MWEB setup is complete")}}if("BTC"===N){const{result:t}=await Ut.getNewAddress("","legacy");await Ut.generateToAddress(200,t),mt.info("Wallet setup is complete")}if("PEPE"===N||"DOGE"===N){const{result:t}=await Ut.getNewAddress("");await Ut.generateToAddress(200,t),mt.info("Wallet setup is complete")}}};static createWallet=async()=>{try{await Ut.createwallet(tt,!1,!1,"",!1,!1)}catch(t){if(t.message.includes("already exists"))return void mt.info(`Wallet ${tt} already exists`);mt.warn(`Wallet creation failed with error '${t.message}'`)}};static checkBlockchainProgress=async t=>{const e=await E((async()=>{const e=await Ut.getBlockchainInfo();const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const{blocks:r}=e.result;if(mt.info(`Zmq. Bitcoind { percentage:${s}%, blocks:${r} }`),parseFloat(e.result.verificationprogress)<=t)throw new Error("Node not ready yet");return e}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const r=e.result.blocks;mt.info(`BCN reaches sync end...at { bitcoind.progress:${s}%, bitcoindSyncedHeight:${r} }`)}}class Kt{static get=async t=>Gt.getTransaction(t);static getRaw=async t=>Gt.getBulkTransactions(t);static getRawJSON=async t=>Gt.getRawTransactionsJSON(t);static sendRaw=async t=>Gt.sendRawTransaction(t);static getUtxos=async t=>Gt.getUtxos(t);static parseTransactions=async(t,e,s,r)=>{let a=t;"LTC"===e&&(a=t.filter((t=>"08"!==t.hex.slice(10,12))));const n=[];for(const t of a)try{let{hex:e}=t;e||(e=(await Gt.getRawTransaction(t.txid,1)).hex);const s=f.txFromHex({hex:e});s&&n.push(s)}catch(e){mt.error(`[wid ${s} pid: ${process.pid}: failed to parse transaction in block ${r}\n          error message: ${e.message}\n          transaction: ${JSON.stringify(t)}`)}return n};static walletSetup=async()=>Gt.walletSetup()}const Yt={protocol:Q,user:q,pass:z,host:Z,port:parseInt(X,10)};const Jt=new O(Yt);const Vt={};const qt=JSON.parse(JSON.stringify(O.callspec));Object.keys(qt).forEach((t=>{qt[t.toLowerCase()]=qt[t]}));const zt={str:t=>t.toString(),string:t=>t.toString(),int:t=>parseFloat(t),float:t=>parseFloat(t),bool:t=>!0===t||"1"===t||1===t||"true"===t||"true"===t.toString().toLowerCase(),obj:t=>"string"==typeof t?JSON.parse(t):t};try{Object.keys(O.prototype).forEach((t=>{if(t&&"function"==typeof O.prototype[t]){const e=t.toLowerCase();Vt[t]=S.promisify(O.prototype[t].bind(Jt)),Vt[e]=S.promisify(O.prototype[e].bind(Jt))}}))}catch(t){mt.error(`Error occurred while binding RPC methods: ${t.message}`)}function Zt(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}function Xt(t){if(!Zt(t))throw new Error("Invalid rev")}const{PreparedStatement:Qt}=y;class te{static async listSentOutputs(t){const e=new Qt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new Qt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await Et.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new Qt({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"\n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await Et.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new Qt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", "hash", "mod", "isTbcOutput", "previous", "blockHash" FROM "Output" WHERE "address" = $1',values:[t]});return Et.any(e)}static async insert(t){await Promise.all(_t(t,1111).map((t=>{const e=t.flatMap((({rev:t,address:e,satoshis:s,asm:r,isTbcOutput:a,mod:n,previous:o,hash:i,blockHash:c})=>[t,e,s,r,a,n,o,i,c]));return Et.none(new Qt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "asm", "isTbcOutput",\n              "mod", "previous", "hash", "blockHash") VALUES ${Dt(e.length)} ON CONFLICT  ("rev") \n              DO UPDATE SET "blockHash" = COALESCE("Output"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(_t(t,1e4).map((t=>{const e=t.join("','");return Et.none(new Qt({name:`Output.eraseBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async getIdByRev(t){const e=new Qt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await Et.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new Qt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await Et.any(e);const r=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let a=t;for(;r[a];)a=r[a];return a}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new Qt({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await Et.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let r="";return s&&(r+=` order by "timestamp" ${s}`),r+=` limit ${t||K}`,e&&(r+=` offset ${e}`),r}static async getUnspentRevsByMod(t,e,s,r){const a=await this.getIdsByMod(t);const n=await this.getLatestRevs(a);const o=new Qt({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,r)}`,values:[n]});return(await Et.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,r){const a=new Qt({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE asm LIKE '%' || $1 || '%' AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,r)}`,values:[t]});return(await Et.any(a)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,r,a){const n=await this.getUnspentRevsByPublicKey(e,s,r,a);const o=await this.getIdsByRevs(n);const i=new Qt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const c=(await Et.any(i)).map((t=>t.rev));const u=await this.getLatestRevs(c);const l=new Qt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,r,a)}`,values:[u]});return(await Et.any(l)).map((t=>t.rev))}static async getUnspentTbcOutputs(t,e,s){const r=new Qt({name:`Output.getUnspentTbcOutputs.${Math.random()}`,text:`SELECT "rev", "address", "satoshis", "asm", "timestamp"\n        FROM "Output" WHERE "isTbcOutput" = true AND NOT EXISTS\n        (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") ${this.sqlSuffix(t,e,s)}`});return(await Et.any(r)).map((t=>t.rev))}static async getAncestorTxs(t){const e=new Qt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:' WITH RECURSIVE RecursiveCTE AS (\n        SELECT SUBSTRING("rev" FROM 1 FOR 64) AS "rev", SUBSTRING(o."previous" FROM 1 FOR 64) as "previous"\n        FROM "Output" o\n        where o."isTbcOutput" = true and SUBSTRING(o."rev" FROM 1 FOR 64) = $1\n        UNION ALL\n        SELECT SUBSTRING(o."rev" FROM 1 FOR 64),  SUBSTRING(o.previous FROM 1 FOR 64)\n        FROM "Output" o\n        INNER JOIN RecursiveCTE r ON SUBSTRING(r."previous" FROM 1 FOR 64) = SUBSTRING(o."rev" FROM 1 FOR 64)\n      )\n      select distinct rev as "txId"\n      FROM RecursiveCTE;\n      ',values:[t]});return(await Et.any(e)).map((t=>t.txId))}static async query(t){const{publicKey:e,limit:s,offset:r,ids:a,mod:n,order:o}=t;const i=parseInt(K||"",10);if(s&&parseInt(s||"",10)>i||a&&a.length>i)throw new Error(`Can't fetch more than ${K} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return a?(a.map(Xt),this.getLatestRevs(a)):n&&!e?this.getUnspentRevsByMod(n,s,r,o):!n&&e?this.getUnspentRevsByPublicKey(e,s,r,o):n&&e?this.getUnspentRevsByModAndPublicKey(n,e,s,r,o):this.getUnspentTbcOutputs(s,r,o)}static async selectNext(t){const e=new Qt({name:`Output.selectNext.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "previous" = $1',values:[t]});return Et.any(e)}static async selectPrev(t){const e=new Qt({name:`Output.selectPrev.${Math.random()}`,text:'SELECT "previous" FROM "Output" WHERE "rev" = $1',values:[t]});return Et.any(e)}}class ee{static async select(t){return te.select(t)}static async insert(t){return te.insert(t)}static async eraseBlockHash(t){return te.eraseBlockHash(t)}static async listSentOutputs(t){return te.listSentOutputs(t)}static async listReceivedOutputs(t){return te.listReceivedOutputs(t)}static async listTxs(t){return te.listTxs(t)}static async getLatestRev(t){return te.getLatestRev(t)}static async getLatestRevs(t){return te.getLatestRevs(t)}static async getIdByRev(t){return te.getIdByRev(t)}static async getAncestorTxs(t){return te.getAncestorTxs(t)}static async query(t){return te.query(t)}static async selectNext(t){return te.selectNext(t)}static async selectPrev(t){return te.selectPrev(t)}}const se=function(t=N,e=M){switch(t){case"BTC":switch(e){case"mainnet":return c.bitcoin;case"testnet":return c.testnet;case"regtest":return c.regtest;default:throw new Error(`Invalid network ${e}`)}case"LTC":switch(e){case"mainnet":return c.litecoin;case"testnet":return c.litecointestnet;case"regtest":return c.litecoinregtest;default:throw new Error(`Invalid network ${e}`)}case"PEPE":switch(e){case"mainnet":return c.pepecoin;case"testnet":return c.pepecointestnet;case"regtest":return c.pepecoinregtest;default:throw new Error(`Invalid network ${e}`)}case"DOGE":switch(e){case"mainnet":return c.dogecoin;case"testnet":return c.dogecointestnet;case"regtest":return c.dogecoinregtest;default:throw new Error(`Invalid network ${e}`)}default:throw new Error(`Invalid chain ${t}`)}}(N,M);class re{static insert(t){return ee.insert(t)}static getOutputs=(t,e=null)=>t.flatMap((({outs:t,txId:s,zip:r,onChainMetaData:a})=>{const{exp:n="",mod:o=""}=a;return t.map((({script:t,value:a},c)=>{const u=c<r.length;return{rev:`${s}:${c}`,address:Wt((()=>p.fromOutputScript(t,se))),satoshis:Math.round(a),asm:l.toASM(t),isTbcOutput:u,mod:u?o:"",previous:u?r[c][0]:null,hash:u?i.sha256(Buffer.from(n)).toString("hex"):null,blockHash:e}}))}));static getAncestorTxs=async t=>ee.getAncestorTxs(t);static select=async t=>ee.select(t);static eraseBlockHash=async t=>{await ee.eraseBlockHash(t)};static listSentOutputs=async t=>ee.listSentOutputs(t);static listReceivedOutputs=async t=>ee.listReceivedOutputs(t);static listTxs=async t=>ee.listTxs(t);static getLatestRev=async t=>ee.getLatestRev(t);static getLatestRevs=async t=>ee.getLatestRevs(t);static getIdByRev=async t=>ee.getIdByRev(t);static query=async t=>ee.query(t)}const ae=new Map;class ne{static has(t){return ae.has(t)}static set(t,e){ae.has(t)||ae.set(t,new Set),ae.get(t).add(e)}static get(t){return ae.get(t)}static delete(t){return ae.delete(t)}}const{PreparedStatement:oe}=y;class ie{static async select(t){const e=new oe({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent", "spendingInput", "blockHash" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return Et.any(e)}static async insert(t){await Promise.all(_t(t,3333).map((t=>{const e=t.flatMap((({outputSpent:t,spendingInput:e,blockHash:s})=>[t,e,s]));return Et.none(new oe({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput", "blockHash") VALUES ${Ft(e.length)} \n              ON CONFLICT ("spendingInput") \n              DO UPDATE SET "blockHash" = COALESCE("Input"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(_t(t,1e4).map((t=>{const e=t.join("','");return Et.none(new oe({name:`Input.eraseBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async count(t){const e=t.map((t=>t.outputSpent));const s=new oe({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const r=await Et.oneOrNone(s);return parseInt(r?.count,10)||0}}class ce{static async select(t){return ie.select(t)}static async insert(t){return ie.insert(t)}static async eraseBlockHash(t){return ie.eraseBlockHash(t)}}class ue{static insert=async t=>{await ce.insert(t)};static getInputs=(t,e=null)=>t.flatMap((({ins:t,txId:e})=>t.map(((t,s)=>({input:t,index:s,txId:e}))))).filter((({input:t})=>!T.isCoinbaseHash(t.hash))).map((({input:t,index:s,txId:r})=>{return{outputSpent:`${a=t.hash,u.reverseBuffer(Buffer.from(a)).toString("hex")}:${t.index}`,spendingInput:`${r}:${s}`,blockHash:e};var a}));static select=async t=>ce.select(t);static eraseBlockHash=async t=>{await ce.eraseBlockHash(t)}}class le{static emit=async(t,e)=>{await Promise.all(t.outs.map((async(s,r)=>{const a=`${t.getId()}:${r}`;const n=await re.getIdByRev(a);const o=ne.get(n)||new Set;for(const t of o)t.write(`data: ${JSON.stringify({rev:a,hex:e})}\n\n`)})))}}class pe{static rawTxSubscriber=async t=>{const e=t.toString("hex");if(mt.info(`ZMQ message { hex:${e} }`),"08"!==e.slice(10,12))try{const t=f.txFromHex({hex:e});await re.insert(re.getOutputs([t])),await ue.insert(ue.getInputs([t])),await le.emit(t,e)}catch(t){mt.error(`[zmq] Error parsing transaction ${e}\n${t.stack}`)}};static sub=async t=>{try{mt.info(`Bitcoin Computer Node ${gt} is starting on ${M} ${N}.`),await Gt.createWallet(),"regtest"!==M&&await Gt.checkBlockchainProgress(.7),await Gt.walletSetup(),mt.info(`Bitcoin Computer Node ${gt} is ready. ZQM activation height: ${V}`),await Gt.checkBlockchainProgress(.9);for await(const[,e]of t)await this.rawTxSubscriber(e)}catch(t){mt.error(`ZMQ subscription failed with error '${t.message}'`)}}}const{PreparedStatement:de}=y;class me{static async select(t){const e=new de({name:`User.select.${Math.random()}`,text:'SELECT "publicKey", "clientTimestamp" FROM "User" WHERE "publicKey" = $1',values:[t]});const s=await Et.oneOrNone(e);return s?{publicKey:s.publicKey,clientTimestamp:parseInt(s.clientTimestamp,10)||0}:null}static async insert({publicKey:t,clientTimestamp:e}){const s=new de({name:`User.insert.${Math.random()}`,text:'INSERT INTO "User"("publicKey", "clientTimestamp") VALUES ($1, $2)',values:[t,e]});await Et.none(s)}static async update({publicKey:t,clientTimestamp:e}){const s=new de({name:`User.update.${Math.random()}`,text:'UPDATE "User" SET "clientTimestamp"=$1 WHERE "publicKey"=$2',values:[e,t]});await Et.none(s)}}class he{static async select(t){return me.select(t)}static async insert(t){return me.insert(t)}static async update(t){return me.update(t)}}const{ec:ge}=R;const ye=new ge("secp256k1");const ve=s();const Ee=new class{configFile;loaded=!1;load=()=>{try{const t="dev"===J?"bcn.test.config.json":"bcn.config.json";const e=b(x(import.meta.url));this.configFile=w.readFileSync(I.join(e,"..","..",t)),this.loaded=!0}catch(t){if(t.message.includes("ENOENT: no such file or directory"))return void(this.loaded=!0);throw mt.error(`Access-list failed with error '${t.message}'`),t}};middleware=({url:t},e,s)=>{if(void 0!==e.locals.authToken)if(this.loaded||(mt.warn("Access-list failed with error 'AccessList not loaded.'. Loading now."),this.load()),void 0!==this.configFile)try{const{blacklist:t,whitelist:r}=JSON.parse(this.configFile.toString());if(t&&r)return void e.status(403).json({error:"Cannot enforce blacklist and whitelist at the same time."});const{publicKey:a}=e.locals.authToken;if(r&&!r.includes(a)||t&&t.includes(a))return void e.status(403).json({error:`Public key ${a} is not allowed.`});s()}catch(s){mt.error(`Authorization failed at ${t} with error: '${s.message}'`),e.status(403).json({error:s.message})}else s();else s()}};let we;d(o);try{we=r.createServer(ve)}catch(t){throw mt.error(`Starting server failed with error '${t.stack}'`),t}mt.info(`Server listening on port ${C}`),ve.use(e()),"true"===U&&ve.use(n({windowMs:parseInt(_,10)||9e5,max:parseInt(F,10)||100,standardHeaders:"true"===D,legacyHeaders:"true"===W})),ve.use(t.json({limit:"100mb"})),ve.use(t.urlencoded({limit:"100mb",extended:!0})),Ee.loaded&&(ve.use((async(t,e,s)=>{try{const r=t.get("Authentication");if(!r){const{method:s,url:r}=t;const a=`Auth failed with error 'no Authentication key provided' ${s} ${t.get("Host")} ${r}`;return mt.error(a),void e.status(401).json({error:a})}const a=(t=>{const e=t.split(" ");if(2!==e.length||"Bearer"!==e[0])throw new Error("Authentication header is invalid.");const s=Buffer.from(e[1],"base64").toString().split(":");if(3!==s.length)throw new Error;return{signature:s[0],publicKey:s[1],timestamp:parseInt(s[2],10)}})(r);const{signature:n,publicKey:o,timestamp:i}=a;if(Date.now()-i>18e4)return void e.status(401).json({error:"Signature is too old."});const c=$.sha256().update(Y+i).digest("hex");if(!ye.keyFromPublic(o,"hex").verify(c,n)){const t="The origin and public key pair doesn't match the signature.";return void e.status(401).json({error:t})}const u=await he.select(o);if(u){if(u.clientTimestamp>=i)return void e.status(401).json({error:"Please use a fresh authentication token."});await he.update({publicKey:o,clientTimestamp:i})}else await he.insert({publicKey:o,clientTimestamp:i});e.locals.authToken=a,s()}catch(t){mt.error(`Auth failed with error '${t.message}'`),e.status(401).json({error:t.message})}})),ve.use(Ee.middleware)),ve.use((async function(t,e,s){const r=Date.now();mt.http(`${t.method} ${t.originalUrl}`),e.on("finish",(()=>{const{method:s,originalUrl:a}=t;const{statusCode:n}=e;const o=Date.now()-r;mt.http(`${s} ${a} ${n} - ${o}ms`)})),s()}));const fe=`\n  <h2>Bitcoin Computer Node</h2>\n  <b>Status</b>: Healthy <br />\n  <b>Version</b>: ${gt} <br />\n  <b>Chain</b>: ${N} <br />\n  <b>Network</b>: ${M}\n`;ve.get("/",((t,e)=>e.status(200).send(fe))),ve.use(`/v1/${N}/${M}`,(()=>{const t=s.Router();return t.get("/wallet/:address/utxos",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await It.selectByAddress(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/sent-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await re.listSentOutputs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/received-outputs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await re.listReceivedOutputs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/wallet/:address/list-txs",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await re.listTxs(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/non-standard-utxos",(async(t,e)=>{try{const s=new URLSearchParams(t.url.split("?")[1]);const r={mod:s.get("mod"),publicKey:s.get("publicKey"),limit:s.get("limit"),order:s.get("order"),offset:s.get("offset"),ids:JSON.parse(s.get("ids"))};const a=await re.query(r);e.status(200).json(a)}catch(s){mt.error(`GET ${t.url} failed with error '${s.messages}'`),e.status(500).json({error:s.message})}})),t.get("/address/:address/balance",(async({params:t,url:e},s)=>{try{const{address:e}=t;s.status(200).json(await It.getBalance(e))}catch(t){mt.error(`GET ${e} failed with error '${t.message||t}'`),s.status(500).json({error:t.message})}})),t.post("/tx/bulk",(async({body:{txIds:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input txIds."});const e=await Kt.getRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/tx/post",(async({body:{hex:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input hex."});const e=await Kt.sendRaw(t);e?s.status(200).json(e):s.status(404).json({error:"Error Occured"})}catch(r){mt.error(`POST ${e} failed with error '${r.message}\ntxHex: ${t}`),s.status(500).json({error:r.message})}})),t.get("/tx/:txId/ancestors",(async({params:t,url:e},s)=>{try{const{txId:e}=t;if(e.includes(":"))return void s.status(400).json({error:"Invalid txId, did you provide a revision instead?"});if(!e)return void s.status(400).json({error:"Missing input txIds."});const r=await re.getAncestorTxs(e);r?s.status(200).json(r):s.status(404).json({error:"Not found"})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/tx/:txId/json",(async({params:{txId:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing input txId."});const e=await Kt.getRawJSON(t);e?s.status(200).json(e):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revs",(async({body:{ids:t},url:e},s)=>{try{if(void 0===t||0===t.length)return void s.status(400).json({error:"Missing input object ids."});const e=await re.getLatestRevs(t);s.status(200).json(e)}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/revToId",(async({body:{rev:t},url:e},s)=>{try{if(!Zt(t))return void s.status(400).json({error:"Invalid rev id"});const e=await re.getIdByRev(t);e&&s.status(200).json(e),s.status(404).json()}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.post("/rpc",(async({body:t,url:e},s)=>{try{if(!t||!t.method)throw new Error("Please provide appropriate RPC method name");if(!new RegExp(L).test(t.method))throw new Error("Method is not allowed");const e=function(t,e){if(void 0===qt[t]||null===qt[t])throw new Error("This RPC method does not exist, or not supported");const s=e.trim().split(" ");const r=qt[t].trim().split(" ");if(0===e.trim().length&&0!==qt[t].trim().length)throw new Error(`Too few params provided. Expected ${r.length} Provided 0`);if(0!==e.trim().length&&0===qt[t].trim().length)throw new Error(`Too many params provided. Expected 0 Provided ${s.length}`);if(s.length<r.length)throw new Error(`Too few params provided. Expected ${r.length} Provided ${s.length}`);if(s.length>r.length)throw new Error(`Too many params provided. Expected ${r.length} Provided ${s.length}`);return 0===e.length?[]:s.map(((t,e)=>zt[r[e]](t)))}(t.method,t.params);const r=e.length?await Vt[t.method](...e):await Vt[t.method]();s.status(200).json({result:r})}catch(t){mt.error(`POST ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/next/:rev",(async({params:{rev:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing rev."});const e=await ee.selectNext(t);e?s.status(200).json({rev:e&&e.length?e[0].rev:void 0}):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/prev/:rev",(async({params:{rev:t},url:e},s)=>{try{if(!t)return void s.status(400).json({error:"Missing rev."});const e=await ee.selectPrev(t);e?s.status(200).json({rev:e&&e.length?e[0].previous:void 0}):s.status(404).json({error:"Not found"})}catch(t){mt.error(`GET ${e} failed with error '${t.message}'`),s.status(500).json({error:t.message})}})),t.get("/subscribe/:id",((t,e)=>{try{const{id:s}=t.params;e.writeHead(200,{"Content-Type":"text/event-stream","Cache-Control":"no-cache",Connection:"keep-alive"}),ne.set(s,e);const r=setInterval((()=>{e.write("data: \n\n")}),3e4);t.on("close",(()=>{clearInterval(r),ne.delete(s),e.end()}))}catch(t){mt.error("Error in /subscribe/:id:",t.message),e.status(500).json({error:t.message})}})),t.post("/non-standard-utxo",(async(t,e)=>{e.status(500).json({error:"Please upgrade to @bitcoin-computer/lib to the latest version."})})),t})()),ve.use("/v1/store",Ot);const Te=`\n\n----------------------------------\n  [1mStarting Bitcoin Computer Node[0m\n\n  Chain [2m${N}[0m\n  Network [2m${M}[0m\n  Version [2m${gt}[0m\n  URL [2m${Y}[0m\n----------------------------------\n`;we.listen(C,(()=>{mt.info(Te)})).on("error",(t=>{mt.error(t.message),process.exit(1)}));const Oe=new a.Subscriber;Oe.connect(B),Oe.subscribe("rawtx"),mt.info(`ZMQ Subscriber connected to ${B}`),(async()=>{try{await(async()=>{await E((()=>Et.connect()),{startingDelay:500})})(),await pe.sub(Oe)}catch(t){mt.error(`Error in connectAndSub: ${t.stack}`),process.exit(1)}})(),process.on("SIGINT",(async()=>{try{mt.info("Shutting down server..."),we.close((()=>{mt.info("Server closed."),process.exit(0)})),await Oe.close()}catch(t){mt.error(`Error shutting down: ${t.stack}`)}}));
