import*as t from"@bitcoin-computer/secp256k1";import{networks as e,bufferUtils as s,script as a,crypto as n,address as r,initEccLib as o}from"@bitcoin-computer/nakamotojs";import{availableParallelism as c}from"node:os";import{spawn as i}from"node:child_process";import{exit as p}from"node:process";import u from"dotenv";import l from"winston";import d from"winston-daily-rotate-file";import{backOff as h}from"exponential-backoff";import y from"pg-promise";import w from"pg-monitor";import m from"fs";import{Transaction as g,Computer as $}from"@bitcoin-computer/lib";import E from"bitcoind-rpc";import v from"util";u.config();const S=process.env.BCN_CHAIN;const O=process.env.BCN_NETWORK;const{BCN_PORT:T}=process.env;process.env,process.env;const{BCN_LOG_LEVEL:R}=process.env;const{BCN_LOG_MAX_FILES:f}=process.env;const{BCN_LOG_MAX_SIZE:I}=process.env;const{BCN_LOG_ZIP:k}=process.env;const{BCN_SHOW_DB_LOGS:b}=process.env;process.env,process.env,process.env,process.env,process.env;const{BCN_NUM_WORKERS:B}=process.env;const{BCN_WORKER_ID:x}=process.env;process.env,process.env;const M=process.env.BCN_QUERY_LIMIT||"1000";const N=process.env.BCN_URL||`http://127.0.0.1:${T}`;const A=process.env.BCN_ENV||"dev";const H=process.env.BCN_ZMQ_ACTIVATION_HEIGHT||"1";const{BITCOIN_RPC_USER:C}=process.env;const{BITCOIN_RPC_PASSWORD:L}=process.env;const{BITCOIN_RPC_HOST:P}=process.env;const{BITCOIN_RPC_PORT:U}=process.env;const{BITCOIN_RPC_PROTOCOL:F}=process.env;const{BITCOIN_DEFAULT_WALLET:W}=process.env;const{POSTGRES_USER:_}=process.env;const{POSTGRES_PASSWORD:D}=process.env;const{POSTGRES_DB:G}=process.env;const{POSTGRES_HOST:Y}=process.env;const{POSTGRES_PORT:K}=process.env;const{POSTGRES_MAX_CONNECTIONS:j}=process.env;const{POSTGRES_IDLE_TIMEOUT_MILLIS:q}=process.env;l.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"blue"});const V=l.format.combine(l.format.colorize(),l.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),l.format.json(),l.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const J=l.format.combine(l.format.colorize(),l.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),l.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)));const z={zippedArchive:"true"===k,maxSize:I,maxFiles:f,dirname:"logs"};const X=[];const Z={0:"error",1:"warn",2:"info",3:"http",4:"debug"}[R];"dev"===A&&X.push(new l.transports.Console({format:J,level:Z})),X.push(new d({filename:"logs/application-%DATE%.log",datePattern:"YYYY-MM-DD",level:Z,...z})),X.push(new d({filename:"logs/error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...z}));const Q=l.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:V,transports:X,exceptionHandlers:[new l.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new l.transports.File({filename:"logs/rejections.log"})]});u.config();const{version:tt}=JSON.parse(m.readFileSync("package.json","utf8"));tt||process.env.BCN_SERVER_VERSION;const et=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const st=[{txId:"e3bf3d07d4b0375638d5f1db5255fe07ba2c4cb067cd81b84ee974b6585fb468",height:91722},{txId:"d5d27987d2a3dfc724e359870c6644b40e497bdc0589a033220fe15429d88599",height:91812}];const at={error:(t,e)=>{if(e.cn){const{host:s,port:a,database:n,user:r,password:o}=e.cn;Q.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${a}, database:${n}, user:${r}, password: ${o}`)}},noWarnings:!0};"true"===b&&(w.isAttached()?w.detach():(w.attach(at),w.setTheme("matrix")));const nt=y(at)({host:Y,port:parseInt(K,10),database:G,user:_,password:D,max:parseInt(j,10),allowExitOnIdle:!0,idleTimeoutMillis:parseInt(q,10)});const{PreparedStatement:rt}=y;class ot{static async selectByWorkerId(t){const e=new rt({name:`TxStatus.select.${Math.random()}`,text:'SELECT "blockToSync", "workerId" FROM "TxStatus" WHERE "workerId" = $1',values:[t]});return nt.oneOrNone(e)}static async update({blockToSync:t,workerId:e}){const s=new rt({name:`TxStatus.update.${Math.random()}`,text:'UPDATE "TxStatus" SET "blockToSync" = $1 WHERE "workerId" = $2',values:[t,e]});await nt.any(s)}static async count(){const t=new rt({name:`TxStatus.count.${Math.random()}`,text:'SELECT COUNT(*) FROM "TxStatus"'});const e=await nt.oneOrNone(t);return parseInt(e?.count,10)||0}static async min(){const t=new rt({name:`TxStatus.min.${Math.random()}`,text:'SELECT MIN("blockToSync") FROM "TxStatus"'});const e=await nt.oneOrNone(t);return parseInt(e?.min,10)||0}static async deleteAll(){const t=new rt({name:`TxStatus.delete.${Math.random()}`,text:'DELETE FROM "TxStatus"'});await nt.any(t)}static async insertBatch(t){const e=[];for(let s=1;s<=t.length;s+=2)e.push(`($${s}, $${s+1})`);const s=e.join(",");const a=new rt({name:`TxStatus.reorg.${Math.random()}`,text:`INSERT INTO "TxStatus"("workerId", "blockToSync") VALUES ${s}`,values:t});await nt.any(a)}}class ct{static async selectByWorkerId(t){return ot.selectByWorkerId(t)}static async update(t){await ot.update(t)}static async count(){return ot.count()}static async insertBatch(t){await ot.insertBatch(t)}static async min(){return ot.min()}static async deleteAll(){await ot.deleteAll()}}const{PreparedStatement:it}=y;class pt{static async select(){const t=new it({name:`BlockStatus.select.${Math.random()}`,text:'SELECT "blockToSync" FROM "BlockStatus"'});const e=await nt.oneOrNone(t);return parseInt(e?.blockToSync,10)||null}static async update(t){const e=new it({name:`BlockStatus.update.${Math.random()}`,text:'UPDATE "BlockStatus" SET "blockToSync" = $1',values:[t]});await nt.any(e)}static async insert(t){const e=new it({name:`BlockStatus.insert.${Math.random()}`,text:'INSERT INTO "BlockStatus"("blockToSync") VALUES ($1)',values:[t]});await nt.any(e)}static async count(){const t=new it({name:`BlockStatus.count.${Math.random()}`,text:'SELECT COUNT(*) FROM "BlockStatus"'});const e=await nt.oneOrNone(t);return parseInt(e?.count,10)||0}static async delete(){const t=new it({name:`BlockStatus.delete.${Math.random()}`,text:'DELETE FROM "BlockStatus"'});await nt.any(t)}}class ut{static async select(){return pt.select()}static async update(t){await pt.update(t)}static async insert(t){await pt.insert(t)}static async count(){return pt.count()}static async delete(){await pt.delete()}}class lt{static update=async t=>ut.update(t);static select=async()=>ut.select();static insert=async t=>ut.insert(t);static count=async()=>ut.count();static delete=async()=>ut.delete()}function dt(t){t.forEach((t=>{Q.info(`[wid 0 pid: ${process.pid}]: killing worker ${t}`);try{Q.info(`[wid 0 pid: ${process.pid}]: killing worker (SIGTERM) ${t}: ${process.kill(t,"SIGTERM")}`),process.kill(t,"SIGTERM")}catch(e){Q.info(`[wid 0 pid: ${process.pid}]: killing worker ${t}: ${process.kill(t)}`),process.kill(t,"SIGKILL")}}))}const ht=t=>new Promise((e=>{setTimeout(e,t)}));const yt=(t,e)=>{const s=[];for(let a=0;a<t.length;a+=e){const n=Math.min(a+e,t.length);const r=t.slice(a,n);s.push(r)}return s};const wt=t=>{const e=[];for(let s=1;s<=t;s+=3){const t=`($${s},$${s+1},$${s+2})`;e.push(t)}return e.join(",")};const mt=t=>{const e=[];for(let s=1;s<=t;s+=9){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8})`;e.push(t)}return e.join(",")};const gt=t=>{try{return t()}catch{return null}};const{PreparedStatement:$t}=y;class Et{static async selectByHeight(t){const e=new $t({name:`Block.select.${Math.random()}`,text:'SELECT "hash", "height", "previousHash" FROM "Block" WHERE "height" = $1',values:[t]});return nt.oneOrNone(e)}static async insert(t){const e=new $t({name:`Block.insert.${Math.random()}`,text:'INSERT INTO "Block" ("hash", "height", "previousHash") VALUES ($1, $2, $3)',values:[t.hash,t.height,t.previousHash]});await nt.none(e)}static async insertBatch(t){const e=t.flatMap((({hash:t,height:e,previousHash:s})=>[t,e,s]));const s=new $t({name:`Block.insertBatch.${Math.random()}`,text:`INSERT INTO "Block" ("hash", "height", "previousHash") VALUES ${wt(e.length)}`,values:e});await nt.none(s)}static async deleteAll(){const t=new $t({name:`Block.delete.${Math.random()}`,text:'DELETE FROM "Block"',values:[]});await nt.none(t)}static async deleteByHash(t){const e=t.map((t=>t)).join("', '");const s=new $t({name:`Block.deleteByHash.${Math.random()}`,text:`DELETE FROM "Block" WHERE "hash" IN ('${e}')`});await nt.none(s)}}class vt{static selectByHeight=async t=>Et.selectByHeight(t);static insert=async t=>Et.insert(t);static insertBatch=async t=>Et.insertBatch(t);static deleteAll=async()=>Et.deleteAll();static deleteByHash=async t=>Et.deleteByHash(t);static waitForDbBlockHash=async(t,e)=>(await h((async()=>{let s;try{s=await Et.selectByHeight(t)}catch(s){throw Q.debug(`[wid ${e} pid: ${process.pid}]: waiting for DB to get block ${t} ...`),s}return s}),{startingDelay:1e4,timeMultiple:1,numOfAttempts:720})).hash}class St{static selectByHeight=async t=>vt.selectByHeight(t);static insert=async t=>vt.insert(t);static insertBatch=async t=>vt.insertBatch(t);static deleteAll=async()=>vt.deleteAll();static deleteByHash=async t=>vt.deleteByHash(t);static waitForDbBlockHash=async(t,e)=>vt.waitForDbBlockHash(t,e)}const{PreparedStatement:Ot}=y;class Tt{static async selectAll(){const t=new Ot({name:`Orphan.select.${Math.random()}`,text:'SELECT * FROM "Orphan"'});return nt.any(t)}static async insertAll(t){const e=t.map((t=>`('${t.hash}',${t.height}, ${t.processed})`)).join(",");const s=new Ot({name:`Orphan.insert.${Math.random()}`,text:`INSERT INTO "Orphan" (hash, height, processed) VALUES ${e}`});await nt.none(s)}static async process(t){const e=t.map((t=>t.height)).join(",");const s=new Ot({name:`Orphan.process.${Math.random()}`,text:`UPDATE "Orphan" SET processed = true WHERE height IN (${e})`});await nt.none(s)}}class Rt{static selectAll=async()=>Tt.selectAll();static insertAll=async t=>Tt.insertAll(t);static process=async t=>Tt.process(t)}class ft{static selectAll=async()=>Rt.selectAll();static insertAll=async t=>Rt.insertAll(t);static process=async t=>Rt.process(t)}const{PreparedStatement:It}=y;class kt{static async select(t){const e=new It({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent", "spendingInput", "blockHash" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return nt.any(e)}static async insert(t){await Promise.all(yt(t,3333).map((t=>{const e=t.flatMap((({outputSpent:t,spendingInput:e,blockHash:s})=>[t,e,s]));return nt.none(new It({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput", "blockHash") VALUES ${wt(e.length)} \n              ON CONFLICT ("spendingInput") \n              DO UPDATE SET "blockHash" = COALESCE("Input"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(yt(t,1e4).map((t=>{const e=t.join("','");return nt.none(new It({name:`Input.eraseBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async count(t){const e=t.map((t=>t.outputSpent));const s=new It({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const a=await nt.oneOrNone(s);return parseInt(a?.count,10)||0}}class bt{static async select(t){return kt.select(t)}static async insert(t){return kt.insert(t)}static async eraseBlockHash(t){return kt.eraseBlockHash(t)}}class Bt{static insert=async t=>{await bt.insert(t)};static getInputs=(t,e=null)=>t.flatMap((({ins:t,txId:e})=>t.map(((t,s)=>({input:t,index:s,txId:e}))))).filter((({input:t})=>!g.isCoinbaseHash(t.hash))).map((({input:t,index:a,txId:n})=>{return{outputSpent:`${r=t.hash,s.reverseBuffer(Buffer.from(r)).toString("hex")}:${t.index}`,spendingInput:`${n}:${a}`,blockHash:e};var r}));static select=async t=>bt.select(t);static eraseBlockHash=async t=>{await bt.eraseBlockHash(t)}}function xt(t){if(!function(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}(t))throw new Error("Invalid rev")}const{PreparedStatement:Mt}=y;class Nt{static async listSentOutputs(t){const e=new Mt({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", COALESCE("Output"."satoshis", 0) AS "satoshis"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return nt.any(e)}static async listReceivedOutputs(t){const e=new Mt({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", COALESCE("Output"."satoshis", 0) as "satoshis" FROM "Output" WHERE "address" = $1',values:[t]});return nt.any(e)}static async listTxs(t){const e=new Mt({name:`Output.listTxs.${Math.random()}`,text:'\n        WITH \n          -- Outputs received by the address\n          received AS (\n            SELECT SPLIT_PART("rev", \':\', 1) AS "txId", SUM("satoshis") AS "satoshis"\n            FROM "Output"\n            WHERE "address" = $1\n            GROUP BY 1\n          ),\n          -- Total satoshis sent from the address\n          sent AS (\n            SELECT SPLIT_PART("Input"."spendingInput", \':\', 1) AS "txId", SUM("Output"."satoshis") AS "satoshis"\n            FROM "Input"\n            JOIN "Output" ON "Input"."outputSpent" = "Output"."rev"\n            WHERE "Output"."address" = $1\n            GROUP BY 1\n          ),\n          txs AS (\n            SELECT \n              COALESCE(r."txId", s."txId") AS "txId",\n              COALESCE(s."satoshis", 0) AS "inputsSatoshis",\n              COALESCE(r."satoshis", 0) AS "outputsSatoshis",\n              COALESCE(r."satoshis", 0) - COALESCE(s."satoshis", 0) AS "satoshis"\n            FROM received r\n            FULL OUTER JOIN sent s ON r."txId" = s."txId"\n          )\n        SELECT * FROM txs;\n      ',values:[t]});const s=await nt.any(e);return{sentTxs:s.filter((t=>BigInt(t.satoshis)<0n)).map((t=>({...t,satoshis:(-1n*BigInt(t.satoshis)).toString()}))),receivedTxs:s.filter((t=>BigInt(t.satoshis)>=0n)).map((t=>({...t,satoshis:BigInt(t.satoshis).toString()})))}}static async select(t){const e=new Mt({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "asm", "rev", "hash", "mod", "isTbcOutput", "previous", "blockHash" FROM "Output" WHERE "address" = $1',values:[t]});return nt.any(e)}static async insert(t){await Promise.all(yt(t,1111).map((t=>{const e=t.flatMap((({rev:t,address:e,satoshis:s,asm:a,isTbcOutput:n,mod:r,previous:o,hash:c,blockHash:i})=>[t,e,s,a,n,r,o,c,i]));return nt.none(new Mt({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "asm", "isTbcOutput",\n              "mod", "previous", "hash", "blockHash") VALUES ${mt(e.length)} ON CONFLICT  ("rev") \n              DO UPDATE SET "blockHash" = COALESCE("Output"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(yt(t,1e4).map((t=>{const e=t.join("','");return nt.none(new Mt({name:`Output.eraseBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async getIdByRev(t){const e=new Mt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await nt.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new Mt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await nt.any(e);const a=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let n=t;for(;a[n];)n=a[n];return n}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new Mt({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await nt.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let a="";return s&&(a+=` order by "timestamp" ${s}`),a+=` limit ${t||M}`,e&&(a+=` offset ${e}`),a}static async getUnspentRevsByMod(t,e,s,a){const n=await this.getIdsByMod(t);const r=await this.getLatestRevs(n);const o=new Mt({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,a)}`,values:[r]});return(await nt.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,a){const n=new Mt({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE asm LIKE '%' || $1 || '%' AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,a)}`,values:[t]});return(await nt.any(n)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,a,n){const r=await this.getUnspentRevsByPublicKey(e,s,a,n);const o=await this.getIdsByRevs(r);const c=new Mt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const i=(await nt.any(c)).map((t=>t.rev));const p=await this.getLatestRevs(i);const u=new Mt({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,a,n)}`,values:[p]});return(await nt.any(u)).map((t=>t.rev))}static async getUnspentTbcOutputs(t,e,s){const a=new Mt({name:`Output.getUnspentTbcOutputs.${Math.random()}`,text:`SELECT "rev", "address", "satoshis", "asm", "timestamp"\n        FROM "Output" WHERE "isTbcOutput" = true AND NOT EXISTS\n        (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") ${this.sqlSuffix(t,e,s)}`});return(await nt.any(a)).map((t=>t.rev))}static async getAncestorTxs(t){const e=new Mt({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:' WITH RECURSIVE RecursiveCTE AS (\n        SELECT SUBSTRING("rev" FROM 1 FOR 64) AS "rev", SUBSTRING(o."previous" FROM 1 FOR 64) as "previous"\n        FROM "Output" o\n        where o."isTbcOutput" = true and SUBSTRING(o."rev" FROM 1 FOR 64) = $1\n        UNION ALL\n        SELECT SUBSTRING(o."rev" FROM 1 FOR 64),  SUBSTRING(o.previous FROM 1 FOR 64)\n        FROM "Output" o\n        INNER JOIN RecursiveCTE r ON SUBSTRING(r."previous" FROM 1 FOR 64) = SUBSTRING(o."rev" FROM 1 FOR 64)\n      )\n      select distinct rev as "txId"\n      FROM RecursiveCTE;\n      ',values:[t]});return(await nt.any(e)).map((t=>t.txId))}static async query(t){const{publicKey:e,limit:s,offset:a,ids:n,mod:r,order:o}=t;const c=parseInt(M||"",10);if(s&&parseInt(s||"",10)>c||n&&n.length>c)throw new Error(`Can't fetch more than ${M} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return n?(n.map(xt),this.getLatestRevs(n)):r&&!e?this.getUnspentRevsByMod(r,s,a,o):!r&&e?this.getUnspentRevsByPublicKey(e,s,a,o):r&&e?this.getUnspentRevsByModAndPublicKey(r,e,s,a,o):this.getUnspentTbcOutputs(s,a,o)}static async selectNext(t){const e=new Mt({name:`Output.selectNext.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "previous" = $1',values:[t]});return nt.any(e)}static async selectPrev(t){const e=new Mt({name:`Output.selectPrev.${Math.random()}`,text:'SELECT "previous" FROM "Output" WHERE "rev" = $1',values:[t]});return nt.any(e)}}class At{static async select(t){return Nt.select(t)}static async insert(t){return Nt.insert(t)}static async eraseBlockHash(t){return Nt.eraseBlockHash(t)}static async listSentOutputs(t){return Nt.listSentOutputs(t)}static async listReceivedOutputs(t){return Nt.listReceivedOutputs(t)}static async listTxs(t){return Nt.listTxs(t)}static async getLatestRev(t){return Nt.getLatestRev(t)}static async getLatestRevs(t){return Nt.getLatestRevs(t)}static async getIdByRev(t){return Nt.getIdByRev(t)}static async getAncestorTxs(t){return Nt.getAncestorTxs(t)}static async query(t){return Nt.query(t)}static async selectNext(t){return Nt.selectNext(t)}static async selectPrev(t){return Nt.selectPrev(t)}}const Ht=function(t=S,s=O){switch(t){case"BTC":switch(s){case"mainnet":return e.bitcoin;case"testnet":return e.testnet;case"regtest":return e.regtest;default:throw new Error(`Invalid network ${s}`)}case"LTC":switch(s){case"mainnet":return e.litecoin;case"testnet":return e.litecointestnet;case"regtest":return e.litecoinregtest;default:throw new Error(`Invalid network ${s}`)}case"PEPE":switch(s){case"mainnet":return e.pepecoin;case"testnet":return e.pepecointestnet;case"regtest":return e.pepecoinregtest;default:throw new Error(`Invalid network ${s}`)}case"DOGE":switch(s){case"mainnet":return e.dogecoin;case"testnet":return e.dogecointestnet;case"regtest":return e.dogecoinregtest;default:throw new Error(`Invalid network ${s}`)}default:throw new Error(`Invalid chain ${t}`)}}(S,O);class Ct{static insert(t){return At.insert(t)}static getOutputs=(t,e=null)=>t.flatMap((({outs:t,txId:s,zip:o,onChainMetaData:c})=>{const{exp:i="",mod:p=""}=c;return t.map((({script:t,value:c},u)=>{const l=u<o.length;let d;try{d=a.toASM(t)}catch(t){d="[error]"}return{rev:`${s}:${u}`,address:gt((()=>r.fromOutputScript(t,Ht))),satoshis:c,asm:d,isTbcOutput:l,mod:l?p:"",previous:l?o[u][0]:null,hash:l?n.sha256(Buffer.from(i)).toString("hex"):null,blockHash:e}}))}));static getAncestorTxs=async t=>At.getAncestorTxs(t);static select=async t=>At.select(t);static eraseBlockHash=async t=>{await At.eraseBlockHash(t)};static listSentOutputs=async t=>At.listSentOutputs(t);static listReceivedOutputs=async t=>At.listReceivedOutputs(t);static listTxs=async t=>At.listTxs(t);static getLatestRev=async t=>At.getLatestRev(t);static getLatestRevs=async t=>At.getLatestRevs(t);static getIdByRev=async t=>At.getIdByRev(t);static query=async t=>At.query(t)}class Lt{static update=async t=>ct.update(t);static insertBatch=async t=>ct.insertBatch(t);static deleteAll=async()=>ct.deleteAll();static count=async()=>ct.count();static waitUntilSetup=async(t,e)=>{Q.debug(`WorkerId ${t} waiting for master worker to reorg up to ${e} workers...`),await h((async()=>{const s=await ct.count();if(s===e)return!0;throw Q.info(`WorkerId ${t} waiting until setup done. Actual ${s}, numWorkers ${e}`),new Error("Not all workers have reorged")}),{startingDelay:500})};static selectByWorkerId=async t=>ct.selectByWorkerId(t);static setup=async t=>{0===await ut.count()&&(await lt.insert(1),Q.info(`[wid 0 pid: ${process.pid}: registering block sync status on block 1`)),await ct.count()===t?Q.debug(`[wid 1 pid: ${process.pid}: all workers have already registered`):await Lt.register(t,await ct.min());const e=await ft.selectAll();if(e.length>0){Q.info(`[wid 0 pid: ${process.pid}: found ${e.length} orphans`);const s=e.map((t=>t.hash));await St.deleteByHash(s),await Bt.eraseBlockHash(s),await Ct.eraseBlockHash(s);const a=await ct.min();const n=Math.min(e[0].height-1,a);Q.info(`[wid 0 pid: ${process.pid}: last block synced from workers ${a}`),Q.info(`[wid 0 pid: ${process.pid}: last valid block at ${e[0].height-1}`),Q.info(`[wid 0 pid: ${process.pid}: resuming at ${n}`),await Lt.register(t,n),await ft.process(e)}};static register=async(t,e)=>{const s=[];let a=Math.max(1,e);for(let e=1;e<=t;e+=1,a+=1)s.push(e,a);Q.info(`[wid 0 pid: ${process.pid}: reorging sync status for ${t} workers...${s}`),await ct.deleteAll(),await ct.insertBatch(s)};static min=async()=>ct.min()}const Pt=new E({protocol:F,user:C,pass:L,host:P,port:parseInt(U,10)});const Ut=v.promisify(E.prototype.createwallet.bind(Pt));const Ft=v.promisify(E.prototype.generateToAddress.bind(Pt));const Wt=v.promisify(E.prototype.getaddressinfo.bind(Pt));const _t=v.promisify(E.prototype.getBlock.bind(Pt));const Dt=v.promisify(E.prototype.getBlockchainInfo.bind(Pt));const Gt=v.promisify(E.prototype.getBlockHash.bind(Pt));const Yt=v.promisify(E.prototype.getRawTransaction.bind(Pt));const Kt=v.promisify(E.prototype.getRawTransaction.bind(Pt));const jt=v.promisify(E.prototype.getTransaction.bind(Pt));const qt=v.promisify(E.prototype.getNewAddress.bind(Pt));const Vt={createwallet:Ut,generateToAddress:Ft,getaddressinfo:Wt,getBlock:_t,getBlockchainInfo:Dt,getBlockHash:Gt,getRawTransaction:Yt,getTransaction:jt,importaddress:v.promisify(E.prototype.importaddress.bind(Pt)),invalidateBlock:v.promisify(E.prototype.invalidateBlock.bind(Pt)),listunspent:v.promisify(E.prototype.listunspent.bind(Pt)),sendRawTransaction:v.promisify(E.prototype.sendRawTransaction.bind(Pt)),getNewAddress:qt,sendToAddress:v.promisify(E.prototype.sendToAddress.bind(Pt)),getRawTransactionJSON:Kt,validateaddress:v.promisify(E.prototype.validateaddress.bind(Pt))};class Jt{static async getBulkTransactions(t){return(await Promise.all(t.map((t=>Vt.getRawTransaction(t,0))))).map((t=>t.result))}static async getRawTransaction(t,e){const{result:s}=await Vt.getRawTransaction(t,e);return"object"==typeof s&&s.vout.forEach((t=>{t.value=BigInt(Math.round(1e8*t.value))})),s}static async getRawTransactionsJSON(t){return{txId:(e=(await Vt.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:BigInt(Math.round(1e8*t.value)).toString()}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await Vt.sendRawTransaction(t);if(s)throw Q.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>{let e;e="DOGE"===S||"PEPE"===S?await Vt.validateaddress(t):await Vt.getaddressinfo(t),void 0===e.result.timestamp&&(Q.info(`Importing address: ${t}`),await Vt.importaddress(t,!1));const s=await Vt.listunspent(0,999999,[t]);return s.result.forEach((t=>{t.amount=BigInt(t.amount)})),s.result};static walletSetup=async()=>{if("regtest"===O){if(Q.info(`Node is starting for chain ${S} and network ${O} \n\nStarting Wallet setup`),"LTC"===S){const{result:t}=await Vt.getBlockchainInfo();const e=t.blocks;if(e<et){const{result:t}=await Vt.getNewAddress("","legacy");const s=et-e-1;s&&await Vt.generateToAddress(s,t);const{result:a}=await Vt.getNewAddress("mweb","mweb");await Vt.sendToAddress(a,1),await Vt.generateToAddress(1,t),Q.info("MWEB setup is complete")}}if("BTC"===S){const{result:t}=await Vt.getNewAddress("","legacy");await Vt.generateToAddress(200,t),Q.info("Wallet setup is complete")}if("PEPE"===S||"DOGE"===S){const{result:t}=await Vt.getNewAddress("");await Vt.generateToAddress(200,t),Q.info("Wallet setup is complete")}}};static createWallet=async()=>{try{await Vt.createwallet(W,!1,!1,"",!1,!1)}catch(t){if(t.message.includes("already exists"))return void Q.info(`Wallet ${W} already exists`);Q.warn(`Wallet creation failed with error '${t.message}'`)}};static checkBlockchainProgress=async t=>{const e=await h((async()=>{const e=await Vt.getBlockchainInfo();const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const{blocks:a}=e.result;if(Q.info(`Zmq. Bitcoind { percentage:${s}%, blocks:${a} }`),parseFloat(e.result.verificationprogress)<=t)throw new Error("Node not ready yet");return e}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const a=e.result.blocks;Q.info(`BCN reaches sync end...at { bitcoind.progress:${s}%, bitcoindSyncedHeight:${a} }`)}}class zt{static getRawHEXs=async t=>Jt.getBulkTransactions(t);static getRawHEX=async t=>Jt.getRawTransaction(t,0);static getRawJSON=async t=>Jt.getRawTransactionsJSON(t);static sendRaw=async t=>Jt.sendRawTransaction(t);static getUtxos=async t=>Jt.getUtxos(t);static parseTransactions=async(t,e,s,a,n)=>{let r=t;"LTC"===e&&(r=t.filter((t=>"08"!==t.hex.slice(10,12))));const o=[];for(const t of r)try{let{hex:r}=t;r||(r=(await Jt.getRawTransaction(t.txid,1)).hex);const c=$.txFromHex({hex:r});c&&("BTC"===e&&"mainnet"===s&&st.some((t=>t.height===n&&t.txId===c.txId))?Q.warn(`wid ${a} pid: ${process.pid}: skipping conflicting transaction ${c.txId} in block ${n}`):o.push(c))}catch(e){Q.error(`[wid ${a} pid: ${process.pid}: failed to parse transaction in block ${n}\n          error message: ${e.message}\n          transaction: ${JSON.stringify(t)}`)}return o};static walletSetup=async()=>Jt.walletSetup()}class Xt{static getTxBatch=async(t,e,s,a=S,n=O)=>{const r=[];const o=[];const c=[];let i;let p;let u=!1;for(;9*r.length<1e4&&3*o.length<1e4;){try{const{result:e}=await Vt.getBlockHash(t);p=e;const{result:s}=await Vt.getBlock(e,2);i=s}catch(s){Q.debug(`[wid ${e} pid: ${process.pid}]: waiting to get block hash or block for height: ${t} ${s.message}`),u=!0;break}try{const s=await zt.parseTransactions(i.tx,a,n,e,t);r.push(...Ct.getOutputs(s,p)),o.push(...Bt.getInputs(s,p))}catch(t){Q.error(`[wid ${e} pid: ${process.pid}]: failed to get inputs or outputs for hash: ${p} ${t.message} ${t.stack}`)}c.push(t),t+=s}return{outputs:r,inputs:o,blockToSync:t,atTip:u,blocks:c}};static syncTxs=async(t,e,s)=>{let a=t;for(Q.debug(`[wid ${e} pid: ${process.pid}]: starting to sync txs from block: ${a} - numWorkers: ${s}`);;)try{const t=await this.getTxBatch(a,e,s);if(t.outputs.length>0||t.inputs.length>0){try{await Promise.all([Ct.insert(t.outputs),Bt.insert(t.inputs)])}catch(s){Q.error(`[wid ${e} pid: ${process.pid}: error ${s.message} ${s.stack} cannot insert outputs or inputs. \n                blocks ${t.blocks} - #outputs ${t.outputs.length} #inputs ${t.inputs.length}`)}await Lt.update({blockToSync:t.blockToSync,workerId:e}),Q.debug(`[wid ${e} pid: ${process.pid}: backfilling range [${a}-${t.blockToSync-1}] - #outputs ${t.outputs.length} #inputs ${t.inputs.length} `),a=t.blockToSync}t.atTip&&await ht(2e3)}catch(t){Q.error(`[wid ${e} pid: ${process.pid}]: sync failed to process block ${a} ${t.message} ${t.stack}`)}};static findOrphans=async t=>{let e;try{const{result:s}=await Vt.getBlock(t,2);e=s}catch(t){return await ht(2e3),[]}if(1===e?.height)return[];const s=await St.selectByHeight(e.height-1);if(!s)return[];if(e?.previousblockhash===s?.hash)return[];const a=await Xt.findOrphans(e.previousblockhash);const{hash:n,height:r}=s;return[...a,{hash:n,height:r,processed:!1}]};static updateStatus=async(t,e)=>{await lt.update(t);const s=await ct.min();const a=Math.min(s,t);Q.warn(`[wid 0 pid: ${process.pid}: reorg detected, resuming at block min(${s},${t}) = ${a}`),await Lt.register(e,a)};static registerOrphans=async(t,e,s)=>{Q.warn(`[wid 0 pid: ${process.pid}: detected ${t.length} orphaned blocks resuming at height ${e}`),await ft.insertAll(t),await this.updateStatus(e,s)};static getBlockBatch=async(t,e,s,a)=>{const n=[];for(let r=t;n.length<a;r+=1){let a;try{const{result:t}=await Vt.getBlockHash(r);a=t}catch(t){break}n.push({hash:a,height:t,previousHash:e});try{if(t>parseInt(H||"",10)){const e=await this.findOrphans(a);e.length&&(dt(s),await this.registerOrphans(e,t-e.length,s.length),Q.warn(`[wid 0 pid: ${process.pid}: exiting ...`),process.exit(0))}}catch(t){Q.error(`[wid 0 pid: ${process.pid}: ${t.message} error at checking block reorgs ${t.stack}`)}t+=1,e=a}return{blockHashes:n,blockToSync:t,previousDbHash:e}};static syncBlocks=async(t,e,s)=>{let a=t;let n=(await St.selectByHeight(t-1))?.hash||"";Q.debug(`[wid ${e} pid: ${process.pid}]: starting to sync block: ${t} prev hash: ${n}`);const r=Math.floor(3333.3333333333335);for(;;)try{const t=await this.getBlockBatch(a,n,s,r);t.blockHashes.length&&(await lt.update(t.blockToSync),a=t.blockToSync,n=t.previousDbHash,await St.insertBatch(t.blockHashes),Q.debug(`[wip ${e} pid: ${process.pid}: synchronizing up to block num ${t.blockToSync}`)),t.blockHashes.length<r&&await ht(2e3)}catch(t){Q.error(`[wid ${e} pid: ${process.pid}]: failed to process block ${a} ${t.message} ${t.stack}`)}}}o(t);const Zt=[];const Qt=B?parseInt(B,10):c()-1;const te=parseInt(x||"0",10);Q.debug(`[wid ${te} pid: ${process.pid}]: starting with ${Qt} threads`);try{if(await(async()=>{await h((()=>nt.connect()),{startingDelay:500})})(),0===te){Q.info(`[wid  ${te} pid: ${process.pid}]: connected to the database successfully`),Q.info(`[wid  ${te} pid: ${process.pid}]: parameters { url: ${N}, chain:${S} network:${O} numWorkers: ${Qt}}`),await Lt.setup(Qt);for(let t=1;t<=Qt;t+=1){Q.debug(`[wid ${te} pid: ${process.pid}]: spawning worker ${t}`);const e=i("node",["dist/bcn.sync.es.mjs"],{env:{...process.env,BCN_WORKER_ID:`${t}`,BCN_NUM_WORKERS:`${Qt}`},stdio:"inherit"});e.pid||(Q.error(`[wid ${te} pid: ${process.pid}]: failed to spawn worker ${t}`),dt(Zt),p(1)),Zt.push(e.pid)}Q.debug(`Spawned workers: ${Zt.map((t=>t)).join(", ")}`);const t=await lt.select();await Xt.syncBlocks(t,0,Zt)}else{Q.info(`[wid ${te} pid: ${process.pid}]: worker ${te} started`),await Lt.waitUntilSetup(te,Qt);const t=await Lt.selectByWorkerId(te);await Xt.syncTxs(t.blockToSync,t.workerId,Qt)}}catch(t){Q.error(`[wid ${te} pid: ${process.pid}]: synchronizing failed with error '${t.message} ${t.stack}'`),dt(Zt),p(1)}
