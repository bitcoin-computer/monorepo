import*as t from"@bitcoin-computer/secp256k1";import{networks as e,bufferUtils as s,crypto as a,address as n,initEccLib as r}from"@bitcoin-computer/nakamotojs";import{availableParallelism as o}from"node:os";import{spawn as c}from"node:child_process";import{exit as i}from"node:process";import p from"dotenv";import l from"winston";import u from"winston-daily-rotate-file";import d from"bitcoind-rpc";import h from"util";import{backOff as y}from"exponential-backoff";import m from"pg-promise";import w from"pg-monitor";import g from"fs";import{Transaction as E,Computer as $}from"@bitcoin-computer/lib";p.config();const v=process.env.BCN_CHAIN;const T=process.env.BCN_NETWORK;const{BCN_PORT:S}=process.env;process.env,process.env;const{BCN_DEBUG_MODE:f}=process.env;const{BCN_LOG_MAX_FILES:O}=process.env;const{BCN_LOG_MAX_SIZE:k}=process.env;const{BCN_LOG_ZIP:I}=process.env;const{BCN_SHOW_CONSOLE_LOGS:R}=process.env;const{BCN_SHOW_DB_LOGS:B}=process.env;process.env,process.env,process.env,process.env,process.env;const{BCN_NUM_WORKERS:b}=process.env;const{BCN_WORKER_ID:M}=process.env;process.env,process.env;const H=process.env.BCN_QUERY_LIMIT||"1000";const N=process.env.BCN_URL||`http://127.0.0.1:${S}`;process.env.BCN_ENV;const x=process.env.BCN_ZMQ_ACTIVATION_HEIGHT||"100000";const{BITCOIN_RPC_USER:A}=process.env;const{BITCOIN_RPC_PASSWORD:C}=process.env;const{BITCOIN_RPC_HOST:L}=process.env;const{BITCOIN_RPC_PORT:P}=process.env;const{BITCOIN_RPC_PROTOCOL:D}=process.env;const{BITCOIN_DEFAULT_WALLET:U}=process.env;const{POSTGRES_USER:_}=process.env;const{POSTGRES_PASSWORD:W}=process.env;const{POSTGRES_DB:F}=process.env;const{POSTGRES_HOST:Y}=process.env;const{POSTGRES_PORT:K}=process.env;const{POSTGRES_MAX_CONNECTIONS:G}=process.env;const{POSTGRES_IDLE_TIMEOUT_MILLIS:V}=process.env;l.addColors({error:"red",warn:"yellow",info:"green",http:"magenta",debug:"white"});const j=l.format.combine(l.format.colorize(),l.format.timestamp({format:"YYYY-MM-DD HH:mm:ss:ms"}),l.format.json(),l.format.printf((t=>`${t.timestamp} [${t.level.slice(5).slice(0,-5)}] ${t.message}`)));const q={zippedArchive:"true"===I,maxSize:k,maxFiles:O,dirname:"logs"};const J=[];"true"===R&&J.push(new l.transports.Console({format:l.format.combine(l.format.colorize(),l.format.timestamp({format:"MM-DD-YYYY HH:mm:ss"}),l.format.printf((t=>`${t.timestamp} ${t.level} ${t.message}`)))}));const z=parseInt(f,10);z>=0&&J.push(new u({filename:"error-%DATE%.log",datePattern:"YYYY-MM-DD",level:"error",...q})),z>=1&&J.push(new u({filename:"warn-%DATE%.log",datePattern:"YYYY-MM-DD",level:"warn",...q})),z>=2&&J.push(new u({filename:"info-%DATE%.log",datePattern:"YYYY-MM-DD",level:"info",...q})),z>=3&&J.push(new u({filename:"http-%DATE%.log",datePattern:"YYYY-MM-DD",level:"http",...q})),z>=4&&J.push(new u({filename:"debug-%DATE%.log",datePattern:"YYYY-MM-DD",level:"debug",...q}));const X=l.createLogger({levels:{error:0,warn:1,info:2,http:3,debug:4},format:j,transports:J,exceptionHandlers:[new l.transports.File({filename:"logs/exceptions.log"})],rejectionHandlers:[new l.transports.File({filename:"logs/rejections.log"})]});const Z=new d({protocol:D,user:A,pass:C,host:L,port:parseInt(P,10)});const Q=h.promisify(d.prototype.createwallet.bind(Z));const tt=h.promisify(d.prototype.generateToAddress.bind(Z));const et=h.promisify(d.prototype.getaddressinfo.bind(Z));const st=h.promisify(d.prototype.getBlock.bind(Z));const at=h.promisify(d.prototype.getBlockchainInfo.bind(Z));const nt=h.promisify(d.prototype.getBlockHash.bind(Z));const rt=h.promisify(d.prototype.getRawTransaction.bind(Z));const ot=h.promisify(d.prototype.getRawTransaction.bind(Z));const ct=h.promisify(d.prototype.getTransaction.bind(Z));const it=h.promisify(d.prototype.getNewAddress.bind(Z));const pt={createwallet:Q,generateToAddress:tt,getaddressinfo:et,getBlock:st,getBlockchainInfo:at,getBlockHash:nt,getRawTransaction:rt,getTransaction:ct,importaddress:h.promisify(d.prototype.importaddress.bind(Z)),invalidateBlock:h.promisify(d.prototype.invalidateBlock.bind(Z)),listunspent:h.promisify(d.prototype.listunspent.bind(Z)),sendRawTransaction:h.promisify(d.prototype.sendRawTransaction.bind(Z)),getNewAddress:it,sendToAddress:h.promisify(d.prototype.sendToAddress.bind(Z)),getRawTransactionJSON:ot};p.config();const{version:lt}=JSON.parse(g.readFileSync("package.json","utf8"));lt||process.env.BCN_SERVER_VERSION;const ut=parseInt(process.env.MWEB_HEIGHT||"",10)||432;const dt={error:(t,e)=>{if(e.cn){const{host:s,port:a,database:n,user:r,password:o}=e.cn;X.debug(`Waiting for db to start { message:${t.message} host:${s}, port:${a}, database:${n}, user:${r}, password: ${o}`)}},noWarnings:!0};"true"===B&&(w.isAttached()?w.detach():(w.attach(dt),w.setTheme("matrix")));const ht=m(dt)({host:Y,port:parseInt(K,10),database:F,user:_,password:W,max:parseInt(G,10),allowExitOnIdle:!0,idleTimeoutMillis:parseInt(V,10)});const{PreparedStatement:yt}=m;class mt{static async selectByWorkerId(t){const e=new yt({name:`TxStatus.select.${Math.random()}`,text:'SELECT "blockToSync", "workerId" FROM "TxStatus" WHERE "workerId" = $1',values:[t]});return ht.oneOrNone(e)}static async update({blockToSync:t,workerId:e}){const s=new yt({name:`TxStatus.update.${Math.random()}`,text:'UPDATE "TxStatus" SET "blockToSync" = $1 WHERE "workerId" = $2',values:[t,e]});await ht.any(s)}static async count(){const t=new yt({name:`TxStatus.count.${Math.random()}`,text:'SELECT COUNT(*) FROM "TxStatus"'});const e=await ht.oneOrNone(t);return parseInt(e?.count,10)||0}static async min(){const t=new yt({name:`TxStatus.min.${Math.random()}`,text:'SELECT MIN("blockToSync") FROM "TxStatus"'});const e=await ht.oneOrNone(t);return parseInt(e?.min,10)||0}static async deleteAll(){const t=new yt({name:`TxStatus.delete.${Math.random()}`,text:'DELETE FROM "TxStatus"'});await ht.any(t)}static async insertBatch(t){const e=[];for(let s=1;s<=t.length;s+=2)e.push(`($${s}, $${s+1})`);const s=e.join(",");const a=new yt({name:`TxStatus.reorg.${Math.random()}`,text:`INSERT INTO "TxStatus"("workerId", "blockToSync") VALUES ${s}`,values:t});await ht.any(a)}}class wt{static async selectByWorkerId(t){return mt.selectByWorkerId(t)}static async update(t){await mt.update(t)}static async count(){return mt.count()}static async insertBatch(t){await mt.insertBatch(t)}static async min(){return mt.min()}static async deleteAll(){await mt.deleteAll()}}const{PreparedStatement:gt}=m;class Et{static async select(){const t=new gt({name:`BlockStatus.select.${Math.random()}`,text:'SELECT "blockToSync" FROM "BlockStatus"'});const e=await ht.oneOrNone(t);return parseInt(e?.blockToSync,10)||null}static async update(t){const e=new gt({name:`BlockStatus.update.${Math.random()}`,text:'UPDATE "BlockStatus" SET "blockToSync" = $1',values:[t]});await ht.any(e)}static async insert(t){const e=new gt({name:`BlockStatus.insert.${Math.random()}`,text:'INSERT INTO "BlockStatus"("blockToSync") VALUES ($1)',values:[t]});await ht.any(e)}static async count(){const t=new gt({name:`BlockStatus.count.${Math.random()}`,text:'SELECT COUNT(*) FROM "BlockStatus"'});const e=await ht.oneOrNone(t);return parseInt(e?.count,10)||0}static async delete(){const t=new gt({name:`BlockStatus.delete.${Math.random()}`,text:'DELETE FROM "BlockStatus"'});await ht.any(t)}}class $t{static async select(){return Et.select()}static async update(t){await Et.update(t)}static async insert(t){await Et.insert(t)}static async count(){return Et.count()}static async delete(){await Et.delete()}}class vt{static update=async t=>$t.update(t);static select=async()=>$t.select();static insert=async t=>$t.insert(t);static count=async()=>$t.count();static delete=async()=>$t.delete()}function Tt(t){t.forEach((t=>{X.info(`[wid 0 pid: ${process.pid}]: killing worker ${t}`);try{X.info(`[wid 0 pid: ${process.pid}]: killing worker (SIGTERM) ${t}: ${process.kill(t,"SIGTERM")}`),process.kill(t,"SIGTERM")}catch(e){X.info(`[wid 0 pid: ${process.pid}]: killing worker ${t}: ${process.kill(t)}`),process.kill(t,"SIGKILL")}}))}const St=(t,e)=>{const s=[];for(let a=0;a<t.length;a+=e){const n=Math.min(a+e,t.length);const r=t.slice(a,n);s.push(r)}return s};const ft=t=>{const e=[];for(let s=1;s<=t;s+=3){const t=`($${s},$${s+1},$${s+2})`;e.push(t)}return e.join(",")};const Ot=t=>{const e=[];for(let s=1;s<=t;s+=10){const t=`($${s},$${s+1},$${s+2},$${s+3},$${s+4},$${s+5},$${s+6},$${s+7},$${s+8},$${s+9})`;e.push(t)}return e.join(",")};const kt=t=>{try{return t()}catch{return null}};const{PreparedStatement:It}=m;class Rt{static async selectByHeight(t){const e=new It({name:`Block.select.${Math.random()}`,text:'SELECT "hash", "height", "previousHash" FROM "Block" WHERE "height" = $1',values:[t]});return ht.oneOrNone(e)}static async insert(t){const e=new It({name:`Block.insert.${Math.random()}`,text:'INSERT INTO "Block" ("hash", "height", "previousHash") VALUES ($1, $2, $3)',values:[t.hash,t.height,t.previousHash]});await ht.none(e)}static async insertBatch(t){const e=t.flatMap((({hash:t,height:e,previousHash:s})=>[t,e,s]));const s=new It({name:`Block.insertBatch.${Math.random()}`,text:`INSERT INTO "Block" ("hash", "height", "previousHash") VALUES ${ft(e.length)}`,values:e});await ht.none(s)}static async deleteAll(){const t=new It({name:`Block.delete.${Math.random()}`,text:'DELETE FROM "Block"',values:[]});await ht.none(t)}static async deleteByHash(t){const e=t.map((t=>t)).join("', '");const s=new It({name:`Block.deleteByHash.${Math.random()}`,text:`DELETE FROM "Block" WHERE "hash" IN ('${e}')`});await ht.none(s)}}class Bt{static selectByHeight=async t=>Rt.selectByHeight(t);static insert=async t=>Rt.insert(t);static insertBatch=async t=>Rt.insertBatch(t);static deleteAll=async()=>Rt.deleteAll();static deleteByHash=async t=>Rt.deleteByHash(t);static waitForDbBlockHash=async(t,e)=>(await y((async()=>{let s;try{s=await Rt.selectByHeight(t)}catch(s){throw X.info(`[wid ${e} pid: ${process.pid}]: waiting for DB to get block ${t} ...`),s}return s}),{startingDelay:1e4,timeMultiple:1,numOfAttempts:720})).hash}class bt{static selectByHeight=async t=>Bt.selectByHeight(t);static insert=async t=>Bt.insert(t);static insertBatch=async t=>Bt.insertBatch(t);static deleteAll=async()=>Bt.deleteAll();static deleteByHash=async t=>Bt.deleteByHash(t);static waitForDbBlockHash=async(t,e)=>Bt.waitForDbBlockHash(t,e)}const{PreparedStatement:Mt}=m;class Ht{static async selectAll(){const t=new Mt({name:`Orphan.select.${Math.random()}`,text:'SELECT * FROM "Orphan"'});return ht.any(t)}static async insertAll(t){const e=t.map((t=>`('${t.hash}',${t.height}, ${t.processed})`)).join(",");const s=new Mt({name:`Orphan.insert.${Math.random()}`,text:`INSERT INTO "Orphan" (hash, height, processed) VALUES ${e}`});await ht.none(s)}static async process(t){const e=t.map((t=>t.height)).join(",");const s=new Mt({name:`Orphan.process.${Math.random()}`,text:`UPDATE "Orphan" SET processed = true WHERE height IN (${e})`});await ht.none(s)}}class Nt{static selectAll=async()=>Ht.selectAll();static insertAll=async t=>Ht.insertAll(t);static process=async t=>Ht.process(t)}class xt{static selectAll=async()=>Nt.selectAll();static insertAll=async t=>Nt.insertAll(t);static process=async t=>Nt.process(t)}const{PreparedStatement:At}=m;class Ct{static async select(t){const e=new At({name:`Input.select.${Math.random()}`,text:'SELECT "outputSpent", "spendingInput", "blockHash" FROM "Input" WHERE "outputSpent" = $1',values:[t]});return ht.any(e)}static async insert(t){await Promise.all(St(t,3333).map((t=>{const e=t.flatMap((({outputSpent:t,spendingInput:e,blockHash:s})=>[t,e,s]));return ht.none(new At({name:`Input.insert.${Math.random()}`,text:`INSERT INTO "Input"("outputSpent", "spendingInput", "blockHash") VALUES ${ft(e.length)} \n              ON CONFLICT ("spendingInput") \n              DO UPDATE SET "blockHash" = COALESCE("Input"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async updateBlockHash(t,e){await Promise.all(St(t,1e4).map((t=>{const s=t.join("','");return ht.none(new At({name:`Input.updateBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = $1 WHERE "spendingInput" IN ('${s}')`,values:[e]}))})))}static async eraseBlockHash(t){await Promise.all(St(t,1e4).map((t=>{const e=t.join("','");return ht.none(new At({name:`Input.eraseBlockHash.${Math.random()}`,text:`UPDATE "Input" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async count(t){const e=t.map((t=>t.outputSpent));const s=new At({name:`Input.belong.${Math.random()}`,text:'SELECT count(*) FROM "Input" WHERE "outputSpent" LIKE ANY ($1)',values:[[e]]});const a=await ht.oneOrNone(s);return parseInt(a?.count,10)||0}}class Lt{static async select(t){return Ct.select(t)}static async insert(t){return Ct.insert(t)}static async updateBlockHash(t,e){return Ct.updateBlockHash(t,e)}static async eraseBlockHash(t){return Ct.eraseBlockHash(t)}}class Pt{static insert=async t=>{await Lt.insert(t)};static getInputs=(t,e=null)=>t.flatMap((({ins:t,txId:e})=>t.map(((t,s)=>({input:t,index:s,txId:e}))))).filter((({input:t})=>!E.isCoinbaseHash(t.hash))).map((({input:t,index:a,txId:n})=>{return{outputSpent:`${r=t.hash,s.reverseBuffer(Buffer.from(r)).toString("hex")}:${t.index}`,spendingInput:`${n}:${a}`,blockHash:e};var r}));static select=async t=>Lt.select(t);static updateBlockHash=async(t,e)=>{await Lt.updateBlockHash(t,e)};static eraseBlockHash=async t=>{await Lt.eraseBlockHash(t)}}function Dt(t){if(!function(t){return/^[0-9A-Fa-f]{64}:\d+$/.test(t)}(t))throw new Error("Invalid rev")}const{PreparedStatement:Ut}=m;class _t{static async listSentOutputs(t){const e=new Ut({name:`Output.listSentTxs.${Math.random()}`,text:'SELECT "Input"."spendingInput" AS "output", "Output"."satoshis" AS "amount"\n        FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent" \n        WHERE "Output"."address" = $1',values:[t]});return(await ht.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listReceivedOutputs(t){const e=new Ut({name:`Output.listReceivedTxs.${Math.random()}`,text:'SELECT "Output"."rev" as "output", "Output"."satoshis" as "amount" FROM "Output" WHERE "address" = $1',values:[t]});return(await ht.any(e)).map((t=>({...t,amount:parseInt(t.amount,10)||0})))}static async listTxs(t){const e=new Ut({name:`Output.listTxs.${Math.random()}`,text:'WITH\n              -- List all txs sent from a given address\n              SENT AS (\n                SELECT split_part("Input"."spendingInput",\':\',1) as "txId", SUM("Output".satoshis) as "satoshis"\n                FROM "Output" INNER JOIN "Input" ON "Output".rev = "Input"."outputSpent"  \n                WHERE "Output".address = $1\n                GROUP BY split_part("Input"."spendingInput",\':\',1)\n              ),\n              -- List all tx received from a given address\n              RECEIVED AS (\n                SELECT SPLIT_PART("Output"."rev",\':\',1) as "txId", SUM("Output"."satoshis") as "satoshis" \n                FROM "Output" \n                WHERE "address" = $1\n                GROUP BY "txId"\n              )\n\n            SELECT\n              RECEIVED."txId", \n              coalesce(SENT."satoshis", 0) as "inputsSatoshis", \n              coalesce(RECEIVED."satoshis", 0) as "outputsSatoshis", \n              coalesce(RECEIVED."satoshis",0) - coalesce(SENT."satoshis",0) as "satoshis"\n            FROM\n              SENT RIGHT JOIN RECEIVED ON SENT."txId" = RECEIVED."txId";',values:[t]});const s=(await ht.any(e)).map((t=>({...t,inputsSatoshis:parseInt(t.inputsSatoshis,10)||0,outputsSatoshis:parseInt(t.outputsSatoshis,10)||0,satoshis:parseInt(t.satoshis,10)||0})));return{sentTxs:s.filter((t=>t.satoshis<0)).map((t=>({...t,satoshis:Math.abs(t.satoshis)}))),receivedTxs:s.filter((t=>t.satoshis>=0))}}static async select(t){const e=new Ut({name:`Output.select.${Math.random()}`,text:'SELECT "address", "satoshis", "scriptPubKey", "rev", "publicKeys", "hash", "mod", "isTbcOutput", "previous", "blockHash" FROM "Output" WHERE "address" = $1',values:[t]});return ht.any(e)}static async insert(t){await Promise.all(St(t,1e3).map((t=>{const e=t.flatMap((({rev:t,address:e,satoshis:s,scriptPubKey:a,isTbcOutput:n,publicKeys:r,mod:o,previous:c,hash:i,blockHash:p})=>[t,e,s,a,n,r,o,c,i,p]));return ht.none(new Ut({name:`Output.insert.${Math.random()}`,text:`INSERT INTO "Output"("rev", "address", "satoshis", "scriptPubKey", "isTbcOutput",\n              "publicKeys", "mod", "previous", "hash", "blockHash") VALUES ${Ot(e.length)} \n              ON CONFLICT  ("rev") \n              DO UPDATE SET "blockHash" = COALESCE("Output"."blockHash", EXCLUDED."blockHash")`,values:e}))})))}static async eraseBlockHash(t){await Promise.all(St(t,1e4).map((t=>{const e=t.join("','");return ht.none(new Ut({name:`Output.eraseBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = NULL WHERE "blockHash" IN ('${e}')`}))})))}static async updateBlockHash(t,e){await Promise.all(St(t,1e4).map((t=>{const s=t.join("','");return ht.none(new Ut({name:`Output.updateBlockHash.${Math.random()}`,text:`UPDATE "Output" SET "blockHash" = $1 WHERE "rev" IN ('${s}')`,values:[e]}))})))}static async getIdByRev(t){const e=new Ut({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON r."previous" = o."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=(await ht.any(e)).filter((t=>null===t.previous));return s[0]?.rev}static async getIdsByRevs(t){return Promise.all(t.map((t=>this.getIdByRev(t))))}static async getLatestRev(t){const e=new Ut({name:`NonStandard.recursiveUpdates.${Math.random()}`,text:'WITH RECURSIVE revUpdates AS (\n        SELECT "rev", "previous" FROM "Output" WHERE "isTbcOutput" = true and "rev" = $1\n        UNION ALL\n        SELECT o."rev", o."previous" FROM "Output" o\n        INNER JOIN revUpdates r ON o."previous" = r."rev"\n      )\n      SELECT * FROM revUpdates',values:[t]});const s=await ht.any(e);const a=Object.fromEntries(s.map((t=>[t.previous,t.rev])));let n=t;for(;a[n];)n=a[n];return n}static async getLatestRevs(t){return Promise.all(t.map(this.getLatestRev))}static async getIdsByMod(t){const e=new Ut({name:`Output.getIdsByMod.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1',values:[t]});return(await ht.any(e)).map((t=>t.rev))}static sqlSuffix(t,e,s){let a="";return s&&(a+=` order by "timestamp" ${s}`),a+=` limit ${t||H}`,e&&(a+=` offset ${e}`),a}static async getRevsByPublicKey(t){const e=new Ut({name:`Output.getRevsByPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys")',values:[t]});return(await ht.any(e)).map((t=>t.rev))}static async getUnspentRevsByMod(t,e,s,a){const n=await this.getIdsByMod(t);const r=await this.getLatestRevs(n);const o=new Ut({name:`Output.getUnspentRevsByMod.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(e,s,a)}`,values:[r]});return(await ht.any(o)).map((t=>t.rev))}static async getUnspentRevsByPublicKey(t,e,s,a){const n=new Ut({name:`Output.getUnspentRevsByPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE $1 = ANY("publicKeys") AND "isTbcOutput" = true \n      AND NOT EXISTS (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") \n      ${this.sqlSuffix(e,s,a)}`,values:[t]});return(await ht.any(n)).map((t=>t.rev))}static async getUnspentRevsByModAndPublicKey(t,e,s,a,n){const r=await this.getUnspentRevsByPublicKey(e,s,a,n);const o=await this.getIdsByRevs(r);const c=new Ut({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:'SELECT "rev" FROM "Output" WHERE "mod" = $1 AND "rev" = ANY($2)',values:[t,o]});const i=(await ht.any(c)).map((t=>t.rev));const p=await this.getLatestRevs(i);const l=new Ut({name:`Output.getLatestRevsByModAndPublicKey.${Math.random()}`,text:`SELECT "rev" FROM "Output" WHERE "rev" = ANY($1) ${this.sqlSuffix(s,a,n)}`,values:[p]});return(await ht.any(l)).map((t=>t.rev))}static async getUnspentTbcOutputs(t,e,s){const a=new Ut({name:`Output.getUnspentTbcOutputs.${Math.random()}`,text:`SELECT "rev", "address", "satoshis", "scriptPubKey", "publicKeys", "timestamp"\n        FROM "Output" WHERE "isTbcOutput" = true AND NOT EXISTS\n        (SELECT 1 FROM "Input" ip WHERE "ip"."outputSpent" = "Output"."rev") ${this.sqlSuffix(t,e,s)}`});return(await ht.any(a)).map((t=>t.rev))}static async query(t){const{publicKey:e,limit:s,offset:a,ids:n,mod:r,order:o}=t;const c=parseInt(H||"",10);if(s&&parseInt(s||"",10)>c||n&&n.length>c)throw new Error(`Can't fetch more than ${H} revs.`);if(o&&"ASC"!==o&&"DESC"!==o)throw new Error("Invalid order. Should be ASC or DESC.");return n?(n.map(Dt),this.getLatestRevs(n)):r&&!e?this.getUnspentRevsByMod(r,s,a,o):!r&&e?this.getUnspentRevsByPublicKey(e,s,a,o):r&&e?this.getUnspentRevsByModAndPublicKey(r,e,s,a,o):this.getUnspentTbcOutputs(s,a,o)}}class Wt{static async select(t){return _t.select(t)}static async insert(t){return _t.insert(t)}static async eraseBlockHash(t){return _t.eraseBlockHash(t)}static async updateBlockHash(t,e){return _t.updateBlockHash(t,e)}static async listSentOutputs(t){return _t.listSentOutputs(t)}static async listReceivedOutputs(t){return _t.listReceivedOutputs(t)}static async listTxs(t){return _t.listTxs(t)}static async getLatestRev(t){return _t.getLatestRev(t)}static async getLatestRevs(t){return _t.getLatestRevs(t)}static async getIdByRev(t){return _t.getIdByRev(t)}static async query(t){return _t.query(t)}}const Ft=function(t=v,s=T){switch(t){case"BTC":switch(s){case"mainnet":return e.bitcoin;case"testnet":return e.testnet;case"regtest":return e.regtest;default:throw new Error(`Invalid network ${s}`)}case"LTC":switch(s){case"mainnet":return e.litecoin;case"testnet":return e.litecointestnet;case"regtest":return e.litecoinregtest;default:throw new Error(`Invalid network ${s}`)}case"PEPE":switch(s){case"mainnet":return e.pepecoin;case"testnet":return e.pepecointestnet;case"regtest":return e.pepecoinregtest;default:throw new Error(`Invalid network ${s}`)}default:throw new Error(`Invalid chain ${t}`)}}(v,T);class Yt{static insert(t){return Wt.insert(t)}static getOutputs=(t,e=null)=>t.flatMap((({outs:t,txId:s,zip:r,ownerData:o,onChainMetaData:c})=>{const{exp:i="",mod:p=""}=c;return t.map((({script:t,value:c},l)=>{const u=l<r.length;return{rev:`${s}:${l}`,address:kt((()=>n.fromOutputScript(t,Ft))),satoshis:Math.round(c),scriptPubKey:t.toString("hex"),isTbcOutput:u,publicKeys:u?o[l]._owners:[],mod:u?p:"",previous:u?r[l][0]:null,hash:u?a.sha256(Buffer.from(i)).toString("hex"):null,blockHash:e}}))}));static select=async t=>Wt.select(t);static eraseBlockHash=async t=>{await Wt.eraseBlockHash(t)};static updateBlockHash=async(t,e)=>{await Wt.updateBlockHash(t,e)};static listSentOutputs=async t=>Wt.listSentOutputs(t);static listReceivedOutputs=async t=>Wt.listReceivedOutputs(t);static listTxs=async t=>Wt.listTxs(t);static getLatestRev=async t=>Wt.getLatestRev(t);static getLatestRevs=async t=>Wt.getLatestRevs(t);static getIdByRev=async t=>Wt.getIdByRev(t);static query=async t=>Wt.query(t)}class Kt{static update=async t=>wt.update(t);static insertBatch=async t=>wt.insertBatch(t);static deleteAll=async()=>wt.deleteAll();static count=async()=>wt.count();static waitUntilSetup=async(t,e)=>{X.info(`WorkerId ${t} waiting for master worker to reorg up to ${e} workers...`),await y((async()=>{const s=await wt.count();if(s===e)return!0;throw X.info(`WorkerId ${t} waiting until setup done. Actual ${s}, numWorkers ${e}`),new Error("Not all workers have reorged")}),{startingDelay:500})};static selectByWorkerId=async t=>wt.selectByWorkerId(t);static setup=async t=>{0===await $t.count()&&(await vt.insert(1),X.info(`[wid 0 pid: ${process.pid}: registering block sync status on block 1`)),await wt.count()===t?X.info(`[wid 1 pid: ${process.pid}: all workers have already registered`):await Kt.register(t,await wt.min());const e=await xt.selectAll();if(e.length>0){X.info(`[wid 0 pid: ${process.pid}: found ${e.length} orphans`);const s=e.map((t=>t.hash));await bt.deleteByHash(s),await Pt.eraseBlockHash(s),await Yt.eraseBlockHash(s);const a=await wt.min();const n=Math.min(e[0].height-1,a);X.info(`[wid 0 pid: ${process.pid}: last block synced from workers ${a}`),X.info(`[wid 0 pid: ${process.pid}: last valid block at ${e[0].height-1}`),X.info(`[wid 0 pid: ${process.pid}: resuming at ${n}`),await Kt.register(t,n),await xt.process(e)}};static register=async(t,e)=>{const s=[];let a=Math.max(1,e);for(let e=1;e<=t;e+=1,a+=1)s.push(e,a);X.info(`[wid 0 pid: ${process.pid}: reorging sync status for ${t} workers...${s}`),await wt.deleteAll(),await wt.insertBatch(s)};static min=async()=>wt.min()}class Gt{static async getTransaction(t){const{result:e}=await pt.getTransaction(t);return e}static async getBulkTransactions(t){return(await Promise.all(t.map((t=>pt.getRawTransaction(t,0))))).map((t=>t.result))}static async getRawTransaction(t,e){const{result:s}=await pt.getRawTransaction(t,e);return s}static async getRawTransactionsJSON(t){return{txId:(e=(await pt.getRawTransactionJSON(t,1)).result).txid,txHex:e.hex,vsize:e.vsize,version:e.version,locktime:e.locktime,ins:e.vin.map((t=>t.coinbase?{coinbase:t.coinbase,sequence:t.sequence}:{txId:t.txid,vout:t.vout,script:t.scriptSig.hex,sequence:t.sequence})),outs:e.vout.map((t=>{let e;return t.scriptPubKey.addresses?[e]=t.scriptPubKey.addresses:e=t.scriptPubKey.address?t.scriptPubKey.address:void 0,{address:e,script:t.scriptPubKey.hex,value:Math.round(1e8*t.value)}}))};var e}static async sendRawTransaction(t){const{result:e,error:s}=await pt.sendRawTransaction(t);if(s)throw X.error(s),new Error("Error sending transaction");return e}static getUtxos=async t=>(void 0===(await pt.getaddressinfo(t)).result.timestamp&&(X.info(`Importing address: ${t}`),await pt.importaddress(t,!1)),(await pt.listunspent(0,999999,[t])).result);static getBlockHash=async(t,e)=>{const s={hash:null,error:!1};try{const{result:e}=await pt.getBlockHash(t);s.hash=e}catch(a){X.info(`[wid ${e} pid: ${process.pid}]: waiting for RPC to get block ${t} ...`),s.error=!0,await new Promise((t=>{setTimeout(t,5e3)}))}return s};static getBlock=async(t,e)=>pt.getBlock(t,e);static walletSetup=async()=>{if("regtest"===T){if(X.info(`Node is starting for chain ${v} and network ${T}, \n\n. Starting Wallet setup.`),"LTC"===v){const{result:t}=await pt.getBlockchainInfo();const e=t.blocks;if(e<ut){const{result:t}=await pt.getNewAddress("","legacy");const s=ut-e-1;s&&await pt.generateToAddress(s,t);const{result:a}=await pt.getNewAddress("mweb","mweb");await pt.sendToAddress(a,1),await pt.generateToAddress(1,t),X.info("MWEB setup is complete")}}if("BTC"===v){const{result:t}=await pt.getNewAddress("","legacy");await pt.generateToAddress(200,t),X.info("Wallet setup is complete")}if("PEPE"===v){const{result:t}=await pt.getNewAddress("");await pt.generateToAddress(200,t),X.info("Wallet setup is complete")}}};static createWallet=async()=>{try{await pt.createwallet(U,!1,!1,"",!1,!1)}catch(t){if(t.message.includes("already exists"))return void X.info(`Wallet ${U} already exists`);X.error(`Wallet creation failed with error '${t.message}'`)}};static checkBlockchainProgress=async t=>{const e=await y((async()=>{const e=await pt.getBlockchainInfo();const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const{blocks:a}=e.result;if(X.info(`Zmq. Bitcoind { percentage:${s}%, blocks:${a} }`),parseFloat(e.result.verificationprogress)<=t)throw new Error("Node not ready yet");return e}),{startingDelay:6e4,timeMultiple:1,numOfAttempts:8760});const s=(100*parseFloat(e.result.verificationprogress)).toFixed(4);const a=e.result.blocks;X.info(`BCN reaches sync end...at { bitcoind.progress:${s}%, bitcoindSyncedHeight:${a} }`)}}class Vt{static get=async t=>Gt.getTransaction(t);static getRaw=async t=>Gt.getBulkTransactions(t);static getRawJSON=async t=>Gt.getRawTransactionsJSON(t);static sendRaw=async t=>Gt.sendRawTransaction(t);static getUtxos=async t=>Gt.getUtxos(t);static parseTransactions=async(t,e,s,a)=>{let n=t;"LTC"===e&&(n=t.filter((t=>"08"!==t.hex.slice(10,12))));const r=[];for(const t of n)try{let{hex:e}=t;e||(e=(await Gt.getRawTransaction(t.txid,1)).hex);const s=$.txFromHex({hex:e});s&&r.push(s)}catch(e){X.error(`[wid ${s} pid: ${process.pid}: failed to parse transaction in block ${a}\n          error message: ${e.message}\n          transaction: ${JSON.stringify(t)}`)}return r};static walletSetup=async()=>Gt.walletSetup()}class jt{static getTxBatch=async(t,e,s,a=v)=>{const n=[];const r=[];for(;10*n.length<1e4&&3*r.length<1e4;){const{error:o,hash:c}=await Gt.getBlockHash(t,e);if(o)break;t+=s;try{const{result:t}=await Gt.getBlock(c,2);const s=await Vt.parseTransactions(t.tx,a,e,t.height);n.push(...Yt.getOutputs(s,c)),r.push(...Pt.getInputs(s,c))}catch(t){X.error(`[wid ${e} pid: ${process.pid}]: failed to get inputs or outputs ${t.message} ${t.stack}`)}}return{outputs:n,inputs:r,blockToSync:t}};static syncTxs=async(t,e,s)=>{let a=t;for(X.info(`[wid ${e} pid: ${process.pid}]: starting to sync txs from block: ${a} - numWorkers: ${s}`);;)try{const t=await this.getTxBatch(a,e,s);(t.outputs.length>0||t.inputs.length>0)&&(await Kt.update({blockToSync:t.blockToSync,workerId:e}),a=t.blockToSync,X.info(`[wid ${e} pid: ${process.pid}: backfilling up to ${t.blockToSync-1} - #outputs ${t.outputs.length} #inputs ${t.inputs.length} `),await Promise.all([Yt.insert(t.outputs),Pt.insert(t.inputs)]))}catch(t){X.error(`[wid ${e} pid: ${process.pid}]: failed to process block ${a} ${t.message} ${t.stack}`)}};static findOrphans=async t=>{const e=await pt.getBlock(t,2);if(1===e?.result.height)return[];const s=await bt.selectByHeight(e.result.height-1);if(!s)return[];if(e?.result.previousblockhash===s?.hash)return[];const a=await jt.findOrphans(e.result.previousblockhash);const{hash:n,height:r}=s;return[...a,{hash:n,height:r,processed:!1}]};static updateStatus=async(t,e)=>{await vt.update(t);const s=await wt.min();const a=Math.min(s,t);X.info(`[wid 0 pid: ${process.pid}: reorg detected, resuming at block  min(${s},${t}) = ${a}`),await Kt.register(e,a)};static registerOrphans=async(t,e,s)=>{X.info(`[wid 0 pid: ${process.pid}: detected ${t.length} orphaned blocks resuming at height ${e}`),await xt.insertAll(t),await this.updateStatus(e,s)};static checkReorg=async(t,e,s)=>{if(t>parseInt(x||"",10))try{const a=await this.findOrphans(e);a.length&&(Tt(s),await this.registerOrphans(a,t-a.length,s.length),X.info(`[wid 0 pid: ${process.pid}: exiting ...`),process.exit(0))}catch(t){X.error(`[wid 0 pid: ${process.pid}: ${t.message} error at checking block reorgs ${t.stack}`)}};static getBlockBatch=async(t,e,s,a,n)=>{const r=[];for(let o=t;r.length<n;o+=1){const{error:n,hash:c}=await Gt.getBlockHash(o,s);if(n)break;r.push({hash:c,height:t,previousHash:e}),await this.checkReorg(t,c,a),t+=1,e=c}return{blockHashes:r,blockToSync:t,previousDbHash:e}};static syncBlocks=async(t,e,s)=>{let a=t;let n=(await bt.selectByHeight(t-1))?.hash||"";X.info(`[wid ${e} pid: ${process.pid}]: starting to sync block: ${t} prev hash: ${n}`);const r=Math.floor(3333.3333333333335);for(;;)try{const t=await this.getBlockBatch(a,n,e,s,r);t.blockHashes.length&&(await vt.update(t.blockToSync),a=t.blockToSync,n=t.previousDbHash,await bt.insertBatch(t.blockHashes),X.info(`[wip ${e} pid: ${process.pid}: synchronizing up to block num ${t.blockToSync}`))}catch(t){X.error(`[wid ${e} pid: ${process.pid}]: failed to process block ${a} ${t.message} ${t.stack}`)}}}r(t);const qt=[];const Jt=b?parseInt(b,10):o()-1;const zt=parseInt(M||"0",10);X.info(`[wid ${zt} pid: ${process.pid}]: starting with ${Jt} threads`);try{if(await(async()=>{await y((()=>ht.connect()),{startingDelay:500})})(),0===zt){X.info(`[wid  ${zt} pid: ${process.pid}]: connected to the database successfully`),X.info(`[wid  ${zt} pid: ${process.pid}]: parameters { url: ${N}, chain:${v} network:${T} numWorkers: ${Jt}}`),await Kt.setup(Jt);for(let t=1;t<=Jt;t+=1){X.info(`[wid ${zt} pid: ${process.pid}]: spawning worker ${t}`);const e=c("node",["dist/bcn.sync.es.mjs"],{env:{...process.env,BCN_WORKER_ID:`${t}`,BCN_NUM_WORKERS:`${Jt}`},stdio:"inherit"});e.pid||(X.error(`[wid ${zt} pid: ${process.pid}]: failed to spawn worker ${t}`),Tt(qt),i(1)),qt.push(e.pid)}X.info(`Spawned workers: ${qt.map((t=>t)).join(", ")}`);const t=await vt.select();await jt.syncBlocks(t,0,qt)}else{await Kt.waitUntilSetup(zt,Jt);const t=await Kt.selectByWorkerId(zt);await jt.syncTxs(t.blockToSync,t.workerId,Jt)}}catch(t){X.error(`[wid ${zt} pid: ${process.pid}]: synchronizing failed with error '${t.message} ${t.stack}'`),Tt(qt),i(1)}
